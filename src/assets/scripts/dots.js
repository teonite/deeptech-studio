var h6=function(){const J=Math.random()*4294967295|0,$=Math.random()*4294967295|0,Z=Math.random()*4294967295|0,Q=Math.random()*4294967295|0;return(XJ[J&255]+XJ[J>>8&255]+XJ[J>>16&255]+XJ[J>>24&255]+"-"+XJ[$&255]+XJ[$>>8&255]+"-"+XJ[$>>16&15|64]+XJ[$>>24&255]+"-"+XJ[Z&63|128]+XJ[Z>>8&255]+"-"+XJ[Z>>16&255]+XJ[Z>>24&255]+XJ[Q&255]+XJ[Q>>8&255]+XJ[Q>>16&255]+XJ[Q>>24&255]).toLowerCase()},RJ=function(J,$,Z){return Math.max($,Math.min(Z,J))},s9=function(J,$){return(J%$+$)%$};var L7=function(J,$,Z){return(1-Z)*J+Z*$};var z8=function(J){return(J&J-1)===0&&J!==0};var i7=function(J){return Math.pow(2,Math.floor(Math.log(J)/Math.LN2))};var P6=function(J,$){switch($.constructor){case Float32Array:return J;case Uint32Array:return J/4294967295;case Uint16Array:return J/65535;case Uint8Array:return J/255;case Int32Array:return Math.max(J/2147483647,-1);case Int16Array:return Math.max(J/32767,-1);case Int8Array:return Math.max(J/127,-1);default:throw new Error("Invalid component type.")}},qJ=function(J,$){switch($.constructor){case Float32Array:return J;case Uint32Array:return Math.round(J*4294967295);case Uint16Array:return Math.round(J*65535);case Uint8Array:return Math.round(J*255);case Int32Array:return Math.round(J*2147483647);case Int16Array:return Math.round(J*32767);case Int8Array:return Math.round(J*127);default:throw new Error("Invalid component type.")}},H9=function(J){for(let $=J.length-1;$>=0;--$)if(J[$]>=65535)return!0;return!1};var D7=function(J){return document.createElementNS("http://www.w3.org/1999/xhtml",J)},o9=function(){const J=D7("canvas");return J.style.display="block",J},b6=function(J){if(J in B8)return;B8[J]=!0,console.warn(J)},z6=function(J){return J<0.04045?J*0.0773993808:Math.pow(J*0.9478672986+0.0521327014,2.4)},P7=function(J){return J<0.0031308?J*12.92:1.055*Math.pow(J,0.41666)-0.055},T7=function(J){if(typeof HTMLImageElement!=="undefined"&&J instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&J instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&J instanceof ImageBitmap)return e7.getDataURL(J);else if(J.data)return{data:Array.from(J.data),width:J.width,height:J.height,type:J.data.constructor.name};else return console.warn("THREE.Texture: Unable to serialize Texture."),{}},y7=function(J,$,Z,Q,W){for(let Y=0,H=J.length-3;Y<=H;Y+=3){aJ.fromArray(J,Y);const X=W.x*Math.abs(aJ.x)+W.y*Math.abs(aJ.y)+W.z*Math.abs(aJ.z),K=$.dot(aJ),G=Z.dot(aJ),U=Q.dot(aJ);if(Math.max(-Math.max(K,G,U),Math.min(K,G,U))>X)return!1}return!0},m7=function(J,$,Z){if(Z<0)Z+=1;if(Z>1)Z-=1;if(Z<0.16666666666666666)return J+($-J)*6*Z;if(Z<0.5)return $;if(Z<0.6666666666666666)return J+($-J)*6*(0.6666666666666666-Z);return J};var K$=function(J,$,Z,Q,W,Y,H,X){let K;if($.side===1)K=Q.intersectTriangle(H,Y,W,!0,X);else K=Q.intersectTriangle(W,Y,H,$.side===0,X);if(K===null)return null;X7.copy(X),X7.applyMatrix4(J.matrixWorld);const G=Z.ray.origin.distanceTo(X7);if(G<Z.near||G>Z.far)return null;return{distance:G,point:X7.clone(),object:J}},H7=function(J,$,Z,Q,W,Y,H,X,K,G){J.getVertexPosition(X,E6),J.getVertexPosition(K,D6),J.getVertexPosition(G,F6);const U=K$(J,$,Z,Q,E6,D6,F6,Y7);if(U){if(W)Z7.fromBufferAttribute(W,X),Q7.fromBufferAttribute(W,K),W7.fromBufferAttribute(W,G),U.uv=kJ.getInterpolation(Y7,E6,D6,F6,Z7,Q7,W7,new m0);if(Y)Z7.fromBufferAttribute(Y,X),Q7.fromBufferAttribute(Y,K),W7.fromBufferAttribute(Y,G),U.uv1=kJ.getInterpolation(Y7,E6,D6,F6,Z7,Q7,W7,new m0),U.uv2=U.uv1;if(H){if(j8.fromBufferAttribute(H,X),b8.fromBufferAttribute(H,K),x8.fromBufferAttribute(H,G),U.normal=kJ.getInterpolation(Y7,E6,D6,F6,j8,b8,x8,new v),U.normal.dot(Q.direction)>0)U.normal.multiplyScalar(-1)}const V={a:X,b:K,c:G,normal:new v,materialIndex:0};kJ.getNormal(E6,D6,F6,V.normal),U.face=V}return U},B6=function(J){const $={};for(let Z in J){$[Z]={};for(let Q in J[Z]){const W=J[Z][Q];if(W&&(W.isColor||W.isMatrix3||W.isMatrix4||W.isVector2||W.isVector3||W.isVector4||W.isTexture||W.isQuaternion))if(W.isRenderTargetTexture)console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),$[Z][Q]=null;else $[Z][Q]=W.clone();else if(Array.isArray(W))$[Z][Q]=W.slice();else $[Z][Q]=W}}return $},UJ=function(J){const $={};for(let Z=0;Z<J.length;Z++){const Q=B6(J[Z]);for(let W in Q)$[W]=Q[W]}return $},G$=function(J){const $=[];for(let Z=0;Z<J.length;Z++)$.push(J[Z].clone());return $},U9=function(J){if(J.getRenderTarget()===null)return J.outputColorSpace;return h0.workingColorSpace},E9=function(){let J=null,$=!1,Z=null,Q=null;function W(Y,H){Z(Y,H),Q=J.requestAnimationFrame(W)}return{start:function(){if($===!0)return;if(Z===null)return;Q=J.requestAnimationFrame(W),$=!0},stop:function(){J.cancelAnimationFrame(Q),$=!1},setAnimationLoop:function(Y){Z=Y},setContext:function(Y){J=Y}}},D$=function(J,$){const Z=$.isWebGL2,Q=new WeakMap;function W(G,U){const{array:V,usage:R}=G,D=J.createBuffer();J.bindBuffer(U,D),J.bufferData(U,V,R),G.onUploadCallback();let M;if(V instanceof Float32Array)M=J.FLOAT;else if(V instanceof Uint16Array)if(G.isFloat16BufferAttribute)if(Z)M=J.HALF_FLOAT;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else M=J.UNSIGNED_SHORT;else if(V instanceof Int16Array)M=J.SHORT;else if(V instanceof Uint32Array)M=J.UNSIGNED_INT;else if(V instanceof Int32Array)M=J.INT;else if(V instanceof Int8Array)M=J.BYTE;else if(V instanceof Uint8Array)M=J.UNSIGNED_BYTE;else if(V instanceof Uint8ClampedArray)M=J.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+V);return{buffer:D,type:M,bytesPerElement:V.BYTES_PER_ELEMENT,version:G.version}}function Y(G,U,V){const{array:R,updateRange:D}=U;if(J.bindBuffer(V,G),D.count===-1)J.bufferSubData(V,0,R);else{if(Z)J.bufferSubData(V,D.offset*R.BYTES_PER_ELEMENT,R,D.offset,D.count);else J.bufferSubData(V,D.offset*R.BYTES_PER_ELEMENT,R.subarray(D.offset,D.offset+D.count));D.count=-1}U.onUploadCallback()}function H(G){if(G.isInterleavedBufferAttribute)G=G.data;return Q.get(G)}function X(G){if(G.isInterleavedBufferAttribute)G=G.data;const U=Q.get(G);if(U)J.deleteBuffer(U.buffer),Q.delete(G)}function K(G,U){if(G.isGLBufferAttribute){const R=Q.get(G);if(!R||R.version<G.version)Q.set(G,{buffer:G.buffer,type:G.type,bytesPerElement:G.elementSize,version:G.version});return}if(G.isInterleavedBufferAttribute)G=G.data;const V=Q.get(G);if(V===void 0)Q.set(G,W(G,U));else if(V.version<G.version)Y(V.buffer,G,U),V.version=G.version}return{get:H,remove:X,update:K}},sZ=function(J,$,Z,Q,W,Y,H){const X=new g0(0);let K=Y===!0?0:1,G,U,V=null,R=0,D=null;function M(E,q){let I=!1,z=q.isScene===!0?q.background:null;if(z&&z.isTexture)z=(q.backgroundBlurriness>0?Z:$).get(z);if(z===null)O(X,K);else if(z&&z.isColor)O(z,1),I=!0;const A=J.xr.getEnvironmentBlendMode();if(A==="additive")Q.buffers.color.setClear(0,0,0,1,H);else if(A==="alpha-blend")Q.buffers.color.setClear(0,0,0,0,H);if(J.autoClear||I)J.clear(J.autoClearColor,J.autoClearDepth,J.autoClearStencil);if(z&&(z.isCubeTexture||z.mapping===306)){if(U===void 0)U=new hJ(new p6(1,1,1),new sJ({name:"BackgroundCubeMaterial",uniforms:B6(AJ.backgroundCube.uniforms),vertexShader:AJ.backgroundCube.vertexShader,fragmentShader:AJ.backgroundCube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),U.geometry.deleteAttribute("normal"),U.geometry.deleteAttribute("uv"),U.onBeforeRender=function(L,w,g){this.matrixWorld.copyPosition(g.matrixWorld)},Object.defineProperty(U.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),W.update(U);if(U.material.uniforms.envMap.value=z,U.material.uniforms.flipEnvMap.value=z.isCubeTexture&&z.isRenderTargetTexture===!1?-1:1,U.material.uniforms.backgroundBlurriness.value=q.backgroundBlurriness,U.material.uniforms.backgroundIntensity.value=q.backgroundIntensity,U.material.toneMapped=h0.getTransfer(z.colorSpace)!=="srgb",V!==z||R!==z.version||D!==J.toneMapping)U.material.needsUpdate=!0,V=z,R=z.version,D=J.toneMapping;U.layers.enableAll(),E.unshift(U,U.geometry,U.material,0,0,null)}else if(z&&z.isTexture){if(G===void 0)G=new hJ(new V8(2,2),new sJ({name:"BackgroundMaterial",uniforms:B6(AJ.background.uniforms),vertexShader:AJ.background.vertexShader,fragmentShader:AJ.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),G.geometry.deleteAttribute("normal"),Object.defineProperty(G.material,"map",{get:function(){return this.uniforms.t2D.value}}),W.update(G);if(G.material.uniforms.t2D.value=z,G.material.uniforms.backgroundIntensity.value=q.backgroundIntensity,G.material.toneMapped=h0.getTransfer(z.colorSpace)!=="srgb",z.matrixAutoUpdate===!0)z.updateMatrix();if(G.material.uniforms.uvTransform.value.copy(z.matrix),V!==z||R!==z.version||D!==J.toneMapping)G.material.needsUpdate=!0,V=z,R=z.version,D=J.toneMapping;G.layers.enableAll(),E.unshift(G,G.geometry,G.material,0,0,null)}}function O(E,q){E.getRGB(G7,U9(J)),Q.buffers.color.setClear(G7.r,G7.g,G7.b,q,H)}return{getClearColor:function(){return X},setClearColor:function(E,q=1){X.set(E),K=q,O(X,K)},getClearAlpha:function(){return K},setClearAlpha:function(E){K=E,O(X,K)},render:M}},oZ=function(J,$,Z,Q){const W=J.getParameter(J.MAX_VERTEX_ATTRIBS),Y=Q.isWebGL2?null:$.get("OES_vertex_array_object"),H=Q.isWebGL2||Y!==null,X={},K=E(null);let G=K,U=!1;function V(P,l,n,d,r){let p=!1;if(H){const T=O(d,n,l);if(G!==T)G=T,D(G.object);if(p=q(P,d,n,r),p)I(P,d,n,r)}else{const T=l.wireframe===!0;if(G.geometry!==d.id||G.program!==n.id||G.wireframe!==T)G.geometry=d.id,G.program=n.id,G.wireframe=T,p=!0}if(r!==null)Z.update(r,J.ELEMENT_ARRAY_BUFFER);if(p||U){if(U=!1,u(P,l,n,d),r!==null)J.bindBuffer(J.ELEMENT_ARRAY_BUFFER,Z.get(r).buffer)}}function R(){if(Q.isWebGL2)return J.createVertexArray();return Y.createVertexArrayOES()}function D(P){if(Q.isWebGL2)return J.bindVertexArray(P);return Y.bindVertexArrayOES(P)}function M(P){if(Q.isWebGL2)return J.deleteVertexArray(P);return Y.deleteVertexArrayOES(P)}function O(P,l,n){const d=n.wireframe===!0;let r=X[P.id];if(r===void 0)r={},X[P.id]=r;let p=r[l.id];if(p===void 0)p={},r[l.id]=p;let T=p[d];if(T===void 0)T=E(R()),p[d]=T;return T}function E(P){const l=[],n=[],d=[];for(let r=0;r<W;r++)l[r]=0,n[r]=0,d[r]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:l,enabledAttributes:n,attributeDivisors:d,object:P,attributes:{},index:null}}function q(P,l,n,d){const r=G.attributes,p=l.attributes;let T=0;const h=n.getAttributes();for(let a in h)if(h[a].location>=0){const X0=r[a];let U0=p[a];if(U0===void 0){if(a==="instanceMatrix"&&P.instanceMatrix)U0=P.instanceMatrix;if(a==="instanceColor"&&P.instanceColor)U0=P.instanceColor}if(X0===void 0)return!0;if(X0.attribute!==U0)return!0;if(U0&&X0.data!==U0.data)return!0;T++}if(G.attributesNum!==T)return!0;if(G.index!==d)return!0;return!1}function I(P,l,n,d){const r={},p=l.attributes;let T=0;const h=n.getAttributes();for(let a in h)if(h[a].location>=0){let X0=p[a];if(X0===void 0){if(a==="instanceMatrix"&&P.instanceMatrix)X0=P.instanceMatrix;if(a==="instanceColor"&&P.instanceColor)X0=P.instanceColor}const U0={};if(U0.attribute=X0,X0&&X0.data)U0.data=X0.data;r[a]=U0,T++}G.attributes=r,G.attributesNum=T,G.index=d}function z(){const P=G.newAttributes;for(let l=0,n=P.length;l<n;l++)P[l]=0}function A(P){L(P,0)}function L(P,l){const{newAttributes:n,enabledAttributes:d,attributeDivisors:r}=G;if(n[P]=1,d[P]===0)J.enableVertexAttribArray(P),d[P]=1;if(r[P]!==l)(Q.isWebGL2?J:$.get("ANGLE_instanced_arrays"))[Q.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](P,l),r[P]=l}function w(){const{newAttributes:P,enabledAttributes:l}=G;for(let n=0,d=l.length;n<d;n++)if(l[n]!==P[n])J.disableVertexAttribArray(n),l[n]=0}function g(P,l,n,d,r,p,T){if(T===!0)J.vertexAttribIPointer(P,l,n,r,p);else J.vertexAttribPointer(P,l,n,d,r,p)}function u(P,l,n,d){if(Q.isWebGL2===!1&&(P.isInstancedMesh||d.isInstancedBufferGeometry)){if($.get("ANGLE_instanced_arrays")===null)return}z();const r=d.attributes,p=n.getAttributes(),T=l.defaultAttributeValues;for(let h in p){const a=p[h];if(a.location>=0){let G0=r[h];if(G0===void 0){if(h==="instanceMatrix"&&P.instanceMatrix)G0=P.instanceMatrix;if(h==="instanceColor"&&P.instanceColor)G0=P.instanceColor}if(G0!==void 0){const{normalized:X0,itemSize:U0}=G0,j0=Z.get(G0);if(j0===void 0)continue;const{buffer:F0,type:y0,bytesPerElement:n0}=j0,KJ=Q.isWebGL2===!0&&(y0===J.INT||y0===J.UNSIGNED_INT||G0.gpuType===1013);if(G0.isInterleavedBufferAttribute){const S=G0.data,i0=S.stride,f0=G0.offset;if(S.isInstancedInterleavedBuffer){for(let D0=0;D0<a.locationSize;D0++)L(a.location+D0,S.meshPerAttribute);if(P.isInstancedMesh!==!0&&d._maxInstanceCount===void 0)d._maxInstanceCount=S.meshPerAttribute*S.count}else for(let D0=0;D0<a.locationSize;D0++)A(a.location+D0);J.bindBuffer(J.ARRAY_BUFFER,F0);for(let D0=0;D0<a.locationSize;D0++)g(a.location+D0,U0/a.locationSize,y0,X0,i0*n0,(f0+U0/a.locationSize*D0)*n0,KJ)}else{if(G0.isInstancedBufferAttribute){for(let S=0;S<a.locationSize;S++)L(a.location+S,G0.meshPerAttribute);if(P.isInstancedMesh!==!0&&d._maxInstanceCount===void 0)d._maxInstanceCount=G0.meshPerAttribute*G0.count}else for(let S=0;S<a.locationSize;S++)A(a.location+S);J.bindBuffer(J.ARRAY_BUFFER,F0);for(let S=0;S<a.locationSize;S++)g(a.location+S,U0/a.locationSize,y0,X0,U0*n0,U0/a.locationSize*S*n0,KJ)}}else if(T!==void 0){const X0=T[h];if(X0!==void 0)switch(X0.length){case 2:J.vertexAttrib2fv(a.location,X0);break;case 3:J.vertexAttrib3fv(a.location,X0);break;case 4:J.vertexAttrib4fv(a.location,X0);break;default:J.vertexAttrib1fv(a.location,X0)}}}}w()}function N(){e();for(let P in X){const l=X[P];for(let n in l){const d=l[n];for(let r in d)M(d[r].object),delete d[r];delete l[n]}delete X[P]}}function C(P){if(X[P.id]===void 0)return;const l=X[P.id];for(let n in l){const d=l[n];for(let r in d)M(d[r].object),delete d[r];delete l[n]}delete X[P.id]}function m(P){for(let l in X){const n=X[l];if(n[P.id]===void 0)continue;const d=n[P.id];for(let r in d)M(d[r].object),delete d[r];delete n[P.id]}}function e(){if(W0(),U=!0,G===K)return;G=K,D(G.object)}function W0(){K.geometry=null,K.program=null,K.wireframe=!1}return{setup:V,reset:e,resetDefaultState:W0,dispose:N,releaseStatesOfGeometry:C,releaseStatesOfProgram:m,initAttributes:z,enableAttribute:A,disableUnusedAttributes:w}},iZ=function(J,$,Z,Q){const W=Q.isWebGL2;let Y;function H(G){Y=G}function X(G,U){J.drawArrays(Y,G,U),Z.update(U,Y,1)}function K(G,U,V){if(V===0)return;let R,D;if(W)R=J,D="drawArraysInstanced";else if(R=$.get("ANGLE_instanced_arrays"),D="drawArraysInstancedANGLE",R===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}R[D](Y,G,U,V),Z.update(U,Y,V)}this.setMode=H,this.render=X,this.renderInstances=K},rZ=function(J,$,Z){let Q;function W(){if(Q!==void 0)return Q;if($.has("EXT_texture_filter_anisotropic")===!0){const g=$.get("EXT_texture_filter_anisotropic");Q=J.getParameter(g.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else Q=0;return Q}function Y(g){if(g==="highp"){if(J.getShaderPrecisionFormat(J.VERTEX_SHADER,J.HIGH_FLOAT).precision>0&&J.getShaderPrecisionFormat(J.FRAGMENT_SHADER,J.HIGH_FLOAT).precision>0)return"highp";g="mediump"}if(g==="mediump"){if(J.getShaderPrecisionFormat(J.VERTEX_SHADER,J.MEDIUM_FLOAT).precision>0&&J.getShaderPrecisionFormat(J.FRAGMENT_SHADER,J.MEDIUM_FLOAT).precision>0)return"mediump"}return"lowp"}const H=typeof WebGL2RenderingContext!=="undefined"&&J.constructor.name==="WebGL2RenderingContext";let X=Z.precision!==void 0?Z.precision:"highp";const K=Y(X);if(K!==X)console.warn("THREE.WebGLRenderer:",X,"not supported, using",K,"instead."),X=K;const G=H||$.has("WEBGL_draw_buffers"),U=Z.logarithmicDepthBuffer===!0,V=J.getParameter(J.MAX_TEXTURE_IMAGE_UNITS),R=J.getParameter(J.MAX_VERTEX_TEXTURE_IMAGE_UNITS),D=J.getParameter(J.MAX_TEXTURE_SIZE),M=J.getParameter(J.MAX_CUBE_MAP_TEXTURE_SIZE),O=J.getParameter(J.MAX_VERTEX_ATTRIBS),E=J.getParameter(J.MAX_VERTEX_UNIFORM_VECTORS),q=J.getParameter(J.MAX_VARYING_VECTORS),I=J.getParameter(J.MAX_FRAGMENT_UNIFORM_VECTORS),z=R>0,A=H||$.has("OES_texture_float"),L=z&&A,w=H?J.getParameter(J.MAX_SAMPLES):0;return{isWebGL2:H,drawBuffers:G,getMaxAnisotropy:W,getMaxPrecision:Y,precision:X,logarithmicDepthBuffer:U,maxTextures:V,maxVertexTextures:R,maxTextureSize:D,maxCubemapSize:M,maxAttributes:O,maxVertexUniforms:E,maxVaryings:q,maxFragmentUniforms:I,vertexTextures:z,floatFragmentTextures:A,floatVertexTextures:L,maxSamples:w}},aZ=function(J){const $=this;let Z=null,Q=0,W=!1,Y=!1;const H=new dJ,X=new A0,K={value:null,needsUpdate:!1};this.uniform=K,this.numPlanes=0,this.numIntersection=0,this.init=function(V,R){const D=V.length!==0||R||Q!==0||W;return W=R,Q=V.length,D},this.beginShadows=function(){Y=!0,U(null)},this.endShadows=function(){Y=!1},this.setGlobalState=function(V,R){Z=U(V,R,0)},this.setState=function(V,R,D){const{clippingPlanes:M,clipIntersection:O,clipShadows:E}=V,q=J.get(V);if(!W||M===null||M.length===0||Y&&!E)if(Y)U(null);else G();else{const I=Y?0:Q,z=I*4;let A=q.clippingState||null;K.value=A,A=U(M,R,z,D);for(let L=0;L!==z;++L)A[L]=Z[L];q.clippingState=A,this.numIntersection=O?this.numPlanes:0,this.numPlanes+=I}};function G(){if(K.value!==Z)K.value=Z,K.needsUpdate=Q>0;$.numPlanes=Q,$.numIntersection=0}function U(V,R,D,M){const O=V!==null?V.length:0;let E=null;if(O!==0){if(E=K.value,M!==!0||E===null){const q=D+O*4,I=R.matrixWorldInverse;if(X.getNormalMatrix(I),E===null||E.length<q)E=new Float32Array(q);for(let z=0,A=D;z!==O;++z,A+=4)H.copy(V[z]).applyMatrix4(I,X),H.normal.toArray(E,A),E[A+3]=H.constant}K.value=E,K.needsUpdate=!0}return $.numPlanes=O,$.numIntersection=0,E}},tZ=function(J){let $=new WeakMap;function Z(H,X){if(X===303)H.mapping=301;else if(X===304)H.mapping=302;return H}function Q(H){if(H&&H.isTexture&&H.isRenderTargetTexture===!1){const X=H.mapping;if(X===303||X===304)if($.has(H)){const K=$.get(H).texture;return Z(K,H.mapping)}else{const K=H.image;if(K&&K.height>0){const G=new R9(K.height/2);return G.fromEquirectangularTexture(J,H),$.set(H,G),H.addEventListener("dispose",W),Z(G.texture,H.mapping)}else return null}}return H}function W(H){const X=H.target;X.removeEventListener("dispose",W);const K=$.get(X);if(K!==void 0)$.delete(X),K.dispose()}function Y(){$=new WeakMap}return{get:Q,dispose:Y}},eZ=function(J){const $=[],Z=[],Q=[];let W=J;const Y=J-_6+1+h8.length;for(let H=0;H<Y;H++){const X=Math.pow(2,W);Z.push(X);let K=1/X;if(H>J-_6)K=h8[H-J+_6-1];else if(H===0)K=0;Q.push(K);const G=1/(X-2),U=-G,V=1+G,R=[U,U,V,U,V,V,U,U,V,V,U,V],D=6,M=6,O=3,E=2,q=1,I=new Float32Array(O*M*D),z=new Float32Array(E*M*D),A=new Float32Array(q*M*D);for(let w=0;w<D;w++){const g=w%3*2/3-1,u=w>2?0:-1,N=[g,u,0,g+0.6666666666666666,u,0,g+0.6666666666666666,u+1,0,g,u,0,g+0.6666666666666666,u+1,0,g,u+1,0];I.set(N,O*M*w),z.set(R,E*M*w);const C=[w,w,w,w,w,w];A.set(C,q*M*w)}const L=new PJ;if(L.setAttribute("position",new CJ(I,O)),L.setAttribute("uv",new CJ(z,E)),L.setAttribute("faceIndex",new CJ(A,q)),$.push(L),W>_6)W--}return{lodPlanes:$,sizeLods:Z,sigmas:Q}},m8=function(J,$,Z){const Q=new nJ(J,$,Z);return Q.texture.mapping=306,Q.texture.name="PMREM.cubeUv",Q.scissorTest=!0,Q},V7=function(J,$,Z,Q,W){J.viewport.set($,Z,Q,W),J.scissor.set($,Z,Q,W)},JQ=function(J,$,Z){const Q=new Float32Array($6),W=new v(0,1,0);return new sJ({name:"SphericalGaussianBlur",defines:{n:$6,CUBEUV_TEXEL_WIDTH:1/$,CUBEUV_TEXEL_HEIGHT:1/Z,CUBEUV_MAX_MIP:`${J}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:Q},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:W}},vertexShader:U8(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:0,depthTest:!1,depthWrite:!1})},l8=function(){return new sJ({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:U8(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:0,depthTest:!1,depthWrite:!1})},u8=function(){return new sJ({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:U8(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:0,depthTest:!1,depthWrite:!1})},U8=function(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`},$Q=function(J){let $=new WeakMap,Z=null;function Q(X){if(X&&X.isTexture){const K=X.mapping,G=K===303||K===304,U=K===301||K===302;if(G||U)if(X.isRenderTargetTexture&&X.needsPMREMUpdate===!0){X.needsPMREMUpdate=!1;let V=$.get(X);if(Z===null)Z=new r7(J);return V=G?Z.fromEquirectangular(X,V):Z.fromCubemap(X,V),$.set(X,V),V.texture}else if($.has(X))return $.get(X).texture;else{const V=X.image;if(G&&V&&V.height>0||U&&V&&W(V)){if(Z===null)Z=new r7(J);const R=G?Z.fromEquirectangular(X):Z.fromCubemap(X);return $.set(X,R),X.addEventListener("dispose",Y),R.texture}else return null}}return X}function W(X){let K=0;const G=6;for(let U=0;U<G;U++)if(X[U]!==void 0)K++;return K===G}function Y(X){const K=X.target;K.removeEventListener("dispose",Y);const G=$.get(K);if(G!==void 0)$.delete(K),G.dispose()}function H(){if($=new WeakMap,Z!==null)Z.dispose(),Z=null}return{get:Q,dispose:H}},ZQ=function(J){const $={};function Z(Q){if($[Q]!==void 0)return $[Q];let W;switch(Q){case"WEBGL_depth_texture":W=J.getExtension("WEBGL_depth_texture")||J.getExtension("MOZ_WEBGL_depth_texture")||J.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":W=J.getExtension("EXT_texture_filter_anisotropic")||J.getExtension("MOZ_EXT_texture_filter_anisotropic")||J.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":W=J.getExtension("WEBGL_compressed_texture_s3tc")||J.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||J.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":W=J.getExtension("WEBGL_compressed_texture_pvrtc")||J.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:W=J.getExtension(Q)}return $[Q]=W,W}return{has:function(Q){return Z(Q)!==null},init:function(Q){if(Q.isWebGL2)Z("EXT_color_buffer_float");else Z("WEBGL_depth_texture"),Z("OES_texture_float"),Z("OES_texture_half_float"),Z("OES_texture_half_float_linear"),Z("OES_standard_derivatives"),Z("OES_element_index_uint"),Z("OES_vertex_array_object"),Z("ANGLE_instanced_arrays");Z("OES_texture_float_linear"),Z("EXT_color_buffer_half_float"),Z("WEBGL_multisampled_render_to_texture")},get:function(Q){const W=Z(Q);if(W===null)console.warn("THREE.WebGLRenderer: "+Q+" extension not supported.");return W}}},QQ=function(J,$,Z,Q){const W={},Y=new WeakMap;function H(V){const R=V.target;if(R.index!==null)$.remove(R.index);for(let M in R.attributes)$.remove(R.attributes[M]);for(let M in R.morphAttributes){const O=R.morphAttributes[M];for(let E=0,q=O.length;E<q;E++)$.remove(O[E])}R.removeEventListener("dispose",H),delete W[R.id];const D=Y.get(R);if(D)$.remove(D),Y.delete(R);if(Q.releaseStatesOfGeometry(R),R.isInstancedBufferGeometry===!0)delete R._maxInstanceCount;Z.memory.geometries--}function X(V,R){if(W[R.id]===!0)return R;return R.addEventListener("dispose",H),W[R.id]=!0,Z.memory.geometries++,R}function K(V){const R=V.attributes;for(let M in R)$.update(R[M],J.ARRAY_BUFFER);const D=V.morphAttributes;for(let M in D){const O=D[M];for(let E=0,q=O.length;E<q;E++)$.update(O[E],J.ARRAY_BUFFER)}}function G(V){const R=[],D=V.index,M=V.attributes.position;let O=0;if(D!==null){const I=D.array;O=D.version;for(let z=0,A=I.length;z<A;z+=3){const L=I[z+0],w=I[z+1],g=I[z+2];R.push(L,w,w,g,g,L)}}else if(M!==void 0){const I=M.array;O=M.version;for(let z=0,A=I.length/3-1;z<A;z+=3){const L=z+0,w=z+1,g=z+2;R.push(L,w,w,g,g,L)}}else return;const E=new((H9(R))?X8:Y8)(R,1);E.version=O;const q=Y.get(V);if(q)$.remove(q);Y.set(V,E)}function U(V){const R=Y.get(V);if(R){const D=V.index;if(D!==null){if(R.version<D.version)G(V)}}else G(V);return Y.get(V)}return{get:X,update:K,getWireframeAttribute:U}},WQ=function(J,$,Z,Q){const W=Q.isWebGL2;let Y;function H(R){Y=R}let X,K;function G(R){X=R.type,K=R.bytesPerElement}function U(R,D){J.drawElements(Y,D,X,R*K),Z.update(D,Y,1)}function V(R,D,M){if(M===0)return;let O,E;if(W)O=J,E="drawElementsInstanced";else if(O=$.get("ANGLE_instanced_arrays"),E="drawElementsInstancedANGLE",O===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}O[E](Y,D,X,R*K,M),Z.update(D,Y,M)}this.setMode=H,this.setIndex=G,this.render=U,this.renderInstances=V},YQ=function(J){const $={geometries:0,textures:0},Z={frame:0,calls:0,triangles:0,points:0,lines:0};function Q(Y,H,X){switch(Z.calls++,H){case J.TRIANGLES:Z.triangles+=X*(Y/3);break;case J.LINES:Z.lines+=X*(Y/2);break;case J.LINE_STRIP:Z.lines+=X*(Y-1);break;case J.LINE_LOOP:Z.lines+=X*Y;break;case J.POINTS:Z.points+=X*Y;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",H);break}}function W(){Z.calls=0,Z.triangles=0,Z.points=0,Z.lines=0}return{memory:$,render:Z,programs:null,autoReset:!0,reset:W,update:Q}},XQ=function(J,$){return J[0]-$[0]},HQ=function(J,$){return Math.abs($[1])-Math.abs(J[1])},KQ=function(J,$,Z){const Q={},W=new Float32Array(8),Y=new WeakMap,H=new QJ,X=[];for(let G=0;G<8;G++)X[G]=[G,0];function K(G,U,V){const R=G.morphTargetInfluences;if($.isWebGL2===!0){const D=U.morphAttributes.position||U.morphAttributes.normal||U.morphAttributes.color,M=D!==void 0?D.length:0;let O=Y.get(U);if(O===void 0||O.count!==M){let P=function(){e.dispose(),Y.delete(U),U.removeEventListener("dispose",P)};if(O!==void 0)O.texture.dispose();const I=U.morphAttributes.position!==void 0,z=U.morphAttributes.normal!==void 0,A=U.morphAttributes.color!==void 0,L=U.morphAttributes.position||[],w=U.morphAttributes.normal||[],g=U.morphAttributes.color||[];let u=0;if(I===!0)u=1;if(z===!0)u=2;if(A===!0)u=3;let N=U.attributes.position.count*u,C=1;if(N>$.maxTextureSize)C=Math.ceil(N/$.maxTextureSize),N=$.maxTextureSize;const m=new Float32Array(N*C*4*M),e=new $8(m,N,C,M);e.type=1015,e.needsUpdate=!0;const W0=u*4;for(let l=0;l<M;l++){const n=L[l],d=w[l],r=g[l],p=N*C*4*l;for(let T=0;T<n.count;T++){const h=T*W0;if(I===!0)H.fromBufferAttribute(n,T),m[p+h+0]=H.x,m[p+h+1]=H.y,m[p+h+2]=H.z,m[p+h+3]=0;if(z===!0)H.fromBufferAttribute(d,T),m[p+h+4]=H.x,m[p+h+5]=H.y,m[p+h+6]=H.z,m[p+h+7]=0;if(A===!0)H.fromBufferAttribute(r,T),m[p+h+8]=H.x,m[p+h+9]=H.y,m[p+h+10]=H.z,m[p+h+11]=r.itemSize===4?H.w:1}}O={count:M,texture:e,size:new m0(N,C)},Y.set(U,O),U.addEventListener("dispose",P)}let E=0;for(let I=0;I<R.length;I++)E+=R[I];const q=U.morphTargetsRelative?1:1-E;V.getUniforms().setValue(J,"morphTargetBaseInfluence",q),V.getUniforms().setValue(J,"morphTargetInfluences",R),V.getUniforms().setValue(J,"morphTargetsTexture",O.texture,Z),V.getUniforms().setValue(J,"morphTargetsTextureSize",O.size)}else{const D=R===void 0?0:R.length;let M=Q[U.id];if(M===void 0||M.length!==D){M=[];for(let z=0;z<D;z++)M[z]=[z,0];Q[U.id]=M}for(let z=0;z<D;z++){const A=M[z];A[0]=z,A[1]=R[z]}M.sort(HQ);for(let z=0;z<8;z++)if(z<D&&M[z][1])X[z][0]=M[z][0],X[z][1]=M[z][1];else X[z][0]=Number.MAX_SAFE_INTEGER,X[z][1]=0;X.sort(XQ);const O=U.morphAttributes.position,E=U.morphAttributes.normal;let q=0;for(let z=0;z<8;z++){const A=X[z],L=A[0],w=A[1];if(L!==Number.MAX_SAFE_INTEGER&&w){if(O&&U.getAttribute("morphTarget"+z)!==O[L])U.setAttribute("morphTarget"+z,O[L]);if(E&&U.getAttribute("morphNormal"+z)!==E[L])U.setAttribute("morphNormal"+z,E[L]);W[z]=w,q+=w}else{if(O&&U.hasAttribute("morphTarget"+z)===!0)U.deleteAttribute("morphTarget"+z);if(E&&U.hasAttribute("morphNormal"+z)===!0)U.deleteAttribute("morphNormal"+z);W[z]=0}}const I=U.morphTargetsRelative?1:1-q;V.getUniforms().setValue(J,"morphTargetBaseInfluence",I),V.getUniforms().setValue(J,"morphTargetInfluences",W)}}return{update:K}},GQ=function(J,$,Z,Q){let W=new WeakMap;function Y(K){const G=Q.render.frame,U=K.geometry,V=$.get(K,U);if(W.get(V)!==G)$.update(V),W.set(V,G);if(K.isInstancedMesh){if(K.hasEventListener("dispose",X)===!1)K.addEventListener("dispose",X);if(W.get(K)!==G){if(Z.update(K.instanceMatrix,J.ARRAY_BUFFER),K.instanceColor!==null)Z.update(K.instanceColor,J.ARRAY_BUFFER);W.set(K,G)}}if(K.isSkinnedMesh){const R=K.skeleton;if(W.get(R)!==G)R.update(),W.set(R,G)}return V}function H(){W=new WeakMap}function X(K){const G=K.target;if(G.removeEventListener("dispose",X),Z.remove(G.instanceMatrix),G.instanceColor!==null)Z.remove(G.instanceColor)}return{update:Y,dispose:H}},k6=function(J,$,Z){const Q=J[0];if(Q<=0||Q>0)return J;const W=$*Z;let Y=d8[W];if(Y===void 0)Y=new Float32Array(W),d8[W]=Y;if($!==0){Q.toArray(Y,0);for(let H=1,X=0;H!==$;++H)X+=Z,J[H].toArray(Y,X)}return Y},e0=function(J,$){if(J.length!==$.length)return!1;for(let Z=0,Q=J.length;Z<Q;Z++)if(J[Z]!==$[Z])return!1;return!0},JJ=function(J,$){for(let Z=0,Q=$.length;Z<Q;Z++)J[Z]=$[Z]},N7=function(J,$){let Z=c8[$];if(Z===void 0)Z=new Int32Array($),c8[$]=Z;for(let Q=0;Q!==$;++Q)Z[Q]=J.allocateTextureUnit();return Z},VQ=function(J,$){const Z=this.cache;if(Z[0]===$)return;J.uniform1f(this.addr,$),Z[0]=$},UQ=function(J,$){const Z=this.cache;if($.x!==void 0){if(Z[0]!==$.x||Z[1]!==$.y)J.uniform2f(this.addr,$.x,$.y),Z[0]=$.x,Z[1]=$.y}else{if(e0(Z,$))return;J.uniform2fv(this.addr,$),JJ(Z,$)}},qQ=function(J,$){const Z=this.cache;if($.x!==void 0){if(Z[0]!==$.x||Z[1]!==$.y||Z[2]!==$.z)J.uniform3f(this.addr,$.x,$.y,$.z),Z[0]=$.x,Z[1]=$.y,Z[2]=$.z}else if($.r!==void 0){if(Z[0]!==$.r||Z[1]!==$.g||Z[2]!==$.b)J.uniform3f(this.addr,$.r,$.g,$.b),Z[0]=$.r,Z[1]=$.g,Z[2]=$.b}else{if(e0(Z,$))return;J.uniform3fv(this.addr,$),JJ(Z,$)}},RQ=function(J,$){const Z=this.cache;if($.x!==void 0){if(Z[0]!==$.x||Z[1]!==$.y||Z[2]!==$.z||Z[3]!==$.w)J.uniform4f(this.addr,$.x,$.y,$.z,$.w),Z[0]=$.x,Z[1]=$.y,Z[2]=$.z,Z[3]=$.w}else{if(e0(Z,$))return;J.uniform4fv(this.addr,$),JJ(Z,$)}},EQ=function(J,$){const Z=this.cache,Q=$.elements;if(Q===void 0){if(e0(Z,$))return;J.uniformMatrix2fv(this.addr,!1,$),JJ(Z,$)}else{if(e0(Z,Q))return;o8.set(Q),J.uniformMatrix2fv(this.addr,!1,o8),JJ(Z,Q)}},DQ=function(J,$){const Z=this.cache,Q=$.elements;if(Q===void 0){if(e0(Z,$))return;J.uniformMatrix3fv(this.addr,!1,$),JJ(Z,$)}else{if(e0(Z,Q))return;s8.set(Q),J.uniformMatrix3fv(this.addr,!1,s8),JJ(Z,Q)}},FQ=function(J,$){const Z=this.cache,Q=$.elements;if(Q===void 0){if(e0(Z,$))return;J.uniformMatrix4fv(this.addr,!1,$),JJ(Z,$)}else{if(e0(Z,Q))return;n8.set(Q),J.uniformMatrix4fv(this.addr,!1,n8),JJ(Z,Q)}},NQ=function(J,$){const Z=this.cache;if(Z[0]===$)return;J.uniform1i(this.addr,$),Z[0]=$},OQ=function(J,$){const Z=this.cache;if($.x!==void 0){if(Z[0]!==$.x||Z[1]!==$.y)J.uniform2i(this.addr,$.x,$.y),Z[0]=$.x,Z[1]=$.y}else{if(e0(Z,$))return;J.uniform2iv(this.addr,$),JJ(Z,$)}},MQ=function(J,$){const Z=this.cache;if($.x!==void 0){if(Z[0]!==$.x||Z[1]!==$.y||Z[2]!==$.z)J.uniform3i(this.addr,$.x,$.y,$.z),Z[0]=$.x,Z[1]=$.y,Z[2]=$.z}else{if(e0(Z,$))return;J.uniform3iv(this.addr,$),JJ(Z,$)}},_Q=function(J,$){const Z=this.cache;if($.x!==void 0){if(Z[0]!==$.x||Z[1]!==$.y||Z[2]!==$.z||Z[3]!==$.w)J.uniform4i(this.addr,$.x,$.y,$.z,$.w),Z[0]=$.x,Z[1]=$.y,Z[2]=$.z,Z[3]=$.w}else{if(e0(Z,$))return;J.uniform4iv(this.addr,$),JJ(Z,$)}},zQ=function(J,$){const Z=this.cache;if(Z[0]===$)return;J.uniform1ui(this.addr,$),Z[0]=$},BQ=function(J,$){const Z=this.cache;if($.x!==void 0){if(Z[0]!==$.x||Z[1]!==$.y)J.uniform2ui(this.addr,$.x,$.y),Z[0]=$.x,Z[1]=$.y}else{if(e0(Z,$))return;J.uniform2uiv(this.addr,$),JJ(Z,$)}},IQ=function(J,$){const Z=this.cache;if($.x!==void 0){if(Z[0]!==$.x||Z[1]!==$.y||Z[2]!==$.z)J.uniform3ui(this.addr,$.x,$.y,$.z),Z[0]=$.x,Z[1]=$.y,Z[2]=$.z}else{if(e0(Z,$))return;J.uniform3uiv(this.addr,$),JJ(Z,$)}},wQ=function(J,$){const Z=this.cache;if($.x!==void 0){if(Z[0]!==$.x||Z[1]!==$.y||Z[2]!==$.z||Z[3]!==$.w)J.uniform4ui(this.addr,$.x,$.y,$.z,$.w),Z[0]=$.x,Z[1]=$.y,Z[2]=$.z,Z[3]=$.w}else{if(e0(Z,$))return;J.uniform4uiv(this.addr,$),JJ(Z,$)}},kQ=function(J,$,Z){const Q=this.cache,W=Z.allocateTextureUnit();if(Q[0]!==W)J.uniform1i(this.addr,W),Q[0]=W;Z.setTexture2D($||F9,W)},CQ=function(J,$,Z){const Q=this.cache,W=Z.allocateTextureUnit();if(Q[0]!==W)J.uniform1i(this.addr,W),Q[0]=W;Z.setTexture3D($||O9,W)},LQ=function(J,$,Z){const Q=this.cache,W=Z.allocateTextureUnit();if(Q[0]!==W)J.uniform1i(this.addr,W),Q[0]=W;Z.setTextureCube($||M9,W)},AQ=function(J,$,Z){const Q=this.cache,W=Z.allocateTextureUnit();if(Q[0]!==W)J.uniform1i(this.addr,W),Q[0]=W;Z.setTexture2DArray($||N9,W)},PQ=function(J){switch(J){case 5126:return VQ;case 35664:return UQ;case 35665:return qQ;case 35666:return RQ;case 35674:return EQ;case 35675:return DQ;case 35676:return FQ;case 5124:case 35670:return NQ;case 35667:case 35671:return OQ;case 35668:case 35672:return MQ;case 35669:case 35673:return _Q;case 5125:return zQ;case 36294:return BQ;case 36295:return IQ;case 36296:return wQ;case 35678:case 36198:case 36298:case 36306:case 35682:return kQ;case 35679:case 36299:case 36307:return CQ;case 35680:case 36300:case 36308:case 36293:return LQ;case 36289:case 36303:case 36311:case 36292:return AQ}},TQ=function(J,$){J.uniform1fv(this.addr,$)},SQ=function(J,$){const Z=k6($,this.size,2);J.uniform2fv(this.addr,Z)},yQ=function(J,$){const Z=k6($,this.size,3);J.uniform3fv(this.addr,Z)},fQ=function(J,$){const Z=k6($,this.size,4);J.uniform4fv(this.addr,Z)},vQ=function(J,$){const Z=k6($,this.size,4);J.uniformMatrix2fv(this.addr,!1,Z)},jQ=function(J,$){const Z=k6($,this.size,9);J.uniformMatrix3fv(this.addr,!1,Z)},bQ=function(J,$){const Z=k6($,this.size,16);J.uniformMatrix4fv(this.addr,!1,Z)},xQ=function(J,$){J.uniform1iv(this.addr,$)},hQ=function(J,$){J.uniform2iv(this.addr,$)},gQ=function(J,$){J.uniform3iv(this.addr,$)},pQ=function(J,$){J.uniform4iv(this.addr,$)},mQ=function(J,$){J.uniform1uiv(this.addr,$)},lQ=function(J,$){J.uniform2uiv(this.addr,$)},uQ=function(J,$){J.uniform3uiv(this.addr,$)},dQ=function(J,$){J.uniform4uiv(this.addr,$)},cQ=function(J,$,Z){const Q=this.cache,W=$.length,Y=N7(Z,W);if(!e0(Q,Y))J.uniform1iv(this.addr,Y),JJ(Q,Y);for(let H=0;H!==W;++H)Z.setTexture2D($[H]||F9,Y[H])},nQ=function(J,$,Z){const Q=this.cache,W=$.length,Y=N7(Z,W);if(!e0(Q,Y))J.uniform1iv(this.addr,Y),JJ(Q,Y);for(let H=0;H!==W;++H)Z.setTexture3D($[H]||O9,Y[H])},sQ=function(J,$,Z){const Q=this.cache,W=$.length,Y=N7(Z,W);if(!e0(Q,Y))J.uniform1iv(this.addr,Y),JJ(Q,Y);for(let H=0;H!==W;++H)Z.setTextureCube($[H]||M9,Y[H])},oQ=function(J,$,Z){const Q=this.cache,W=$.length,Y=N7(Z,W);if(!e0(Q,Y))J.uniform1iv(this.addr,Y),JJ(Q,Y);for(let H=0;H!==W;++H)Z.setTexture2DArray($[H]||N9,Y[H])},iQ=function(J){switch(J){case 5126:return TQ;case 35664:return SQ;case 35665:return yQ;case 35666:return fQ;case 35674:return vQ;case 35675:return jQ;case 35676:return bQ;case 5124:case 35670:return xQ;case 35667:case 35671:return hQ;case 35668:case 35672:return gQ;case 35669:case 35673:return pQ;case 5125:return mQ;case 36294:return lQ;case 36295:return uQ;case 36296:return dQ;case 35678:case 36198:case 36298:case 36306:case 35682:return cQ;case 35679:case 36299:case 36307:return nQ;case 35680:case 36300:case 36308:case 36293:return sQ;case 36289:case 36303:case 36311:case 36292:return oQ}},i8=function(J,$){J.seq.push($),J.map[$.id]=$},rQ=function(J,$,Z){const Q=J.name,W=Q.length;s7.lastIndex=0;while(!0){const Y=s7.exec(Q),H=s7.lastIndex;let X=Y[1];const K=Y[2]==="]",G=Y[3];if(K)X=X|0;if(G===void 0||G==="["&&H+2===W){i8(Z,G===void 0?new _9(X,J,$):new z9(X,J,$));break}else{let V=Z.map[X];if(V===void 0)V=new B9(X),i8(Z,V);Z=V}}},r8=function(J,$,Z){const Q=J.createShader($);return J.shaderSource(Q,Z),J.compileShader(Q),Q},tQ=function(J,$){const Z=J.split("\n"),Q=[],W=Math.max($-6,0),Y=Math.min($+6,Z.length);for(let H=W;H<Y;H++){const X=H+1;Q.push(`${X===$?">":" "} ${X}: ${Z[H]}`)}return Q.join("\n")},eQ=function(J){const $=h0.getPrimaries(h0.workingColorSpace),Z=h0.getPrimaries(J);let Q;if($===Z)Q="";else if($==="p3"&&Z==="rec709")Q="LinearDisplayP3ToLinearSRGB";else if($==="rec709"&&Z==="p3")Q="LinearSRGBToLinearDisplayP3";switch(J){case"srgb-linear":case"display-p3-linear":return[Q,"LinearTransferOETF"];case"srgb":case"display-p3":return[Q,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",J),[Q,"LinearTransferOETF"]}},a8=function(J,$,Z){const Q=J.getShaderParameter($,J.COMPILE_STATUS),W=J.getShaderInfoLog($).trim();if(Q&&W==="")return"";const Y=/ERROR: 0:(\d+)/.exec(W);if(Y){const H=parseInt(Y[1]);return Z.toUpperCase()+"\n\n"+W+"\n\n"+tQ(J.getShaderSource($),H)}else return W},JW=function(J,$){const Z=eQ($);return`vec4 ${J}( vec4 value ) { return ${Z[0]}( ${Z[1]}( value ) ); }`},$W=function(J,$){let Z;switch($){case 1:Z="Linear";break;case 2:Z="Reinhard";break;case 3:Z="OptimizedCineon";break;case 4:Z="ACESFilmic";break;case 5:Z="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",$),Z="Linear"}return"vec3 "+J+"( vec3 color ) { return "+Z+"ToneMapping( color ); }"},ZW=function(J){return[J.extensionDerivatives||!!J.envMapCubeUVHeight||J.bumpMap||J.normalMapTangentSpace||J.clearcoatNormalMap||J.flatShading||J.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(J.extensionFragDepth||J.logarithmicDepthBuffer)&&J.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",J.extensionDrawBuffers&&J.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(J.extensionShaderTextureLOD||J.envMap||J.transmission)&&J.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(v6).join("\n")},QW=function(J){const $=[];for(let Z in J){const Q=J[Z];if(Q===!1)continue;$.push("#define "+Z+" "+Q)}return $.join("\n")},WW=function(J,$){const Z={},Q=J.getProgramParameter($,J.ACTIVE_ATTRIBUTES);for(let W=0;W<Q;W++){const Y=J.getActiveAttrib($,W),H=Y.name;let X=1;if(Y.type===J.FLOAT_MAT2)X=2;if(Y.type===J.FLOAT_MAT3)X=3;if(Y.type===J.FLOAT_MAT4)X=4;Z[H]={type:Y.type,location:J.getAttribLocation($,H),locationSize:X}}return Z},v6=function(J){return J!==""},t8=function(J,$){const Z=$.numSpotLightShadows+$.numSpotLightMaps-$.numSpotLightShadowsWithMaps;return J.replace(/NUM_DIR_LIGHTS/g,$.numDirLights).replace(/NUM_SPOT_LIGHTS/g,$.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,$.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,Z).replace(/NUM_RECT_AREA_LIGHTS/g,$.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,$.numPointLights).replace(/NUM_HEMI_LIGHTS/g,$.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,$.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,$.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,$.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,$.numPointLightShadows)},e8=function(J,$){return J.replace(/NUM_CLIPPING_PLANES/g,$.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,$.numClippingPlanes-$.numClipIntersection)},a7=function(J){return J.replace(YW,HW)},HW=function(J,$){let Z=k0[$];if(Z===void 0){const Q=XW.get($);if(Q!==void 0)Z=k0[Q],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',$,Q);else throw new Error("Can not resolve #include <"+$+">")}return a7(Z)},J9=function(J){return J.replace(KW,GW)},GW=function(J,$,Z,Q){let W="";for(let Y=parseInt($);Y<parseInt(Z);Y++)W+=Q.replace(/\[\s*i\s*\]/g,"[ "+Y+" ]").replace(/UNROLLED_LOOP_INDEX/g,Y);return W},$9=function(J){let $="precision "+J.precision+" float;\nprecision "+J.precision+" int;";if(J.precision==="highp")$+="\n#define HIGH_PRECISION";else if(J.precision==="mediump")$+="\n#define MEDIUM_PRECISION";else if(J.precision==="lowp")$+="\n#define LOW_PRECISION";return $},VW=function(J){let $="SHADOWMAP_TYPE_BASIC";if(J.shadowMapType===1)$="SHADOWMAP_TYPE_PCF";else if(J.shadowMapType===2)$="SHADOWMAP_TYPE_PCF_SOFT";else if(J.shadowMapType===3)$="SHADOWMAP_TYPE_VSM";return $},UW=function(J){let $="ENVMAP_TYPE_CUBE";if(J.envMap)switch(J.envMapMode){case 301:case 302:$="ENVMAP_TYPE_CUBE";break;case 306:$="ENVMAP_TYPE_CUBE_UV";break}return $},qW=function(J){let $="ENVMAP_MODE_REFLECTION";if(J.envMap)switch(J.envMapMode){case 302:$="ENVMAP_MODE_REFRACTION";break}return $},RW=function(J){let $="ENVMAP_BLENDING_NONE";if(J.envMap)switch(J.combine){case 0:$="ENVMAP_BLENDING_MULTIPLY";break;case 1:$="ENVMAP_BLENDING_MIX";break;case 2:$="ENVMAP_BLENDING_ADD";break}return $},EW=function(J){const $=J.envMapCubeUVHeight;if($===null)return null;const Z=Math.log2($)-2,Q=1/$;return{texelWidth:1/(3*Math.max(Math.pow(2,Z),112)),texelHeight:Q,maxMip:Z}},DW=function(J,$,Z,Q){const W=J.getContext(),Y=Z.defines;let{vertexShader:H,fragmentShader:X}=Z;const K=VW(Z),G=UW(Z),U=qW(Z),V=RW(Z),R=EW(Z),D=Z.isWebGL2?"":ZW(Z),M=QW(Y),O=W.createProgram();let E,q,I=Z.glslVersion?"#version "+Z.glslVersion+"\n":"";if(Z.isRawShaderMaterial){if(E=["#define SHADER_TYPE "+Z.shaderType,"#define SHADER_NAME "+Z.shaderName,M].filter(v6).join("\n"),E.length>0)E+="\n";if(q=[D,"#define SHADER_TYPE "+Z.shaderType,"#define SHADER_NAME "+Z.shaderName,M].filter(v6).join("\n"),q.length>0)q+="\n"}else E=[$9(Z),"#define SHADER_TYPE "+Z.shaderType,"#define SHADER_NAME "+Z.shaderName,M,Z.instancing?"#define USE_INSTANCING":"",Z.instancingColor?"#define USE_INSTANCING_COLOR":"",Z.useFog&&Z.fog?"#define USE_FOG":"",Z.useFog&&Z.fogExp2?"#define FOG_EXP2":"",Z.map?"#define USE_MAP":"",Z.envMap?"#define USE_ENVMAP":"",Z.envMap?"#define "+U:"",Z.lightMap?"#define USE_LIGHTMAP":"",Z.aoMap?"#define USE_AOMAP":"",Z.bumpMap?"#define USE_BUMPMAP":"",Z.normalMap?"#define USE_NORMALMAP":"",Z.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",Z.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",Z.displacementMap?"#define USE_DISPLACEMENTMAP":"",Z.emissiveMap?"#define USE_EMISSIVEMAP":"",Z.anisotropy?"#define USE_ANISOTROPY":"",Z.anisotropyMap?"#define USE_ANISOTROPYMAP":"",Z.clearcoatMap?"#define USE_CLEARCOATMAP":"",Z.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",Z.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",Z.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",Z.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",Z.specularMap?"#define USE_SPECULARMAP":"",Z.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",Z.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",Z.roughnessMap?"#define USE_ROUGHNESSMAP":"",Z.metalnessMap?"#define USE_METALNESSMAP":"",Z.alphaMap?"#define USE_ALPHAMAP":"",Z.alphaHash?"#define USE_ALPHAHASH":"",Z.transmission?"#define USE_TRANSMISSION":"",Z.transmissionMap?"#define USE_TRANSMISSIONMAP":"",Z.thicknessMap?"#define USE_THICKNESSMAP":"",Z.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",Z.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",Z.mapUv?"#define MAP_UV "+Z.mapUv:"",Z.alphaMapUv?"#define ALPHAMAP_UV "+Z.alphaMapUv:"",Z.lightMapUv?"#define LIGHTMAP_UV "+Z.lightMapUv:"",Z.aoMapUv?"#define AOMAP_UV "+Z.aoMapUv:"",Z.emissiveMapUv?"#define EMISSIVEMAP_UV "+Z.emissiveMapUv:"",Z.bumpMapUv?"#define BUMPMAP_UV "+Z.bumpMapUv:"",Z.normalMapUv?"#define NORMALMAP_UV "+Z.normalMapUv:"",Z.displacementMapUv?"#define DISPLACEMENTMAP_UV "+Z.displacementMapUv:"",Z.metalnessMapUv?"#define METALNESSMAP_UV "+Z.metalnessMapUv:"",Z.roughnessMapUv?"#define ROUGHNESSMAP_UV "+Z.roughnessMapUv:"",Z.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+Z.anisotropyMapUv:"",Z.clearcoatMapUv?"#define CLEARCOATMAP_UV "+Z.clearcoatMapUv:"",Z.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+Z.clearcoatNormalMapUv:"",Z.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+Z.clearcoatRoughnessMapUv:"",Z.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+Z.iridescenceMapUv:"",Z.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+Z.iridescenceThicknessMapUv:"",Z.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+Z.sheenColorMapUv:"",Z.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+Z.sheenRoughnessMapUv:"",Z.specularMapUv?"#define SPECULARMAP_UV "+Z.specularMapUv:"",Z.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+Z.specularColorMapUv:"",Z.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+Z.specularIntensityMapUv:"",Z.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+Z.transmissionMapUv:"",Z.thicknessMapUv?"#define THICKNESSMAP_UV "+Z.thicknessMapUv:"",Z.vertexTangents&&Z.flatShading===!1?"#define USE_TANGENT":"",Z.vertexColors?"#define USE_COLOR":"",Z.vertexAlphas?"#define USE_COLOR_ALPHA":"",Z.vertexUv1s?"#define USE_UV1":"",Z.vertexUv2s?"#define USE_UV2":"",Z.vertexUv3s?"#define USE_UV3":"",Z.pointsUvs?"#define USE_POINTS_UV":"",Z.flatShading?"#define FLAT_SHADED":"",Z.skinning?"#define USE_SKINNING":"",Z.morphTargets?"#define USE_MORPHTARGETS":"",Z.morphNormals&&Z.flatShading===!1?"#define USE_MORPHNORMALS":"",Z.morphColors&&Z.isWebGL2?"#define USE_MORPHCOLORS":"",Z.morphTargetsCount>0&&Z.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",Z.morphTargetsCount>0&&Z.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+Z.morphTextureStride:"",Z.morphTargetsCount>0&&Z.isWebGL2?"#define MORPHTARGETS_COUNT "+Z.morphTargetsCount:"",Z.doubleSided?"#define DOUBLE_SIDED":"",Z.flipSided?"#define FLIP_SIDED":"",Z.shadowMapEnabled?"#define USE_SHADOWMAP":"",Z.shadowMapEnabled?"#define "+K:"",Z.sizeAttenuation?"#define USE_SIZEATTENUATION":"",Z.numLightProbes>0?"#define USE_LIGHT_PROBES":"",Z.useLegacyLights?"#define LEGACY_LIGHTS":"",Z.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",Z.logarithmicDepthBuffer&&Z.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(v6).join("\n"),q=[D,$9(Z),"#define SHADER_TYPE "+Z.shaderType,"#define SHADER_NAME "+Z.shaderName,M,Z.useFog&&Z.fog?"#define USE_FOG":"",Z.useFog&&Z.fogExp2?"#define FOG_EXP2":"",Z.map?"#define USE_MAP":"",Z.matcap?"#define USE_MATCAP":"",Z.envMap?"#define USE_ENVMAP":"",Z.envMap?"#define "+G:"",Z.envMap?"#define "+U:"",Z.envMap?"#define "+V:"",R?"#define CUBEUV_TEXEL_WIDTH "+R.texelWidth:"",R?"#define CUBEUV_TEXEL_HEIGHT "+R.texelHeight:"",R?"#define CUBEUV_MAX_MIP "+R.maxMip+".0":"",Z.lightMap?"#define USE_LIGHTMAP":"",Z.aoMap?"#define USE_AOMAP":"",Z.bumpMap?"#define USE_BUMPMAP":"",Z.normalMap?"#define USE_NORMALMAP":"",Z.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",Z.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",Z.emissiveMap?"#define USE_EMISSIVEMAP":"",Z.anisotropy?"#define USE_ANISOTROPY":"",Z.anisotropyMap?"#define USE_ANISOTROPYMAP":"",Z.clearcoat?"#define USE_CLEARCOAT":"",Z.clearcoatMap?"#define USE_CLEARCOATMAP":"",Z.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",Z.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",Z.iridescence?"#define USE_IRIDESCENCE":"",Z.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",Z.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",Z.specularMap?"#define USE_SPECULARMAP":"",Z.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",Z.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",Z.roughnessMap?"#define USE_ROUGHNESSMAP":"",Z.metalnessMap?"#define USE_METALNESSMAP":"",Z.alphaMap?"#define USE_ALPHAMAP":"",Z.alphaTest?"#define USE_ALPHATEST":"",Z.alphaHash?"#define USE_ALPHAHASH":"",Z.sheen?"#define USE_SHEEN":"",Z.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",Z.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",Z.transmission?"#define USE_TRANSMISSION":"",Z.transmissionMap?"#define USE_TRANSMISSIONMAP":"",Z.thicknessMap?"#define USE_THICKNESSMAP":"",Z.vertexTangents&&Z.flatShading===!1?"#define USE_TANGENT":"",Z.vertexColors||Z.instancingColor?"#define USE_COLOR":"",Z.vertexAlphas?"#define USE_COLOR_ALPHA":"",Z.vertexUv1s?"#define USE_UV1":"",Z.vertexUv2s?"#define USE_UV2":"",Z.vertexUv3s?"#define USE_UV3":"",Z.pointsUvs?"#define USE_POINTS_UV":"",Z.gradientMap?"#define USE_GRADIENTMAP":"",Z.flatShading?"#define FLAT_SHADED":"",Z.doubleSided?"#define DOUBLE_SIDED":"",Z.flipSided?"#define FLIP_SIDED":"",Z.shadowMapEnabled?"#define USE_SHADOWMAP":"",Z.shadowMapEnabled?"#define "+K:"",Z.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",Z.numLightProbes>0?"#define USE_LIGHT_PROBES":"",Z.useLegacyLights?"#define LEGACY_LIGHTS":"",Z.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",Z.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",Z.logarithmicDepthBuffer&&Z.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",Z.toneMapping!==0?"#define TONE_MAPPING":"",Z.toneMapping!==0?k0.tonemapping_pars_fragment:"",Z.toneMapping!==0?$W("toneMapping",Z.toneMapping):"",Z.dithering?"#define DITHERING":"",Z.opaque?"#define OPAQUE":"",k0.colorspace_pars_fragment,JW("linearToOutputTexel",Z.outputColorSpace),Z.useDepthPacking?"#define DEPTH_PACKING "+Z.depthPacking:"","\n"].filter(v6).join("\n");if(H=a7(H),H=t8(H,Z),H=e8(H,Z),X=a7(X),X=t8(X,Z),X=e8(X,Z),H=J9(H),X=J9(X),Z.isWebGL2&&Z.isRawShaderMaterial!==!0)I="#version 300 es\n",E=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+E,q=["#define varying in",Z.glslVersion==="300 es"?"":"layout(location = 0) out highp vec4 pc_fragColor;",Z.glslVersion==="300 es"?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+q;const z=I+E+H,A=I+q+X,L=r8(W,W.VERTEX_SHADER,z),w=r8(W,W.FRAGMENT_SHADER,A);if(W.attachShader(O,L),W.attachShader(O,w),Z.index0AttributeName!==void 0)W.bindAttribLocation(O,0,Z.index0AttributeName);else if(Z.morphTargets===!0)W.bindAttribLocation(O,0,"position");if(W.linkProgram(O),J.debug.checkShaderErrors){const N=W.getProgramInfoLog(O).trim(),C=W.getShaderInfoLog(L).trim(),m=W.getShaderInfoLog(w).trim();let e=!0,W0=!0;if(W.getProgramParameter(O,W.LINK_STATUS)===!1)if(e=!1,typeof J.debug.onShaderError==="function")J.debug.onShaderError(W,O,L,w);else{const P=a8(W,L,"vertex"),l=a8(W,w,"fragment");console.error("THREE.WebGLProgram: Shader Error "+W.getError()+" - VALIDATE_STATUS "+W.getProgramParameter(O,W.VALIDATE_STATUS)+"\n\nProgram Info Log: "+N+"\n"+P+"\n"+l)}else if(N!=="")console.warn("THREE.WebGLProgram: Program Info Log:",N);else if(C===""||m==="")W0=!1;if(W0)this.diagnostics={runnable:e,programLog:N,vertexShader:{log:C,prefix:E},fragmentShader:{log:m,prefix:q}}}W.deleteShader(L),W.deleteShader(w);let g;this.getUniforms=function(){if(g===void 0)g=new x6(W,O);return g};let u;return this.getAttributes=function(){if(u===void 0)u=WW(W,O);return u},this.destroy=function(){Q.releaseStatesOfProgram(this),W.deleteProgram(O),this.program=void 0},this.type=Z.shaderType,this.name=Z.shaderName,this.id=aQ++,this.cacheKey=$,this.usedTimes=1,this.program=O,this.vertexShader=L,this.fragmentShader=w,this},NW=function(J,$,Z,Q,W,Y,H){const X=new Q8,K=new I9,G=[],U=W.isWebGL2,V=W.logarithmicDepthBuffer,R=W.vertexTextures;let D=W.precision;const M={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function O(N){if(N===0)return"uv";return`uv${N}`}function E(N,C,m,e,W0){const P=e.fog,l=W0.geometry,n=N.isMeshStandardMaterial?e.environment:null,d=(N.isMeshStandardMaterial?Z:$).get(N.envMap||n),r=!!d&&d.mapping===306?d.image.height:null,p=M[N.type];if(N.precision!==null){if(D=W.getMaxPrecision(N.precision),D!==N.precision)console.warn("THREE.WebGLProgram.getParameters:",N.precision,"not supported, using",D,"instead.")}const T=l.morphAttributes.position||l.morphAttributes.normal||l.morphAttributes.color,h=T!==void 0?T.length:0;let a=0;if(l.morphAttributes.position!==void 0)a=1;if(l.morphAttributes.normal!==void 0)a=2;if(l.morphAttributes.color!==void 0)a=3;let G0,X0,U0,j0;if(p){const u0=AJ[p];G0=u0.vertexShader,X0=u0.fragmentShader}else G0=N.vertexShader,X0=N.fragmentShader,K.update(N),U0=K.getVertexShaderID(N),j0=K.getFragmentShaderID(N);const F0=J.getRenderTarget(),y0=W0.isInstancedMesh===!0,n0=!!N.map,KJ=!!N.matcap,S=!!d,i0=!!N.aoMap,f0=!!N.lightMap,D0=!!N.bumpMap,B0=!!N.normalMap,d0=!!N.displacementMap,T0=!!N.emissiveMap,v0=!!N.metalnessMap,s0=!!N.roughnessMap,p0=N.anisotropy>0,WJ=N.clearcoat>0,_J=N.iridescence>0,B=N.sheen>0,F=N.transmission>0,j=p0&&!!N.anisotropyMap,t=WJ&&!!N.clearcoatMap,o=WJ&&!!N.clearcoatNormalMap,i=WJ&&!!N.clearcoatRoughnessMap,R0=_J&&!!N.iridescenceMap,Z0=_J&&!!N.iridescenceThicknessMap,q0=B&&!!N.sheenColorMap,M0=B&&!!N.sheenRoughnessMap,b0=!!N.specularMap,s=!!N.specularColorMap,l0=!!N.specularIntensityMap,C0=F&&!!N.transmissionMap,I0=F&&!!N.thicknessMap,V0=!!N.gradientMap,k=!!N.alphaMap,$0=N.alphaTest>0,J0=!!N.alphaHash,H0=!!N.extensions,Y0=!!l.attributes.uv1,c=!!l.attributes.uv2,E0=!!l.attributes.uv3;let L0=0;if(N.toneMapped){if(F0===null||F0.isXRRenderTarget===!0)L0=J.toneMapping}return{isWebGL2:U,shaderID:p,shaderType:N.type,shaderName:N.name,vertexShader:G0,fragmentShader:X0,defines:N.defines,customVertexShaderID:U0,customFragmentShaderID:j0,isRawShaderMaterial:N.isRawShaderMaterial===!0,glslVersion:N.glslVersion,precision:D,instancing:y0,instancingColor:y0&&W0.instanceColor!==null,supportsVertexTextures:R,outputColorSpace:F0===null?J.outputColorSpace:F0.isXRRenderTarget===!0?F0.texture.colorSpace:"srgb-linear",map:n0,matcap:KJ,envMap:S,envMapMode:S&&d.mapping,envMapCubeUVHeight:r,aoMap:i0,lightMap:f0,bumpMap:D0,normalMap:B0,displacementMap:R&&d0,emissiveMap:T0,normalMapObjectSpace:B0&&N.normalMapType===1,normalMapTangentSpace:B0&&N.normalMapType===0,metalnessMap:v0,roughnessMap:s0,anisotropy:p0,anisotropyMap:j,clearcoat:WJ,clearcoatMap:t,clearcoatNormalMap:o,clearcoatRoughnessMap:i,iridescence:_J,iridescenceMap:R0,iridescenceThicknessMap:Z0,sheen:B,sheenColorMap:q0,sheenRoughnessMap:M0,specularMap:b0,specularColorMap:s,specularIntensityMap:l0,transmission:F,transmissionMap:C0,thicknessMap:I0,gradientMap:V0,opaque:N.transparent===!1&&N.blending===1,alphaMap:k,alphaTest:$0,alphaHash:J0,combine:N.combine,mapUv:n0&&O(N.map.channel),aoMapUv:i0&&O(N.aoMap.channel),lightMapUv:f0&&O(N.lightMap.channel),bumpMapUv:D0&&O(N.bumpMap.channel),normalMapUv:B0&&O(N.normalMap.channel),displacementMapUv:d0&&O(N.displacementMap.channel),emissiveMapUv:T0&&O(N.emissiveMap.channel),metalnessMapUv:v0&&O(N.metalnessMap.channel),roughnessMapUv:s0&&O(N.roughnessMap.channel),anisotropyMapUv:j&&O(N.anisotropyMap.channel),clearcoatMapUv:t&&O(N.clearcoatMap.channel),clearcoatNormalMapUv:o&&O(N.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:i&&O(N.clearcoatRoughnessMap.channel),iridescenceMapUv:R0&&O(N.iridescenceMap.channel),iridescenceThicknessMapUv:Z0&&O(N.iridescenceThicknessMap.channel),sheenColorMapUv:q0&&O(N.sheenColorMap.channel),sheenRoughnessMapUv:M0&&O(N.sheenRoughnessMap.channel),specularMapUv:b0&&O(N.specularMap.channel),specularColorMapUv:s&&O(N.specularColorMap.channel),specularIntensityMapUv:l0&&O(N.specularIntensityMap.channel),transmissionMapUv:C0&&O(N.transmissionMap.channel),thicknessMapUv:I0&&O(N.thicknessMap.channel),alphaMapUv:k&&O(N.alphaMap.channel),vertexTangents:!!l.attributes.tangent&&(B0||p0),vertexColors:N.vertexColors,vertexAlphas:N.vertexColors===!0&&!!l.attributes.color&&l.attributes.color.itemSize===4,vertexUv1s:Y0,vertexUv2s:c,vertexUv3s:E0,pointsUvs:W0.isPoints===!0&&!!l.attributes.uv&&(n0||k),fog:!!P,useFog:N.fog===!0,fogExp2:P&&P.isFogExp2,flatShading:N.flatShading===!0,sizeAttenuation:N.sizeAttenuation===!0,logarithmicDepthBuffer:V,skinning:W0.isSkinnedMesh===!0,morphTargets:l.morphAttributes.position!==void 0,morphNormals:l.morphAttributes.normal!==void 0,morphColors:l.morphAttributes.color!==void 0,morphTargetsCount:h,morphTextureStride:a,numDirLights:C.directional.length,numPointLights:C.point.length,numSpotLights:C.spot.length,numSpotLightMaps:C.spotLightMap.length,numRectAreaLights:C.rectArea.length,numHemiLights:C.hemi.length,numDirLightShadows:C.directionalShadowMap.length,numPointLightShadows:C.pointShadowMap.length,numSpotLightShadows:C.spotShadowMap.length,numSpotLightShadowsWithMaps:C.numSpotLightShadowsWithMaps,numLightProbes:C.numLightProbes,numClippingPlanes:H.numPlanes,numClipIntersection:H.numIntersection,dithering:N.dithering,shadowMapEnabled:J.shadowMap.enabled&&m.length>0,shadowMapType:J.shadowMap.type,toneMapping:L0,useLegacyLights:J._useLegacyLights,decodeVideoTexture:n0&&N.map.isVideoTexture===!0&&h0.getTransfer(N.map.colorSpace)==="srgb",premultipliedAlpha:N.premultipliedAlpha,doubleSided:N.side===2,flipSided:N.side===1,useDepthPacking:N.depthPacking>=0,depthPacking:N.depthPacking||0,index0AttributeName:N.index0AttributeName,extensionDerivatives:H0&&N.extensions.derivatives===!0,extensionFragDepth:H0&&N.extensions.fragDepth===!0,extensionDrawBuffers:H0&&N.extensions.drawBuffers===!0,extensionShaderTextureLOD:H0&&N.extensions.shaderTextureLOD===!0,rendererExtensionFragDepth:U||Q.has("EXT_frag_depth"),rendererExtensionDrawBuffers:U||Q.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:U||Q.has("EXT_shader_texture_lod"),customProgramCacheKey:N.customProgramCacheKey()}}function q(N){const C=[];if(N.shaderID)C.push(N.shaderID);else C.push(N.customVertexShaderID),C.push(N.customFragmentShaderID);if(N.defines!==void 0)for(let m in N.defines)C.push(m),C.push(N.defines[m]);if(N.isRawShaderMaterial===!1)I(C,N),z(C,N),C.push(J.outputColorSpace);return C.push(N.customProgramCacheKey),C.join()}function I(N,C){N.push(C.precision),N.push(C.outputColorSpace),N.push(C.envMapMode),N.push(C.envMapCubeUVHeight),N.push(C.mapUv),N.push(C.alphaMapUv),N.push(C.lightMapUv),N.push(C.aoMapUv),N.push(C.bumpMapUv),N.push(C.normalMapUv),N.push(C.displacementMapUv),N.push(C.emissiveMapUv),N.push(C.metalnessMapUv),N.push(C.roughnessMapUv),N.push(C.anisotropyMapUv),N.push(C.clearcoatMapUv),N.push(C.clearcoatNormalMapUv),N.push(C.clearcoatRoughnessMapUv),N.push(C.iridescenceMapUv),N.push(C.iridescenceThicknessMapUv),N.push(C.sheenColorMapUv),N.push(C.sheenRoughnessMapUv),N.push(C.specularMapUv),N.push(C.specularColorMapUv),N.push(C.specularIntensityMapUv),N.push(C.transmissionMapUv),N.push(C.thicknessMapUv),N.push(C.combine),N.push(C.fogExp2),N.push(C.sizeAttenuation),N.push(C.morphTargetsCount),N.push(C.morphAttributeCount),N.push(C.numDirLights),N.push(C.numPointLights),N.push(C.numSpotLights),N.push(C.numSpotLightMaps),N.push(C.numHemiLights),N.push(C.numRectAreaLights),N.push(C.numDirLightShadows),N.push(C.numPointLightShadows),N.push(C.numSpotLightShadows),N.push(C.numSpotLightShadowsWithMaps),N.push(C.numLightProbes),N.push(C.shadowMapType),N.push(C.toneMapping),N.push(C.numClippingPlanes),N.push(C.numClipIntersection),N.push(C.depthPacking)}function z(N,C){if(X.disableAll(),C.isWebGL2)X.enable(0);if(C.supportsVertexTextures)X.enable(1);if(C.instancing)X.enable(2);if(C.instancingColor)X.enable(3);if(C.matcap)X.enable(4);if(C.envMap)X.enable(5);if(C.normalMapObjectSpace)X.enable(6);if(C.normalMapTangentSpace)X.enable(7);if(C.clearcoat)X.enable(8);if(C.iridescence)X.enable(9);if(C.alphaTest)X.enable(10);if(C.vertexColors)X.enable(11);if(C.vertexAlphas)X.enable(12);if(C.vertexUv1s)X.enable(13);if(C.vertexUv2s)X.enable(14);if(C.vertexUv3s)X.enable(15);if(C.vertexTangents)X.enable(16);if(C.anisotropy)X.enable(17);if(N.push(X.mask),X.disableAll(),C.fog)X.enable(0);if(C.useFog)X.enable(1);if(C.flatShading)X.enable(2);if(C.logarithmicDepthBuffer)X.enable(3);if(C.skinning)X.enable(4);if(C.morphTargets)X.enable(5);if(C.morphNormals)X.enable(6);if(C.morphColors)X.enable(7);if(C.premultipliedAlpha)X.enable(8);if(C.shadowMapEnabled)X.enable(9);if(C.useLegacyLights)X.enable(10);if(C.doubleSided)X.enable(11);if(C.flipSided)X.enable(12);if(C.useDepthPacking)X.enable(13);if(C.dithering)X.enable(14);if(C.transmission)X.enable(15);if(C.sheen)X.enable(16);if(C.opaque)X.enable(17);if(C.pointsUvs)X.enable(18);if(C.decodeVideoTexture)X.enable(19);N.push(X.mask)}function A(N){const C=M[N.type];let m;if(C){const e=AJ[C];m=V$.clone(e.uniforms)}else m=N.uniforms;return m}function L(N,C){let m;for(let e=0,W0=G.length;e<W0;e++){const P=G[e];if(P.cacheKey===C){m=P,++m.usedTimes;break}}if(m===void 0)m=new DW(J,C,N,Y),G.push(m);return m}function w(N){if(--N.usedTimes===0){const C=G.indexOf(N);G[C]=G[G.length-1],G.pop(),N.destroy()}}function g(N){K.remove(N)}function u(){K.dispose()}return{getParameters:E,getProgramCacheKey:q,getUniforms:A,acquireProgram:L,releaseProgram:w,releaseShaderCache:g,programs:G,dispose:u}},OW=function(){let J=new WeakMap;function $(Y){let H=J.get(Y);if(H===void 0)H={},J.set(Y,H);return H}function Z(Y){J.delete(Y)}function Q(Y,H,X){J.get(Y)[H]=X}function W(){J=new WeakMap}return{get:$,remove:Z,update:Q,dispose:W}},MW=function(J,$){if(J.groupOrder!==$.groupOrder)return J.groupOrder-$.groupOrder;else if(J.renderOrder!==$.renderOrder)return J.renderOrder-$.renderOrder;else if(J.material.id!==$.material.id)return J.material.id-$.material.id;else if(J.z!==$.z)return J.z-$.z;else return J.id-$.id},Z9=function(J,$){if(J.groupOrder!==$.groupOrder)return J.groupOrder-$.groupOrder;else if(J.renderOrder!==$.renderOrder)return J.renderOrder-$.renderOrder;else if(J.z!==$.z)return $.z-J.z;else return J.id-$.id},Q9=function(){const J=[];let $=0;const Z=[],Q=[],W=[];function Y(){$=0,Z.length=0,Q.length=0,W.length=0}function H(V,R,D,M,O,E){let q=J[$];if(q===void 0)q={id:V.id,object:V,geometry:R,material:D,groupOrder:M,renderOrder:V.renderOrder,z:O,group:E},J[$]=q;else q.id=V.id,q.object=V,q.geometry=R,q.material=D,q.groupOrder=M,q.renderOrder=V.renderOrder,q.z=O,q.group=E;return $++,q}function X(V,R,D,M,O,E){const q=H(V,R,D,M,O,E);if(D.transmission>0)Q.push(q);else if(D.transparent===!0)W.push(q);else Z.push(q)}function K(V,R,D,M,O,E){const q=H(V,R,D,M,O,E);if(D.transmission>0)Q.unshift(q);else if(D.transparent===!0)W.unshift(q);else Z.unshift(q)}function G(V,R){if(Z.length>1)Z.sort(V||MW);if(Q.length>1)Q.sort(R||Z9);if(W.length>1)W.sort(R||Z9)}function U(){for(let V=$,R=J.length;V<R;V++){const D=J[V];if(D.id===null)break;D.id=null,D.object=null,D.geometry=null,D.material=null,D.group=null}}return{opaque:Z,transmissive:Q,transparent:W,init:Y,push:X,unshift:K,finish:U,sort:G}},_W=function(){let J=new WeakMap;function $(Q,W){const Y=J.get(Q);let H;if(Y===void 0)H=new Q9,J.set(Q,[H]);else if(W>=Y.length)H=new Q9,Y.push(H);else H=Y[W];return H}function Z(){J=new WeakMap}return{get:$,dispose:Z}},zW=function(){const J={};return{get:function($){if(J[$.id]!==void 0)return J[$.id];let Z;switch($.type){case"DirectionalLight":Z={direction:new v,color:new g0};break;case"SpotLight":Z={position:new v,direction:new v,color:new g0,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":Z={position:new v,color:new g0,distance:0,decay:0};break;case"HemisphereLight":Z={direction:new v,skyColor:new g0,groundColor:new g0};break;case"RectAreaLight":Z={color:new g0,position:new v,halfWidth:new v,halfHeight:new v};break}return J[$.id]=Z,Z}}},BW=function(){const J={};return{get:function($){if(J[$.id]!==void 0)return J[$.id];let Z;switch($.type){case"DirectionalLight":Z={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new m0};break;case"SpotLight":Z={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new m0};break;case"PointLight":Z={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new m0,shadowCameraNear:1,shadowCameraFar:1000};break}return J[$.id]=Z,Z}}},wW=function(J,$){return($.castShadow?2:0)-(J.castShadow?2:0)+($.map?1:0)-(J.map?1:0)},kW=function(J,$){const Z=new zW,Q=BW(),W={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let U=0;U<9;U++)W.probe.push(new v);const Y=new v,H=new ZJ,X=new ZJ;function K(U,V){let R=0,D=0,M=0;for(let e=0;e<9;e++)W.probe[e].set(0,0,0);let O=0,E=0,q=0,I=0,z=0,A=0,L=0,w=0,g=0,u=0,N=0;U.sort(wW);const C=V===!0?Math.PI:1;for(let e=0,W0=U.length;e<W0;e++){const P=U[e],l=P.color,n=P.intensity,d=P.distance,r=P.shadow&&P.shadow.map?P.shadow.map.texture:null;if(P.isAmbientLight)R+=l.r*n*C,D+=l.g*n*C,M+=l.b*n*C;else if(P.isLightProbe){for(let p=0;p<9;p++)W.probe[p].addScaledVector(P.sh.coefficients[p],n);N++}else if(P.isDirectionalLight){const p=Z.get(P);if(p.color.copy(P.color).multiplyScalar(P.intensity*C),P.castShadow){const T=P.shadow,h=Q.get(P);h.shadowBias=T.bias,h.shadowNormalBias=T.normalBias,h.shadowRadius=T.radius,h.shadowMapSize=T.mapSize,W.directionalShadow[O]=h,W.directionalShadowMap[O]=r,W.directionalShadowMatrix[O]=P.shadow.matrix,A++}W.directional[O]=p,O++}else if(P.isSpotLight){const p=Z.get(P);p.position.setFromMatrixPosition(P.matrixWorld),p.color.copy(l).multiplyScalar(n*C),p.distance=d,p.coneCos=Math.cos(P.angle),p.penumbraCos=Math.cos(P.angle*(1-P.penumbra)),p.decay=P.decay,W.spot[q]=p;const T=P.shadow;if(P.map){if(W.spotLightMap[g]=P.map,g++,T.updateMatrices(P),P.castShadow)u++}if(W.spotLightMatrix[q]=T.matrix,P.castShadow){const h=Q.get(P);h.shadowBias=T.bias,h.shadowNormalBias=T.normalBias,h.shadowRadius=T.radius,h.shadowMapSize=T.mapSize,W.spotShadow[q]=h,W.spotShadowMap[q]=r,w++}q++}else if(P.isRectAreaLight){const p=Z.get(P);p.color.copy(l).multiplyScalar(n),p.halfWidth.set(P.width*0.5,0,0),p.halfHeight.set(0,P.height*0.5,0),W.rectArea[I]=p,I++}else if(P.isPointLight){const p=Z.get(P);if(p.color.copy(P.color).multiplyScalar(P.intensity*C),p.distance=P.distance,p.decay=P.decay,P.castShadow){const T=P.shadow,h=Q.get(P);h.shadowBias=T.bias,h.shadowNormalBias=T.normalBias,h.shadowRadius=T.radius,h.shadowMapSize=T.mapSize,h.shadowCameraNear=T.camera.near,h.shadowCameraFar=T.camera.far,W.pointShadow[E]=h,W.pointShadowMap[E]=r,W.pointShadowMatrix[E]=P.shadow.matrix,L++}W.point[E]=p,E++}else if(P.isHemisphereLight){const p=Z.get(P);p.skyColor.copy(P.color).multiplyScalar(n*C),p.groundColor.copy(P.groundColor).multiplyScalar(n*C),W.hemi[z]=p,z++}}if(I>0)if($.isWebGL2)W.rectAreaLTC1=Q0.LTC_FLOAT_1,W.rectAreaLTC2=Q0.LTC_FLOAT_2;else if(J.has("OES_texture_float_linear")===!0)W.rectAreaLTC1=Q0.LTC_FLOAT_1,W.rectAreaLTC2=Q0.LTC_FLOAT_2;else if(J.has("OES_texture_half_float_linear")===!0)W.rectAreaLTC1=Q0.LTC_HALF_1,W.rectAreaLTC2=Q0.LTC_HALF_2;else console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");W.ambient[0]=R,W.ambient[1]=D,W.ambient[2]=M;const m=W.hash;if(m.directionalLength!==O||m.pointLength!==E||m.spotLength!==q||m.rectAreaLength!==I||m.hemiLength!==z||m.numDirectionalShadows!==A||m.numPointShadows!==L||m.numSpotShadows!==w||m.numSpotMaps!==g||m.numLightProbes!==N)W.directional.length=O,W.spot.length=q,W.rectArea.length=I,W.point.length=E,W.hemi.length=z,W.directionalShadow.length=A,W.directionalShadowMap.length=A,W.pointShadow.length=L,W.pointShadowMap.length=L,W.spotShadow.length=w,W.spotShadowMap.length=w,W.directionalShadowMatrix.length=A,W.pointShadowMatrix.length=L,W.spotLightMatrix.length=w+g-u,W.spotLightMap.length=g,W.numSpotLightShadowsWithMaps=u,W.numLightProbes=N,m.directionalLength=O,m.pointLength=E,m.spotLength=q,m.rectAreaLength=I,m.hemiLength=z,m.numDirectionalShadows=A,m.numPointShadows=L,m.numSpotShadows=w,m.numSpotMaps=g,m.numLightProbes=N,W.version=IW++}function G(U,V){let R=0,D=0,M=0,O=0,E=0;const q=V.matrixWorldInverse;for(let I=0,z=U.length;I<z;I++){const A=U[I];if(A.isDirectionalLight){const L=W.directional[R];L.direction.setFromMatrixPosition(A.matrixWorld),Y.setFromMatrixPosition(A.target.matrixWorld),L.direction.sub(Y),L.direction.transformDirection(q),R++}else if(A.isSpotLight){const L=W.spot[M];L.position.setFromMatrixPosition(A.matrixWorld),L.position.applyMatrix4(q),L.direction.setFromMatrixPosition(A.matrixWorld),Y.setFromMatrixPosition(A.target.matrixWorld),L.direction.sub(Y),L.direction.transformDirection(q),M++}else if(A.isRectAreaLight){const L=W.rectArea[O];L.position.setFromMatrixPosition(A.matrixWorld),L.position.applyMatrix4(q),X.identity(),H.copy(A.matrixWorld),H.premultiply(q),X.extractRotation(H),L.halfWidth.set(A.width*0.5,0,0),L.halfHeight.set(0,A.height*0.5,0),L.halfWidth.applyMatrix4(X),L.halfHeight.applyMatrix4(X),O++}else if(A.isPointLight){const L=W.point[D];L.position.setFromMatrixPosition(A.matrixWorld),L.position.applyMatrix4(q),D++}else if(A.isHemisphereLight){const L=W.hemi[E];L.direction.setFromMatrixPosition(A.matrixWorld),L.direction.transformDirection(q),E++}}}return{setup:K,setupView:G,state:W}},W9=function(J,$){const Z=new kW(J,$),Q=[],W=[];function Y(){Q.length=0,W.length=0}function H(V){Q.push(V)}function X(V){W.push(V)}function K(V){Z.setup(Q,V)}function G(V){Z.setupView(Q,V)}return{init:Y,state:{lightsArray:Q,shadowsArray:W,lights:Z},setupLights:K,setupLightsView:G,pushLight:H,pushShadow:X}},CW=function(J,$){let Z=new WeakMap;function Q(Y,H=0){const X=Z.get(Y);let K;if(X===void 0)K=new W9(J,$),Z.set(Y,[K]);else if(H>=X.length)K=new W9(J,$),X.push(K);else K=X[H];return K}function W(){Z=new WeakMap}return{get:Q,dispose:W}},PW=function(J,$,Z){let Q=new G8;const W=new m0,Y=new m0,H=new QJ,X=new k9({depthPacking:3201}),K=new C9,G={},U=Z.maxTextureSize,V={[0]:1,[1]:0,[2]:2},R=new sJ({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new m0},radius:{value:4}},vertexShader:LW,fragmentShader:AW}),D=R.clone();D.defines.HORIZONTAL_PASS=1;const M=new PJ;M.setAttribute("position",new CJ(new Float32Array([-1,-1,0.5,3,-1,0.5,-1,3,0.5]),3));const O=new hJ(M,R),E=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1;let q=this.type;this.render=function(L,w,g){if(E.enabled===!1)return;if(E.autoUpdate===!1&&E.needsUpdate===!1)return;if(L.length===0)return;const u=J.getRenderTarget(),N=J.getActiveCubeFace(),C=J.getActiveMipmapLevel(),m=J.state;m.setBlending(0),m.buffers.color.setClear(1,1,1,1),m.buffers.depth.setTest(!0),m.setScissorTest(!1);const e=q!==3&&this.type===3,W0=q===3&&this.type!==3;for(let P=0,l=L.length;P<l;P++){const n=L[P],d=n.shadow;if(d===void 0){console.warn("THREE.WebGLShadowMap:",n,"has no shadow.");continue}if(d.autoUpdate===!1&&d.needsUpdate===!1)continue;W.copy(d.mapSize);const r=d.getFrameExtents();if(W.multiply(r),Y.copy(d.mapSize),W.x>U||W.y>U){if(W.x>U)Y.x=Math.floor(U/r.x),W.x=Y.x*r.x,d.mapSize.x=Y.x;if(W.y>U)Y.y=Math.floor(U/r.y),W.y=Y.y*r.y,d.mapSize.y=Y.y}if(d.map===null||e===!0||W0===!0){const T=this.type!==3?{minFilter:1003,magFilter:1003}:{};if(d.map!==null)d.map.dispose();d.map=new nJ(W.x,W.y,T),d.map.texture.name=n.name+".shadowMap",d.camera.updateProjectionMatrix()}J.setRenderTarget(d.map),J.clear();const p=d.getViewportCount();for(let T=0;T<p;T++){const h=d.getViewport(T);H.set(Y.x*h.x,Y.y*h.y,Y.x*h.z,Y.y*h.w),m.viewport(H),d.updateMatrices(n,T),Q=d.getFrustum(),A(w,g,d.camera,n,this.type)}if(d.isPointLightShadow!==!0&&this.type===3)I(d,g);d.needsUpdate=!1}q=this.type,E.needsUpdate=!1,J.setRenderTarget(u,N,C)};function I(L,w){const g=$.update(O);if(R.defines.VSM_SAMPLES!==L.blurSamples)R.defines.VSM_SAMPLES=L.blurSamples,D.defines.VSM_SAMPLES=L.blurSamples,R.needsUpdate=!0,D.needsUpdate=!0;if(L.mapPass===null)L.mapPass=new nJ(W.x,W.y);R.uniforms.shadow_pass.value=L.map.texture,R.uniforms.resolution.value=L.mapSize,R.uniforms.radius.value=L.radius,J.setRenderTarget(L.mapPass),J.clear(),J.renderBufferDirect(w,null,g,R,O,null),D.uniforms.shadow_pass.value=L.mapPass.texture,D.uniforms.resolution.value=L.mapSize,D.uniforms.radius.value=L.radius,J.setRenderTarget(L.map),J.clear(),J.renderBufferDirect(w,null,g,D,O,null)}function z(L,w,g,u){let N=null;const C=g.isPointLight===!0?L.customDistanceMaterial:L.customDepthMaterial;if(C!==void 0)N=C;else if(N=g.isPointLight===!0?K:X,J.localClippingEnabled&&w.clipShadows===!0&&Array.isArray(w.clippingPlanes)&&w.clippingPlanes.length!==0||w.displacementMap&&w.displacementScale!==0||w.alphaMap&&w.alphaTest>0||w.map&&w.alphaTest>0){const m=N.uuid,e=w.uuid;let W0=G[m];if(W0===void 0)W0={},G[m]=W0;let P=W0[e];if(P===void 0)P=N.clone(),W0[e]=P;N=P}if(N.visible=w.visible,N.wireframe=w.wireframe,u===3)N.side=w.shadowSide!==null?w.shadowSide:w.side;else N.side=w.shadowSide!==null?w.shadowSide:V[w.side];if(N.alphaMap=w.alphaMap,N.alphaTest=w.alphaTest,N.map=w.map,N.clipShadows=w.clipShadows,N.clippingPlanes=w.clippingPlanes,N.clipIntersection=w.clipIntersection,N.displacementMap=w.displacementMap,N.displacementScale=w.displacementScale,N.displacementBias=w.displacementBias,N.wireframeLinewidth=w.wireframeLinewidth,N.linewidth=w.linewidth,g.isPointLight===!0&&N.isMeshDistanceMaterial===!0){const m=J.properties.get(N);m.light=g}return N}function A(L,w,g,u,N){if(L.visible===!1)return;if(L.layers.test(w.layers)&&(L.isMesh||L.isLine||L.isPoints)){if((L.castShadow||L.receiveShadow&&N===3)&&(!L.frustumCulled||Q.intersectsObject(L))){L.modelViewMatrix.multiplyMatrices(g.matrixWorldInverse,L.matrixWorld);const e=$.update(L),W0=L.material;if(Array.isArray(W0)){const P=e.groups;for(let l=0,n=P.length;l<n;l++){const d=P[l],r=W0[d.materialIndex];if(r&&r.visible){const p=z(L,r,u,N);J.renderBufferDirect(g,null,e,p,L,d)}}}else if(W0.visible){const P=z(L,W0,u,N);J.renderBufferDirect(g,null,e,P,L,null)}}}const m=L.children;for(let e=0,W0=m.length;e<W0;e++)A(m[e],w,g,u,N)}},TW=function(J,$,Z){const Q=Z.isWebGL2;function W(){let k=!1;const $0=new QJ;let J0=null;const H0=new QJ(0,0,0,0);return{setMask:function(Y0){if(J0!==Y0&&!k)J.colorMask(Y0,Y0,Y0,Y0),J0=Y0},setLocked:function(Y0){k=Y0},setClear:function(Y0,c,E0,L0,YJ){if(YJ===!0)Y0*=L0,c*=L0,E0*=L0;if($0.set(Y0,c,E0,L0),H0.equals($0)===!1)J.clearColor(Y0,c,E0,L0),H0.copy($0)},reset:function(){k=!1,J0=null,H0.set(-1,0,0,0)}}}function Y(){let k=!1,$0=null,J0=null,H0=null;return{setTest:function(Y0){if(Y0)F0(J.DEPTH_TEST);else y0(J.DEPTH_TEST)},setMask:function(Y0){if($0!==Y0&&!k)J.depthMask(Y0),$0=Y0},setFunc:function(Y0){if(J0!==Y0){switch(Y0){case 0:J.depthFunc(J.NEVER);break;case 1:J.depthFunc(J.ALWAYS);break;case 2:J.depthFunc(J.LESS);break;case 3:J.depthFunc(J.LEQUAL);break;case 4:J.depthFunc(J.EQUAL);break;case 5:J.depthFunc(J.GEQUAL);break;case 6:J.depthFunc(J.GREATER);break;case 7:J.depthFunc(J.NOTEQUAL);break;default:J.depthFunc(J.LEQUAL)}J0=Y0}},setLocked:function(Y0){k=Y0},setClear:function(Y0){if(H0!==Y0)J.clearDepth(Y0),H0=Y0},reset:function(){k=!1,$0=null,J0=null,H0=null}}}function H(){let k=!1,$0=null,J0=null,H0=null,Y0=null,c=null,E0=null,L0=null,YJ=null;return{setTest:function(u0){if(!k)if(u0)F0(J.STENCIL_TEST);else y0(J.STENCIL_TEST)},setMask:function(u0){if($0!==u0&&!k)J.stencilMask(u0),$0=u0},setFunc:function(u0,GJ,LJ){if(J0!==u0||H0!==GJ||Y0!==LJ)J.stencilFunc(u0,GJ,LJ),J0=u0,H0=GJ,Y0=LJ},setOp:function(u0,GJ,LJ){if(c!==u0||E0!==GJ||L0!==LJ)J.stencilOp(u0,GJ,LJ),c=u0,E0=GJ,L0=LJ},setLocked:function(u0){k=u0},setClear:function(u0){if(YJ!==u0)J.clearStencil(u0),YJ=u0},reset:function(){k=!1,$0=null,J0=null,H0=null,Y0=null,c=null,E0=null,L0=null,YJ=null}}}const X=new W,K=new Y,G=new H,U=new WeakMap,V=new WeakMap;let R={},D={},M=new WeakMap,O=[],E=null,q=!1,I=null,z=null,A=null,L=null,w=null,g=null,u=null,N=!1,C=null,m=null,e=null,W0=null,P=null;const l=J.getParameter(J.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let n=!1,d=0;const r=J.getParameter(J.VERSION);if(r.indexOf("WebGL")!==-1)d=parseFloat(/^WebGL (\d)/.exec(r)[1]),n=d>=1;else if(r.indexOf("OpenGL ES")!==-1)d=parseFloat(/^OpenGL ES (\d)/.exec(r)[1]),n=d>=2;let p=null,T={};const h=J.getParameter(J.SCISSOR_BOX),a=J.getParameter(J.VIEWPORT),G0=new QJ().fromArray(h),X0=new QJ().fromArray(a);function U0(k,$0,J0,H0){const Y0=new Uint8Array(4),c=J.createTexture();J.bindTexture(k,c),J.texParameteri(k,J.TEXTURE_MIN_FILTER,J.NEAREST),J.texParameteri(k,J.TEXTURE_MAG_FILTER,J.NEAREST);for(let E0=0;E0<J0;E0++)if(Q&&(k===J.TEXTURE_3D||k===J.TEXTURE_2D_ARRAY))J.texImage3D($0,0,J.RGBA,1,1,H0,0,J.RGBA,J.UNSIGNED_BYTE,Y0);else J.texImage2D($0+E0,0,J.RGBA,1,1,0,J.RGBA,J.UNSIGNED_BYTE,Y0);return c}const j0={};if(j0[J.TEXTURE_2D]=U0(J.TEXTURE_2D,J.TEXTURE_2D,1),j0[J.TEXTURE_CUBE_MAP]=U0(J.TEXTURE_CUBE_MAP,J.TEXTURE_CUBE_MAP_POSITIVE_X,6),Q)j0[J.TEXTURE_2D_ARRAY]=U0(J.TEXTURE_2D_ARRAY,J.TEXTURE_2D_ARRAY,1,1),j0[J.TEXTURE_3D]=U0(J.TEXTURE_3D,J.TEXTURE_3D,1,1);X.setClear(0,0,0,1),K.setClear(1),G.setClear(0),F0(J.DEPTH_TEST),K.setFunc(3),d0(!1),T0(1),F0(J.CULL_FACE),D0(0);function F0(k){if(R[k]!==!0)J.enable(k),R[k]=!0}function y0(k){if(R[k]!==!1)J.disable(k),R[k]=!1}function n0(k,$0){if(D[k]!==$0){if(J.bindFramebuffer(k,$0),D[k]=$0,Q){if(k===J.DRAW_FRAMEBUFFER)D[J.FRAMEBUFFER]=$0;if(k===J.FRAMEBUFFER)D[J.DRAW_FRAMEBUFFER]=$0}return!0}return!1}function KJ(k,$0){let J0=O,H0=!1;if(k){if(J0=M.get($0),J0===void 0)J0=[],M.set($0,J0);if(k.isWebGLMultipleRenderTargets){const Y0=k.texture;if(J0.length!==Y0.length||J0[0]!==J.COLOR_ATTACHMENT0){for(let c=0,E0=Y0.length;c<E0;c++)J0[c]=J.COLOR_ATTACHMENT0+c;J0.length=Y0.length,H0=!0}}else if(J0[0]!==J.COLOR_ATTACHMENT0)J0[0]=J.COLOR_ATTACHMENT0,H0=!0}else if(J0[0]!==J.BACK)J0[0]=J.BACK,H0=!0;if(H0)if(Z.isWebGL2)J.drawBuffers(J0);else $.get("WEBGL_draw_buffers").drawBuffersWEBGL(J0)}function S(k){if(E!==k)return J.useProgram(k),E=k,!0;return!1}const i0={[100]:J.FUNC_ADD,[101]:J.FUNC_SUBTRACT,[102]:J.FUNC_REVERSE_SUBTRACT};if(Q)i0[103]=J.MIN,i0[104]=J.MAX;else{const k=$.get("EXT_blend_minmax");if(k!==null)i0[103]=k.MIN_EXT,i0[104]=k.MAX_EXT}const f0={[200]:J.ZERO,[201]:J.ONE,[202]:J.SRC_COLOR,[204]:J.SRC_ALPHA,[210]:J.SRC_ALPHA_SATURATE,[208]:J.DST_COLOR,[206]:J.DST_ALPHA,[203]:J.ONE_MINUS_SRC_COLOR,[205]:J.ONE_MINUS_SRC_ALPHA,[209]:J.ONE_MINUS_DST_COLOR,[207]:J.ONE_MINUS_DST_ALPHA};function D0(k,$0,J0,H0,Y0,c,E0,L0){if(k===0){if(q===!0)y0(J.BLEND),q=!1;return}if(q===!1)F0(J.BLEND),q=!0;if(k!==5){if(k!==I||L0!==N){if(z!==100||w!==100)J.blendEquation(J.FUNC_ADD),z=100,w=100;if(L0)switch(k){case 1:J.blendFuncSeparate(J.ONE,J.ONE_MINUS_SRC_ALPHA,J.ONE,J.ONE_MINUS_SRC_ALPHA);break;case 2:J.blendFunc(J.ONE,J.ONE);break;case 3:J.blendFuncSeparate(J.ZERO,J.ONE_MINUS_SRC_COLOR,J.ZERO,J.ONE);break;case 4:J.blendFuncSeparate(J.ZERO,J.SRC_COLOR,J.ZERO,J.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",k);break}else switch(k){case 1:J.blendFuncSeparate(J.SRC_ALPHA,J.ONE_MINUS_SRC_ALPHA,J.ONE,J.ONE_MINUS_SRC_ALPHA);break;case 2:J.blendFunc(J.SRC_ALPHA,J.ONE);break;case 3:J.blendFuncSeparate(J.ZERO,J.ONE_MINUS_SRC_COLOR,J.ZERO,J.ONE);break;case 4:J.blendFunc(J.ZERO,J.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",k);break}A=null,L=null,g=null,u=null,I=k,N=L0}return}if(Y0=Y0||$0,c=c||J0,E0=E0||H0,$0!==z||Y0!==w)J.blendEquationSeparate(i0[$0],i0[Y0]),z=$0,w=Y0;if(J0!==A||H0!==L||c!==g||E0!==u)J.blendFuncSeparate(f0[J0],f0[H0],f0[c],f0[E0]),A=J0,L=H0,g=c,u=E0;I=k,N=!1}function B0(k,$0){k.side===2?y0(J.CULL_FACE):F0(J.CULL_FACE);let J0=k.side===1;if($0)J0=!J0;d0(J0),k.blending===1&&k.transparent===!1?D0(0):D0(k.blending,k.blendEquation,k.blendSrc,k.blendDst,k.blendEquationAlpha,k.blendSrcAlpha,k.blendDstAlpha,k.premultipliedAlpha),K.setFunc(k.depthFunc),K.setTest(k.depthTest),K.setMask(k.depthWrite),X.setMask(k.colorWrite);const H0=k.stencilWrite;if(G.setTest(H0),H0)G.setMask(k.stencilWriteMask),G.setFunc(k.stencilFunc,k.stencilRef,k.stencilFuncMask),G.setOp(k.stencilFail,k.stencilZFail,k.stencilZPass);s0(k.polygonOffset,k.polygonOffsetFactor,k.polygonOffsetUnits),k.alphaToCoverage===!0?F0(J.SAMPLE_ALPHA_TO_COVERAGE):y0(J.SAMPLE_ALPHA_TO_COVERAGE)}function d0(k){if(C!==k){if(k)J.frontFace(J.CW);else J.frontFace(J.CCW);C=k}}function T0(k){if(k!==0){if(F0(J.CULL_FACE),k!==m)if(k===1)J.cullFace(J.BACK);else if(k===2)J.cullFace(J.FRONT);else J.cullFace(J.FRONT_AND_BACK)}else y0(J.CULL_FACE);m=k}function v0(k){if(k!==e){if(n)J.lineWidth(k);e=k}}function s0(k,$0,J0){if(k){if(F0(J.POLYGON_OFFSET_FILL),W0!==$0||P!==J0)J.polygonOffset($0,J0),W0=$0,P=J0}else y0(J.POLYGON_OFFSET_FILL)}function p0(k){if(k)F0(J.SCISSOR_TEST);else y0(J.SCISSOR_TEST)}function WJ(k){if(k===void 0)k=J.TEXTURE0+l-1;if(p!==k)J.activeTexture(k),p=k}function _J(k,$0,J0){if(J0===void 0)if(p===null)J0=J.TEXTURE0+l-1;else J0=p;let H0=T[J0];if(H0===void 0)H0={type:void 0,texture:void 0},T[J0]=H0;if(H0.type!==k||H0.texture!==$0){if(p!==J0)J.activeTexture(J0),p=J0;J.bindTexture(k,$0||j0[k]),H0.type=k,H0.texture=$0}}function B(){const k=T[p];if(k!==void 0&&k.type!==void 0)J.bindTexture(k.type,null),k.type=void 0,k.texture=void 0}function F(){try{J.compressedTexImage2D.apply(J,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function j(){try{J.compressedTexImage3D.apply(J,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function t(){try{J.texSubImage2D.apply(J,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function o(){try{J.texSubImage3D.apply(J,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function i(){try{J.compressedTexSubImage2D.apply(J,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function R0(){try{J.compressedTexSubImage3D.apply(J,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function Z0(){try{J.texStorage2D.apply(J,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function q0(){try{J.texStorage3D.apply(J,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function M0(){try{J.texImage2D.apply(J,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function b0(){try{J.texImage3D.apply(J,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function s(k){if(G0.equals(k)===!1)J.scissor(k.x,k.y,k.z,k.w),G0.copy(k)}function l0(k){if(X0.equals(k)===!1)J.viewport(k.x,k.y,k.z,k.w),X0.copy(k)}function C0(k,$0){let J0=V.get($0);if(J0===void 0)J0=new WeakMap,V.set($0,J0);let H0=J0.get(k);if(H0===void 0)H0=J.getUniformBlockIndex($0,k.name),J0.set(k,H0)}function I0(k,$0){const H0=V.get($0).get(k);if(U.get($0)!==H0)J.uniformBlockBinding($0,H0,k.__bindingPointIndex),U.set($0,H0)}function V0(){if(J.disable(J.BLEND),J.disable(J.CULL_FACE),J.disable(J.DEPTH_TEST),J.disable(J.POLYGON_OFFSET_FILL),J.disable(J.SCISSOR_TEST),J.disable(J.STENCIL_TEST),J.disable(J.SAMPLE_ALPHA_TO_COVERAGE),J.blendEquation(J.FUNC_ADD),J.blendFunc(J.ONE,J.ZERO),J.blendFuncSeparate(J.ONE,J.ZERO,J.ONE,J.ZERO),J.colorMask(!0,!0,!0,!0),J.clearColor(0,0,0,0),J.depthMask(!0),J.depthFunc(J.LESS),J.clearDepth(1),J.stencilMask(4294967295),J.stencilFunc(J.ALWAYS,0,4294967295),J.stencilOp(J.KEEP,J.KEEP,J.KEEP),J.clearStencil(0),J.cullFace(J.BACK),J.frontFace(J.CCW),J.polygonOffset(0,0),J.activeTexture(J.TEXTURE0),J.bindFramebuffer(J.FRAMEBUFFER,null),Q===!0)J.bindFramebuffer(J.DRAW_FRAMEBUFFER,null),J.bindFramebuffer(J.READ_FRAMEBUFFER,null);J.useProgram(null),J.lineWidth(1),J.scissor(0,0,J.canvas.width,J.canvas.height),J.viewport(0,0,J.canvas.width,J.canvas.height),R={},p=null,T={},D={},M=new WeakMap,O=[],E=null,q=!1,I=null,z=null,A=null,L=null,w=null,g=null,u=null,N=!1,C=null,m=null,e=null,W0=null,P=null,G0.set(0,0,J.canvas.width,J.canvas.height),X0.set(0,0,J.canvas.width,J.canvas.height),X.reset(),K.reset(),G.reset()}return{buffers:{color:X,depth:K,stencil:G},enable:F0,disable:y0,bindFramebuffer:n0,drawBuffers:KJ,useProgram:S,setBlending:D0,setMaterial:B0,setFlipSided:d0,setCullFace:T0,setLineWidth:v0,setPolygonOffset:s0,setScissorTest:p0,activeTexture:WJ,bindTexture:_J,unbindTexture:B,compressedTexImage2D:F,compressedTexImage3D:j,texImage2D:M0,texImage3D:b0,updateUBOMapping:C0,uniformBlockBinding:I0,texStorage2D:Z0,texStorage3D:q0,texSubImage2D:t,texSubImage3D:o,compressedTexSubImage2D:i,compressedTexSubImage3D:R0,scissor:s,viewport:l0,reset:V0}},SW=function(J,$,Z,Q,W,Y,H){const{isWebGL2:X,maxTextures:K,maxCubemapSize:G,maxTextureSize:U,maxSamples:V}=W,R=$.has("WEBGL_multisampled_render_to_texture")?$.get("WEBGL_multisampled_render_to_texture"):null,D=typeof navigator==="undefined"?!1:/OculusBrowser/g.test(navigator.userAgent),M=new WeakMap;let O;const E=new WeakMap;let q=!1;try{q=typeof OffscreenCanvas!=="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(B){}function I(B,F){return q?new OffscreenCanvas(B,F):D7("canvas")}function z(B,F,j,t){let o=1;if(B.width>t||B.height>t)o=t/Math.max(B.width,B.height);if(o<1||F===!0)if(typeof HTMLImageElement!=="undefined"&&B instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&B instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&B instanceof ImageBitmap){const i=F?i7:Math.floor,R0=i(o*B.width),Z0=i(o*B.height);if(O===void 0)O=I(R0,Z0);const q0=j?I(R0,Z0):O;return q0.width=R0,q0.height=Z0,q0.getContext("2d").drawImage(B,0,0,R0,Z0),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+B.width+"x"+B.height+") to ("+R0+"x"+Z0+")."),q0}else{if("data"in B)console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+B.width+"x"+B.height+").");return B}return B}function A(B){return z8(B.width)&&z8(B.height)}function L(B){if(X)return!1;return B.wrapS!==1001||B.wrapT!==1001||B.minFilter!==1003&&B.minFilter!==1006}function w(B,F){return B.generateMipmaps&&F&&B.minFilter!==1003&&B.minFilter!==1006}function g(B){J.generateMipmap(B)}function u(B,F,j,t,o=!1){if(X===!1)return F;if(B!==null){if(J[B]!==void 0)return J[B];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'"+B+"\'")}let i=F;if(F===J.RED){if(j===J.FLOAT)i=J.R32F;if(j===J.HALF_FLOAT)i=J.R16F;if(j===J.UNSIGNED_BYTE)i=J.R8}if(F===J.RED_INTEGER){if(j===J.UNSIGNED_BYTE)i=J.R8UI;if(j===J.UNSIGNED_SHORT)i=J.R16UI;if(j===J.UNSIGNED_INT)i=J.R32UI;if(j===J.BYTE)i=J.R8I;if(j===J.SHORT)i=J.R16I;if(j===J.INT)i=J.R32I}if(F===J.RG){if(j===J.FLOAT)i=J.RG32F;if(j===J.HALF_FLOAT)i=J.RG16F;if(j===J.UNSIGNED_BYTE)i=J.RG8}if(F===J.RGBA){const R0=o?"linear":h0.getTransfer(t);if(j===J.FLOAT)i=J.RGBA32F;if(j===J.HALF_FLOAT)i=J.RGBA16F;if(j===J.UNSIGNED_BYTE)i=R0==="srgb"?J.SRGB8_ALPHA8:J.RGBA8;if(j===J.UNSIGNED_SHORT_4_4_4_4)i=J.RGBA4;if(j===J.UNSIGNED_SHORT_5_5_5_1)i=J.RGB5_A1}if(i===J.R16F||i===J.R32F||i===J.RG16F||i===J.RG32F||i===J.RGBA16F||i===J.RGBA32F)$.get("EXT_color_buffer_float");return i}function N(B,F,j){if(w(B,j)===!0||B.isFramebufferTexture&&B.minFilter!==1003&&B.minFilter!==1006)return Math.log2(Math.max(F.width,F.height))+1;else if(B.mipmaps!==void 0&&B.mipmaps.length>0)return B.mipmaps.length;else if(B.isCompressedTexture&&Array.isArray(B.image))return F.mipmaps.length;else return 1}function C(B){if(B===1003||B===1004||B===1005)return J.NEAREST;return J.LINEAR}function m(B){const F=B.target;if(F.removeEventListener("dispose",m),W0(F),F.isVideoTexture)M.delete(F)}function e(B){const F=B.target;F.removeEventListener("dispose",e),l(F)}function W0(B){const F=Q.get(B);if(F.__webglInit===void 0)return;const j=B.source,t=E.get(j);if(t){const o=t[F.__cacheKey];if(o.usedTimes--,o.usedTimes===0)P(B);if(Object.keys(t).length===0)E.delete(j)}Q.remove(B)}function P(B){const F=Q.get(B);J.deleteTexture(F.__webglTexture);const j=B.source,t=E.get(j);delete t[F.__cacheKey],H.memory.textures--}function l(B){const F=B.texture,j=Q.get(B),t=Q.get(F);if(t.__webglTexture!==void 0)J.deleteTexture(t.__webglTexture),H.memory.textures--;if(B.depthTexture)B.depthTexture.dispose();if(B.isWebGLCubeRenderTarget)for(let o=0;o<6;o++){if(Array.isArray(j.__webglFramebuffer[o]))for(let i=0;i<j.__webglFramebuffer[o].length;i++)J.deleteFramebuffer(j.__webglFramebuffer[o][i]);else J.deleteFramebuffer(j.__webglFramebuffer[o]);if(j.__webglDepthbuffer)J.deleteRenderbuffer(j.__webglDepthbuffer[o])}else{if(Array.isArray(j.__webglFramebuffer))for(let o=0;o<j.__webglFramebuffer.length;o++)J.deleteFramebuffer(j.__webglFramebuffer[o]);else J.deleteFramebuffer(j.__webglFramebuffer);if(j.__webglDepthbuffer)J.deleteRenderbuffer(j.__webglDepthbuffer);if(j.__webglMultisampledFramebuffer)J.deleteFramebuffer(j.__webglMultisampledFramebuffer);if(j.__webglColorRenderbuffer){for(let o=0;o<j.__webglColorRenderbuffer.length;o++)if(j.__webglColorRenderbuffer[o])J.deleteRenderbuffer(j.__webglColorRenderbuffer[o])}if(j.__webglDepthRenderbuffer)J.deleteRenderbuffer(j.__webglDepthRenderbuffer)}if(B.isWebGLMultipleRenderTargets)for(let o=0,i=F.length;o<i;o++){const R0=Q.get(F[o]);if(R0.__webglTexture)J.deleteTexture(R0.__webglTexture),H.memory.textures--;Q.remove(F[o])}Q.remove(F),Q.remove(B)}let n=0;function d(){n=0}function r(){const B=n;if(B>=K)console.warn("THREE.WebGLTextures: Trying to use "+B+" texture units while this GPU supports only "+K);return n+=1,B}function p(B){const F=[];return F.push(B.wrapS),F.push(B.wrapT),F.push(B.wrapR||0),F.push(B.magFilter),F.push(B.minFilter),F.push(B.anisotropy),F.push(B.internalFormat),F.push(B.format),F.push(B.type),F.push(B.generateMipmaps),F.push(B.premultiplyAlpha),F.push(B.flipY),F.push(B.unpackAlignment),F.push(B.colorSpace),F.join()}function T(B,F){const j=Q.get(B);if(B.isVideoTexture)WJ(B);if(B.isRenderTargetTexture===!1&&B.version>0&&j.__version!==B.version){const t=B.image;if(t===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(t.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{n0(j,B,F);return}}Z.bindTexture(J.TEXTURE_2D,j.__webglTexture,J.TEXTURE0+F)}function h(B,F){const j=Q.get(B);if(B.version>0&&j.__version!==B.version){n0(j,B,F);return}Z.bindTexture(J.TEXTURE_2D_ARRAY,j.__webglTexture,J.TEXTURE0+F)}function a(B,F){const j=Q.get(B);if(B.version>0&&j.__version!==B.version){n0(j,B,F);return}Z.bindTexture(J.TEXTURE_3D,j.__webglTexture,J.TEXTURE0+F)}function G0(B,F){const j=Q.get(B);if(B.version>0&&j.__version!==B.version){KJ(j,B,F);return}Z.bindTexture(J.TEXTURE_CUBE_MAP,j.__webglTexture,J.TEXTURE0+F)}const X0={[1000]:J.REPEAT,[1001]:J.CLAMP_TO_EDGE,[1002]:J.MIRRORED_REPEAT},U0={[1003]:J.NEAREST,[1004]:J.NEAREST_MIPMAP_NEAREST,[1005]:J.NEAREST_MIPMAP_LINEAR,[1006]:J.LINEAR,[1007]:J.LINEAR_MIPMAP_NEAREST,[1008]:J.LINEAR_MIPMAP_LINEAR},j0={[512]:J.NEVER,[519]:J.ALWAYS,[513]:J.LESS,[515]:J.LEQUAL,[514]:J.EQUAL,[518]:J.GEQUAL,[516]:J.GREATER,[517]:J.NOTEQUAL};function F0(B,F,j){if(j){if(J.texParameteri(B,J.TEXTURE_WRAP_S,X0[F.wrapS]),J.texParameteri(B,J.TEXTURE_WRAP_T,X0[F.wrapT]),B===J.TEXTURE_3D||B===J.TEXTURE_2D_ARRAY)J.texParameteri(B,J.TEXTURE_WRAP_R,X0[F.wrapR]);J.texParameteri(B,J.TEXTURE_MAG_FILTER,U0[F.magFilter]),J.texParameteri(B,J.TEXTURE_MIN_FILTER,U0[F.minFilter])}else{if(J.texParameteri(B,J.TEXTURE_WRAP_S,J.CLAMP_TO_EDGE),J.texParameteri(B,J.TEXTURE_WRAP_T,J.CLAMP_TO_EDGE),B===J.TEXTURE_3D||B===J.TEXTURE_2D_ARRAY)J.texParameteri(B,J.TEXTURE_WRAP_R,J.CLAMP_TO_EDGE);if(F.wrapS!==1001||F.wrapT!==1001)console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");if(J.texParameteri(B,J.TEXTURE_MAG_FILTER,C(F.magFilter)),J.texParameteri(B,J.TEXTURE_MIN_FILTER,C(F.minFilter)),F.minFilter!==1003&&F.minFilter!==1006)console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")}if(F.compareFunction)J.texParameteri(B,J.TEXTURE_COMPARE_MODE,J.COMPARE_REF_TO_TEXTURE),J.texParameteri(B,J.TEXTURE_COMPARE_FUNC,j0[F.compareFunction]);if($.has("EXT_texture_filter_anisotropic")===!0){const t=$.get("EXT_texture_filter_anisotropic");if(F.magFilter===1003)return;if(F.minFilter!==1005&&F.minFilter!==1008)return;if(F.type===1015&&$.has("OES_texture_float_linear")===!1)return;if(X===!1&&(F.type===1016&&$.has("OES_texture_half_float_linear")===!1))return;if(F.anisotropy>1||Q.get(F).__currentAnisotropy)J.texParameterf(B,t.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(F.anisotropy,W.getMaxAnisotropy())),Q.get(F).__currentAnisotropy=F.anisotropy}}function y0(B,F){let j=!1;if(B.__webglInit===void 0)B.__webglInit=!0,F.addEventListener("dispose",m);const t=F.source;let o=E.get(t);if(o===void 0)o={},E.set(t,o);const i=p(F);if(i!==B.__cacheKey){if(o[i]===void 0)o[i]={texture:J.createTexture(),usedTimes:0},H.memory.textures++,j=!0;o[i].usedTimes++;const R0=o[B.__cacheKey];if(R0!==void 0){if(o[B.__cacheKey].usedTimes--,R0.usedTimes===0)P(F)}B.__cacheKey=i,B.__webglTexture=o[i].texture}return j}function n0(B,F,j){let t=J.TEXTURE_2D;if(F.isDataArrayTexture||F.isCompressedArrayTexture)t=J.TEXTURE_2D_ARRAY;if(F.isData3DTexture)t=J.TEXTURE_3D;const o=y0(B,F),i=F.source;Z.bindTexture(t,B.__webglTexture,J.TEXTURE0+j);const R0=Q.get(i);if(i.version!==R0.__version||o===!0){Z.activeTexture(J.TEXTURE0+j);const Z0=h0.getPrimaries(h0.workingColorSpace),q0=F.colorSpace===""?null:h0.getPrimaries(F.colorSpace),M0=F.colorSpace===""||Z0===q0?J.NONE:J.BROWSER_DEFAULT_WEBGL;J.pixelStorei(J.UNPACK_FLIP_Y_WEBGL,F.flipY),J.pixelStorei(J.UNPACK_PREMULTIPLY_ALPHA_WEBGL,F.premultiplyAlpha),J.pixelStorei(J.UNPACK_ALIGNMENT,F.unpackAlignment),J.pixelStorei(J.UNPACK_COLORSPACE_CONVERSION_WEBGL,M0);const b0=L(F)&&A(F.image)===!1;let s=z(F.image,b0,!1,U);s=_J(F,s);const l0=A(s)||X,C0=Y.convert(F.format,F.colorSpace);let I0=Y.convert(F.type),V0=u(F.internalFormat,C0,I0,F.colorSpace,F.isVideoTexture);F0(t,F,l0);let k;const $0=F.mipmaps,J0=X&&F.isVideoTexture!==!0,H0=R0.__version===void 0||o===!0,Y0=N(F,s,l0);if(F.isDepthTexture){if(V0=J.DEPTH_COMPONENT,X)if(F.type===1015)V0=J.DEPTH_COMPONENT32F;else if(F.type===1014)V0=J.DEPTH_COMPONENT24;else if(F.type===1020)V0=J.DEPTH24_STENCIL8;else V0=J.DEPTH_COMPONENT16;else if(F.type===1015)console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");if(F.format===1026&&V0===J.DEPTH_COMPONENT){if(F.type!==1012&&F.type!==1014)console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),F.type=1014,I0=Y.convert(F.type)}if(F.format===1027&&V0===J.DEPTH_COMPONENT){if(V0=J.DEPTH_STENCIL,F.type!==1020)console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),F.type=1020,I0=Y.convert(F.type)}if(H0)if(J0)Z.texStorage2D(J.TEXTURE_2D,1,V0,s.width,s.height);else Z.texImage2D(J.TEXTURE_2D,0,V0,s.width,s.height,0,C0,I0,null)}else if(F.isDataTexture)if($0.length>0&&l0){if(J0&&H0)Z.texStorage2D(J.TEXTURE_2D,Y0,V0,$0[0].width,$0[0].height);for(let c=0,E0=$0.length;c<E0;c++)if(k=$0[c],J0)Z.texSubImage2D(J.TEXTURE_2D,c,0,0,k.width,k.height,C0,I0,k.data);else Z.texImage2D(J.TEXTURE_2D,c,V0,k.width,k.height,0,C0,I0,k.data);F.generateMipmaps=!1}else if(J0){if(H0)Z.texStorage2D(J.TEXTURE_2D,Y0,V0,s.width,s.height);Z.texSubImage2D(J.TEXTURE_2D,0,0,0,s.width,s.height,C0,I0,s.data)}else Z.texImage2D(J.TEXTURE_2D,0,V0,s.width,s.height,0,C0,I0,s.data);else if(F.isCompressedTexture)if(F.isCompressedArrayTexture){if(J0&&H0)Z.texStorage3D(J.TEXTURE_2D_ARRAY,Y0,V0,$0[0].width,$0[0].height,s.depth);for(let c=0,E0=$0.length;c<E0;c++)if(k=$0[c],F.format!==1023)if(C0!==null)if(J0)Z.compressedTexSubImage3D(J.TEXTURE_2D_ARRAY,c,0,0,0,k.width,k.height,s.depth,C0,k.data,0,0);else Z.compressedTexImage3D(J.TEXTURE_2D_ARRAY,c,V0,k.width,k.height,s.depth,0,k.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else if(J0)Z.texSubImage3D(J.TEXTURE_2D_ARRAY,c,0,0,0,k.width,k.height,s.depth,C0,I0,k.data);else Z.texImage3D(J.TEXTURE_2D_ARRAY,c,V0,k.width,k.height,s.depth,0,C0,I0,k.data)}else{if(J0&&H0)Z.texStorage2D(J.TEXTURE_2D,Y0,V0,$0[0].width,$0[0].height);for(let c=0,E0=$0.length;c<E0;c++)if(k=$0[c],F.format!==1023)if(C0!==null)if(J0)Z.compressedTexSubImage2D(J.TEXTURE_2D,c,0,0,k.width,k.height,C0,k.data);else Z.compressedTexImage2D(J.TEXTURE_2D,c,V0,k.width,k.height,0,k.data);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else if(J0)Z.texSubImage2D(J.TEXTURE_2D,c,0,0,k.width,k.height,C0,I0,k.data);else Z.texImage2D(J.TEXTURE_2D,c,V0,k.width,k.height,0,C0,I0,k.data)}else if(F.isDataArrayTexture)if(J0){if(H0)Z.texStorage3D(J.TEXTURE_2D_ARRAY,Y0,V0,s.width,s.height,s.depth);Z.texSubImage3D(J.TEXTURE_2D_ARRAY,0,0,0,0,s.width,s.height,s.depth,C0,I0,s.data)}else Z.texImage3D(J.TEXTURE_2D_ARRAY,0,V0,s.width,s.height,s.depth,0,C0,I0,s.data);else if(F.isData3DTexture)if(J0){if(H0)Z.texStorage3D(J.TEXTURE_3D,Y0,V0,s.width,s.height,s.depth);Z.texSubImage3D(J.TEXTURE_3D,0,0,0,0,s.width,s.height,s.depth,C0,I0,s.data)}else Z.texImage3D(J.TEXTURE_3D,0,V0,s.width,s.height,s.depth,0,C0,I0,s.data);else if(F.isFramebufferTexture){if(H0)if(J0)Z.texStorage2D(J.TEXTURE_2D,Y0,V0,s.width,s.height);else{let{width:c,height:E0}=s;for(let L0=0;L0<Y0;L0++)Z.texImage2D(J.TEXTURE_2D,L0,V0,c,E0,0,C0,I0,null),c>>=1,E0>>=1}}else if($0.length>0&&l0){if(J0&&H0)Z.texStorage2D(J.TEXTURE_2D,Y0,V0,$0[0].width,$0[0].height);for(let c=0,E0=$0.length;c<E0;c++)if(k=$0[c],J0)Z.texSubImage2D(J.TEXTURE_2D,c,0,0,C0,I0,k);else Z.texImage2D(J.TEXTURE_2D,c,V0,C0,I0,k);F.generateMipmaps=!1}else if(J0){if(H0)Z.texStorage2D(J.TEXTURE_2D,Y0,V0,s.width,s.height);Z.texSubImage2D(J.TEXTURE_2D,0,0,0,C0,I0,s)}else Z.texImage2D(J.TEXTURE_2D,0,V0,C0,I0,s);if(w(F,l0))g(t);if(R0.__version=i.version,F.onUpdate)F.onUpdate(F)}B.__version=F.version}function KJ(B,F,j){if(F.image.length!==6)return;const t=y0(B,F),o=F.source;Z.bindTexture(J.TEXTURE_CUBE_MAP,B.__webglTexture,J.TEXTURE0+j);const i=Q.get(o);if(o.version!==i.__version||t===!0){Z.activeTexture(J.TEXTURE0+j);const R0=h0.getPrimaries(h0.workingColorSpace),Z0=F.colorSpace===""?null:h0.getPrimaries(F.colorSpace),q0=F.colorSpace===""||R0===Z0?J.NONE:J.BROWSER_DEFAULT_WEBGL;J.pixelStorei(J.UNPACK_FLIP_Y_WEBGL,F.flipY),J.pixelStorei(J.UNPACK_PREMULTIPLY_ALPHA_WEBGL,F.premultiplyAlpha),J.pixelStorei(J.UNPACK_ALIGNMENT,F.unpackAlignment),J.pixelStorei(J.UNPACK_COLORSPACE_CONVERSION_WEBGL,q0);const M0=F.isCompressedTexture||F.image[0].isCompressedTexture,b0=F.image[0]&&F.image[0].isDataTexture,s=[];for(let c=0;c<6;c++){if(!M0&&!b0)s[c]=z(F.image[c],!1,!0,G);else s[c]=b0?F.image[c].image:F.image[c];s[c]=_J(F,s[c])}const l0=s[0],C0=A(l0)||X,I0=Y.convert(F.format,F.colorSpace),V0=Y.convert(F.type),k=u(F.internalFormat,I0,V0,F.colorSpace),$0=X&&F.isVideoTexture!==!0,J0=i.__version===void 0||t===!0;let H0=N(F,l0,C0);F0(J.TEXTURE_CUBE_MAP,F,C0);let Y0;if(M0){if($0&&J0)Z.texStorage2D(J.TEXTURE_CUBE_MAP,H0,k,l0.width,l0.height);for(let c=0;c<6;c++){Y0=s[c].mipmaps;for(let E0=0;E0<Y0.length;E0++){const L0=Y0[E0];if(F.format!==1023)if(I0!==null)if($0)Z.compressedTexSubImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,E0,0,0,L0.width,L0.height,I0,L0.data);else Z.compressedTexImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,E0,k,L0.width,L0.height,0,L0.data);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");else if($0)Z.texSubImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,E0,0,0,L0.width,L0.height,I0,V0,L0.data);else Z.texImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,E0,k,L0.width,L0.height,0,I0,V0,L0.data)}}}else{if(Y0=F.mipmaps,$0&&J0){if(Y0.length>0)H0++;Z.texStorage2D(J.TEXTURE_CUBE_MAP,H0,k,s[0].width,s[0].height)}for(let c=0;c<6;c++)if(b0){if($0)Z.texSubImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,0,0,0,s[c].width,s[c].height,I0,V0,s[c].data);else Z.texImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,0,k,s[c].width,s[c].height,0,I0,V0,s[c].data);for(let E0=0;E0<Y0.length;E0++){const YJ=Y0[E0].image[c].image;if($0)Z.texSubImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,E0+1,0,0,YJ.width,YJ.height,I0,V0,YJ.data);else Z.texImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,E0+1,k,YJ.width,YJ.height,0,I0,V0,YJ.data)}}else{if($0)Z.texSubImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,0,0,0,I0,V0,s[c]);else Z.texImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,0,k,I0,V0,s[c]);for(let E0=0;E0<Y0.length;E0++){const L0=Y0[E0];if($0)Z.texSubImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,E0+1,0,0,I0,V0,L0.image[c]);else Z.texImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+c,E0+1,k,I0,V0,L0.image[c])}}}if(w(F,C0))g(J.TEXTURE_CUBE_MAP);if(i.__version=o.version,F.onUpdate)F.onUpdate(F)}B.__version=F.version}function S(B,F,j,t,o,i){const R0=Y.convert(j.format,j.colorSpace),Z0=Y.convert(j.type),q0=u(j.internalFormat,R0,Z0,j.colorSpace);if(!Q.get(F).__hasExternalTextures){const b0=Math.max(1,F.width>>i),s=Math.max(1,F.height>>i);if(o===J.TEXTURE_3D||o===J.TEXTURE_2D_ARRAY)Z.texImage3D(o,i,q0,b0,s,F.depth,0,R0,Z0,null);else Z.texImage2D(o,i,q0,b0,s,0,R0,Z0,null)}if(Z.bindFramebuffer(J.FRAMEBUFFER,B),p0(F))R.framebufferTexture2DMultisampleEXT(J.FRAMEBUFFER,t,o,Q.get(j).__webglTexture,0,s0(F));else if(o===J.TEXTURE_2D||o>=J.TEXTURE_CUBE_MAP_POSITIVE_X&&o<=J.TEXTURE_CUBE_MAP_NEGATIVE_Z)J.framebufferTexture2D(J.FRAMEBUFFER,t,o,Q.get(j).__webglTexture,i);Z.bindFramebuffer(J.FRAMEBUFFER,null)}function i0(B,F,j){if(J.bindRenderbuffer(J.RENDERBUFFER,B),F.depthBuffer&&!F.stencilBuffer){let t=X===!0?J.DEPTH_COMPONENT24:J.DEPTH_COMPONENT16;if(j||p0(F)){const o=F.depthTexture;if(o&&o.isDepthTexture){if(o.type===1015)t=J.DEPTH_COMPONENT32F;else if(o.type===1014)t=J.DEPTH_COMPONENT24}const i=s0(F);if(p0(F))R.renderbufferStorageMultisampleEXT(J.RENDERBUFFER,i,t,F.width,F.height);else J.renderbufferStorageMultisample(J.RENDERBUFFER,i,t,F.width,F.height)}else J.renderbufferStorage(J.RENDERBUFFER,t,F.width,F.height);J.framebufferRenderbuffer(J.FRAMEBUFFER,J.DEPTH_ATTACHMENT,J.RENDERBUFFER,B)}else if(F.depthBuffer&&F.stencilBuffer){const t=s0(F);if(j&&p0(F)===!1)J.renderbufferStorageMultisample(J.RENDERBUFFER,t,J.DEPTH24_STENCIL8,F.width,F.height);else if(p0(F))R.renderbufferStorageMultisampleEXT(J.RENDERBUFFER,t,J.DEPTH24_STENCIL8,F.width,F.height);else J.renderbufferStorage(J.RENDERBUFFER,J.DEPTH_STENCIL,F.width,F.height);J.framebufferRenderbuffer(J.FRAMEBUFFER,J.DEPTH_STENCIL_ATTACHMENT,J.RENDERBUFFER,B)}else{const t=F.isWebGLMultipleRenderTargets===!0?F.texture:[F.texture];for(let o=0;o<t.length;o++){const i=t[o],R0=Y.convert(i.format,i.colorSpace),Z0=Y.convert(i.type),q0=u(i.internalFormat,R0,Z0,i.colorSpace),M0=s0(F);if(j&&p0(F)===!1)J.renderbufferStorageMultisample(J.RENDERBUFFER,M0,q0,F.width,F.height);else if(p0(F))R.renderbufferStorageMultisampleEXT(J.RENDERBUFFER,M0,q0,F.width,F.height);else J.renderbufferStorage(J.RENDERBUFFER,q0,F.width,F.height)}}J.bindRenderbuffer(J.RENDERBUFFER,null)}function f0(B,F){if(F&&F.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(Z.bindFramebuffer(J.FRAMEBUFFER,B),!(F.depthTexture&&F.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");if(!Q.get(F.depthTexture).__webglTexture||F.depthTexture.image.width!==F.width||F.depthTexture.image.height!==F.height)F.depthTexture.image.width=F.width,F.depthTexture.image.height=F.height,F.depthTexture.needsUpdate=!0;T(F.depthTexture,0);const t=Q.get(F.depthTexture).__webglTexture,o=s0(F);if(F.depthTexture.format===1026)if(p0(F))R.framebufferTexture2DMultisampleEXT(J.FRAMEBUFFER,J.DEPTH_ATTACHMENT,J.TEXTURE_2D,t,0,o);else J.framebufferTexture2D(J.FRAMEBUFFER,J.DEPTH_ATTACHMENT,J.TEXTURE_2D,t,0);else if(F.depthTexture.format===1027)if(p0(F))R.framebufferTexture2DMultisampleEXT(J.FRAMEBUFFER,J.DEPTH_STENCIL_ATTACHMENT,J.TEXTURE_2D,t,0,o);else J.framebufferTexture2D(J.FRAMEBUFFER,J.DEPTH_STENCIL_ATTACHMENT,J.TEXTURE_2D,t,0);else throw new Error("Unknown depthTexture format")}function D0(B){const F=Q.get(B),j=B.isWebGLCubeRenderTarget===!0;if(B.depthTexture&&!F.__autoAllocateDepthBuffer){if(j)throw new Error("target.depthTexture not supported in Cube render targets");f0(F.__webglFramebuffer,B)}else if(j){F.__webglDepthbuffer=[];for(let t=0;t<6;t++)Z.bindFramebuffer(J.FRAMEBUFFER,F.__webglFramebuffer[t]),F.__webglDepthbuffer[t]=J.createRenderbuffer(),i0(F.__webglDepthbuffer[t],B,!1)}else Z.bindFramebuffer(J.FRAMEBUFFER,F.__webglFramebuffer),F.__webglDepthbuffer=J.createRenderbuffer(),i0(F.__webglDepthbuffer,B,!1);Z.bindFramebuffer(J.FRAMEBUFFER,null)}function B0(B,F,j){const t=Q.get(B);if(F!==void 0)S(t.__webglFramebuffer,B,B.texture,J.COLOR_ATTACHMENT0,J.TEXTURE_2D,0);if(j!==void 0)D0(B)}function d0(B){const F=B.texture,j=Q.get(B),t=Q.get(F);if(B.addEventListener("dispose",e),B.isWebGLMultipleRenderTargets!==!0){if(t.__webglTexture===void 0)t.__webglTexture=J.createTexture();t.__version=F.version,H.memory.textures++}const o=B.isWebGLCubeRenderTarget===!0,i=B.isWebGLMultipleRenderTargets===!0,R0=A(B)||X;if(o){j.__webglFramebuffer=[];for(let Z0=0;Z0<6;Z0++)if(X&&F.mipmaps&&F.mipmaps.length>0){j.__webglFramebuffer[Z0]=[];for(let q0=0;q0<F.mipmaps.length;q0++)j.__webglFramebuffer[Z0][q0]=J.createFramebuffer()}else j.__webglFramebuffer[Z0]=J.createFramebuffer()}else{if(X&&F.mipmaps&&F.mipmaps.length>0){j.__webglFramebuffer=[];for(let Z0=0;Z0<F.mipmaps.length;Z0++)j.__webglFramebuffer[Z0]=J.createFramebuffer()}else j.__webglFramebuffer=J.createFramebuffer();if(i)if(W.drawBuffers){const Z0=B.texture;for(let q0=0,M0=Z0.length;q0<M0;q0++){const b0=Q.get(Z0[q0]);if(b0.__webglTexture===void 0)b0.__webglTexture=J.createTexture(),H.memory.textures++}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(X&&B.samples>0&&p0(B)===!1){const Z0=i?F:[F];j.__webglMultisampledFramebuffer=J.createFramebuffer(),j.__webglColorRenderbuffer=[],Z.bindFramebuffer(J.FRAMEBUFFER,j.__webglMultisampledFramebuffer);for(let q0=0;q0<Z0.length;q0++){const M0=Z0[q0];j.__webglColorRenderbuffer[q0]=J.createRenderbuffer(),J.bindRenderbuffer(J.RENDERBUFFER,j.__webglColorRenderbuffer[q0]);const b0=Y.convert(M0.format,M0.colorSpace),s=Y.convert(M0.type),l0=u(M0.internalFormat,b0,s,M0.colorSpace,B.isXRRenderTarget===!0),C0=s0(B);J.renderbufferStorageMultisample(J.RENDERBUFFER,C0,l0,B.width,B.height),J.framebufferRenderbuffer(J.FRAMEBUFFER,J.COLOR_ATTACHMENT0+q0,J.RENDERBUFFER,j.__webglColorRenderbuffer[q0])}if(J.bindRenderbuffer(J.RENDERBUFFER,null),B.depthBuffer)j.__webglDepthRenderbuffer=J.createRenderbuffer(),i0(j.__webglDepthRenderbuffer,B,!0);Z.bindFramebuffer(J.FRAMEBUFFER,null)}}if(o){Z.bindTexture(J.TEXTURE_CUBE_MAP,t.__webglTexture),F0(J.TEXTURE_CUBE_MAP,F,R0);for(let Z0=0;Z0<6;Z0++)if(X&&F.mipmaps&&F.mipmaps.length>0)for(let q0=0;q0<F.mipmaps.length;q0++)S(j.__webglFramebuffer[Z0][q0],B,F,J.COLOR_ATTACHMENT0,J.TEXTURE_CUBE_MAP_POSITIVE_X+Z0,q0);else S(j.__webglFramebuffer[Z0],B,F,J.COLOR_ATTACHMENT0,J.TEXTURE_CUBE_MAP_POSITIVE_X+Z0,0);if(w(F,R0))g(J.TEXTURE_CUBE_MAP);Z.unbindTexture()}else if(i){const Z0=B.texture;for(let q0=0,M0=Z0.length;q0<M0;q0++){const b0=Z0[q0],s=Q.get(b0);if(Z.bindTexture(J.TEXTURE_2D,s.__webglTexture),F0(J.TEXTURE_2D,b0,R0),S(j.__webglFramebuffer,B,b0,J.COLOR_ATTACHMENT0+q0,J.TEXTURE_2D,0),w(b0,R0))g(J.TEXTURE_2D)}Z.unbindTexture()}else{let Z0=J.TEXTURE_2D;if(B.isWebGL3DRenderTarget||B.isWebGLArrayRenderTarget)if(X)Z0=B.isWebGL3DRenderTarget?J.TEXTURE_3D:J.TEXTURE_2D_ARRAY;else console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.");if(Z.bindTexture(Z0,t.__webglTexture),F0(Z0,F,R0),X&&F.mipmaps&&F.mipmaps.length>0)for(let q0=0;q0<F.mipmaps.length;q0++)S(j.__webglFramebuffer[q0],B,F,J.COLOR_ATTACHMENT0,Z0,q0);else S(j.__webglFramebuffer,B,F,J.COLOR_ATTACHMENT0,Z0,0);if(w(F,R0))g(Z0);Z.unbindTexture()}if(B.depthBuffer)D0(B)}function T0(B){const F=A(B)||X,j=B.isWebGLMultipleRenderTargets===!0?B.texture:[B.texture];for(let t=0,o=j.length;t<o;t++){const i=j[t];if(w(i,F)){const R0=B.isWebGLCubeRenderTarget?J.TEXTURE_CUBE_MAP:J.TEXTURE_2D,Z0=Q.get(i).__webglTexture;Z.bindTexture(R0,Z0),g(R0),Z.unbindTexture()}}}function v0(B){if(X&&B.samples>0&&p0(B)===!1){const F=B.isWebGLMultipleRenderTargets?B.texture:[B.texture],j=B.width,t=B.height;let o=J.COLOR_BUFFER_BIT;const i=[],R0=B.stencilBuffer?J.DEPTH_STENCIL_ATTACHMENT:J.DEPTH_ATTACHMENT,Z0=Q.get(B),q0=B.isWebGLMultipleRenderTargets===!0;if(q0)for(let M0=0;M0<F.length;M0++)Z.bindFramebuffer(J.FRAMEBUFFER,Z0.__webglMultisampledFramebuffer),J.framebufferRenderbuffer(J.FRAMEBUFFER,J.COLOR_ATTACHMENT0+M0,J.RENDERBUFFER,null),Z.bindFramebuffer(J.FRAMEBUFFER,Z0.__webglFramebuffer),J.framebufferTexture2D(J.DRAW_FRAMEBUFFER,J.COLOR_ATTACHMENT0+M0,J.TEXTURE_2D,null,0);Z.bindFramebuffer(J.READ_FRAMEBUFFER,Z0.__webglMultisampledFramebuffer),Z.bindFramebuffer(J.DRAW_FRAMEBUFFER,Z0.__webglFramebuffer);for(let M0=0;M0<F.length;M0++){if(i.push(J.COLOR_ATTACHMENT0+M0),B.depthBuffer)i.push(R0);const b0=Z0.__ignoreDepthValues!==void 0?Z0.__ignoreDepthValues:!1;if(b0===!1){if(B.depthBuffer)o|=J.DEPTH_BUFFER_BIT;if(B.stencilBuffer)o|=J.STENCIL_BUFFER_BIT}if(q0)J.framebufferRenderbuffer(J.READ_FRAMEBUFFER,J.COLOR_ATTACHMENT0,J.RENDERBUFFER,Z0.__webglColorRenderbuffer[M0]);if(b0===!0)J.invalidateFramebuffer(J.READ_FRAMEBUFFER,[R0]),J.invalidateFramebuffer(J.DRAW_FRAMEBUFFER,[R0]);if(q0){const s=Q.get(F[M0]).__webglTexture;J.framebufferTexture2D(J.DRAW_FRAMEBUFFER,J.COLOR_ATTACHMENT0,J.TEXTURE_2D,s,0)}if(J.blitFramebuffer(0,0,j,t,0,0,j,t,o,J.NEAREST),D)J.invalidateFramebuffer(J.READ_FRAMEBUFFER,i)}if(Z.bindFramebuffer(J.READ_FRAMEBUFFER,null),Z.bindFramebuffer(J.DRAW_FRAMEBUFFER,null),q0)for(let M0=0;M0<F.length;M0++){Z.bindFramebuffer(J.FRAMEBUFFER,Z0.__webglMultisampledFramebuffer),J.framebufferRenderbuffer(J.FRAMEBUFFER,J.COLOR_ATTACHMENT0+M0,J.RENDERBUFFER,Z0.__webglColorRenderbuffer[M0]);const b0=Q.get(F[M0]).__webglTexture;Z.bindFramebuffer(J.FRAMEBUFFER,Z0.__webglFramebuffer),J.framebufferTexture2D(J.DRAW_FRAMEBUFFER,J.COLOR_ATTACHMENT0+M0,J.TEXTURE_2D,b0,0)}Z.bindFramebuffer(J.DRAW_FRAMEBUFFER,Z0.__webglMultisampledFramebuffer)}}function s0(B){return Math.min(V,B.samples)}function p0(B){const F=Q.get(B);return X&&B.samples>0&&$.has("WEBGL_multisampled_render_to_texture")===!0&&F.__useRenderToTexture!==!1}function WJ(B){const F=H.render.frame;if(M.get(B)!==F)M.set(B,F),B.update()}function _J(B,F){const{colorSpace:j,format:t,type:o}=B;if(B.isCompressedTexture===!0||B.isVideoTexture===!0||B.format===1035)return F;if(j!=="srgb-linear"&&j!=="")if(h0.getTransfer(j)==="srgb"){if(X===!1)if($.has("EXT_sRGB")===!0&&t===1023)B.format=1035,B.minFilter=1006,B.generateMipmaps=!1;else F=e7.sRGBToLinear(F);else if(t!==1023||o!==1009)console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.")}else console.error("THREE.WebGLTextures: Unsupported texture color space:",j);return F}this.allocateTextureUnit=r,this.resetTextureUnits=d,this.setTexture2D=T,this.setTexture2DArray=h,this.setTexture3D=a,this.setTextureCube=G0,this.rebindTextures=B0,this.setupRenderTarget=d0,this.updateRenderTargetMipmap=T0,this.updateMultisampleRenderTarget=v0,this.setupDepthRenderbuffer=D0,this.setupFrameBufferTexture=S,this.useMultisampledRTT=p0},yW=function(J,$,Z){const Q=Z.isWebGL2;function W(Y,H=""){let X;const K=h0.getTransfer(H);if(Y===1009)return J.UNSIGNED_BYTE;if(Y===1017)return J.UNSIGNED_SHORT_4_4_4_4;if(Y===1018)return J.UNSIGNED_SHORT_5_5_5_1;if(Y===1010)return J.BYTE;if(Y===1011)return J.SHORT;if(Y===1012)return J.UNSIGNED_SHORT;if(Y===1013)return J.INT;if(Y===1014)return J.UNSIGNED_INT;if(Y===1015)return J.FLOAT;if(Y===1016){if(Q)return J.HALF_FLOAT;if(X=$.get("OES_texture_half_float"),X!==null)return X.HALF_FLOAT_OES;else return null}if(Y===1021)return J.ALPHA;if(Y===1023)return J.RGBA;if(Y===1024)return J.LUMINANCE;if(Y===1025)return J.LUMINANCE_ALPHA;if(Y===1026)return J.DEPTH_COMPONENT;if(Y===1027)return J.DEPTH_STENCIL;if(Y===1035)if(X=$.get("EXT_sRGB"),X!==null)return X.SRGB_ALPHA_EXT;else return null;if(Y===1028)return J.RED;if(Y===1029)return J.RED_INTEGER;if(Y===1030)return J.RG;if(Y===1031)return J.RG_INTEGER;if(Y===1033)return J.RGBA_INTEGER;if(Y===33776||Y===33777||Y===33778||Y===33779)if(K==="srgb")if(X=$.get("WEBGL_compressed_texture_s3tc_srgb"),X!==null){if(Y===33776)return X.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(Y===33777)return X.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(Y===33778)return X.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(Y===33779)return X.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(X=$.get("WEBGL_compressed_texture_s3tc"),X!==null){if(Y===33776)return X.COMPRESSED_RGB_S3TC_DXT1_EXT;if(Y===33777)return X.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(Y===33778)return X.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(Y===33779)return X.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(Y===35840||Y===35841||Y===35842||Y===35843)if(X=$.get("WEBGL_compressed_texture_pvrtc"),X!==null){if(Y===35840)return X.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(Y===35841)return X.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(Y===35842)return X.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(Y===35843)return X.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(Y===36196)if(X=$.get("WEBGL_compressed_texture_etc1"),X!==null)return X.COMPRESSED_RGB_ETC1_WEBGL;else return null;if(Y===37492||Y===37496)if(X=$.get("WEBGL_compressed_texture_etc"),X!==null){if(Y===37492)return K==="srgb"?X.COMPRESSED_SRGB8_ETC2:X.COMPRESSED_RGB8_ETC2;if(Y===37496)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:X.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(Y===37808||Y===37809||Y===37810||Y===37811||Y===37812||Y===37813||Y===37814||Y===37815||Y===37816||Y===37817||Y===37818||Y===37819||Y===37820||Y===37821)if(X=$.get("WEBGL_compressed_texture_astc"),X!==null){if(Y===37808)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:X.COMPRESSED_RGBA_ASTC_4x4_KHR;if(Y===37809)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:X.COMPRESSED_RGBA_ASTC_5x4_KHR;if(Y===37810)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:X.COMPRESSED_RGBA_ASTC_5x5_KHR;if(Y===37811)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:X.COMPRESSED_RGBA_ASTC_6x5_KHR;if(Y===37812)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:X.COMPRESSED_RGBA_ASTC_6x6_KHR;if(Y===37813)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:X.COMPRESSED_RGBA_ASTC_8x5_KHR;if(Y===37814)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:X.COMPRESSED_RGBA_ASTC_8x6_KHR;if(Y===37815)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:X.COMPRESSED_RGBA_ASTC_8x8_KHR;if(Y===37816)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:X.COMPRESSED_RGBA_ASTC_10x5_KHR;if(Y===37817)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:X.COMPRESSED_RGBA_ASTC_10x6_KHR;if(Y===37818)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:X.COMPRESSED_RGBA_ASTC_10x8_KHR;if(Y===37819)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:X.COMPRESSED_RGBA_ASTC_10x10_KHR;if(Y===37820)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:X.COMPRESSED_RGBA_ASTC_12x10_KHR;if(Y===37821)return K==="srgb"?X.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:X.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(Y===36492||Y===36494||Y===36495)if(X=$.get("EXT_texture_compression_bptc"),X!==null){if(Y===36492)return K==="srgb"?X.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:X.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(Y===36494)return X.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(Y===36495)return X.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(Y===36283||Y===36284||Y===36285||Y===36286)if(X=$.get("EXT_texture_compression_rgtc"),X!==null){if(Y===36492)return X.COMPRESSED_RED_RGTC1_EXT;if(Y===36284)return X.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(Y===36285)return X.COMPRESSED_RED_GREEN_RGTC2_EXT;if(Y===36286)return X.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;if(Y===1020){if(Q)return J.UNSIGNED_INT_24_8;if(X=$.get("WEBGL_depth_texture"),X!==null)return X.UNSIGNED_INT_24_8_WEBGL;else return null}return J[Y]!==void 0?J[Y]:null}return{convert:W}},vW=function(J,$){function Z(E,q){if(E.matrixAutoUpdate===!0)E.updateMatrix();q.value.copy(E.matrix)}function Q(E,q){if(q.color.getRGB(E.fogColor.value,U9(J)),q.isFog)E.fogNear.value=q.near,E.fogFar.value=q.far;else if(q.isFogExp2)E.fogDensity.value=q.density}function W(E,q,I,z,A){if(q.isMeshBasicMaterial)Y(E,q);else if(q.isMeshLambertMaterial)Y(E,q);else if(q.isMeshToonMaterial)Y(E,q),V(E,q);else if(q.isMeshPhongMaterial)Y(E,q),U(E,q);else if(q.isMeshStandardMaterial){if(Y(E,q),R(E,q),q.isMeshPhysicalMaterial)D(E,q,A)}else if(q.isMeshMatcapMaterial)Y(E,q),M(E,q);else if(q.isMeshDepthMaterial)Y(E,q);else if(q.isMeshDistanceMaterial)Y(E,q),O(E,q);else if(q.isMeshNormalMaterial)Y(E,q);else if(q.isLineBasicMaterial){if(H(E,q),q.isLineDashedMaterial)X(E,q)}else if(q.isPointsMaterial)K(E,q,I,z);else if(q.isSpriteMaterial)G(E,q);else if(q.isShadowMaterial)E.color.value.copy(q.color),E.opacity.value=q.opacity;else if(q.isShaderMaterial)q.uniformsNeedUpdate=!1}function Y(E,q){if(E.opacity.value=q.opacity,q.color)E.diffuse.value.copy(q.color);if(q.emissive)E.emissive.value.copy(q.emissive).multiplyScalar(q.emissiveIntensity);if(q.map)E.map.value=q.map,Z(q.map,E.mapTransform);if(q.alphaMap)E.alphaMap.value=q.alphaMap,Z(q.alphaMap,E.alphaMapTransform);if(q.bumpMap){if(E.bumpMap.value=q.bumpMap,Z(q.bumpMap,E.bumpMapTransform),E.bumpScale.value=q.bumpScale,q.side===1)E.bumpScale.value*=-1}if(q.normalMap){if(E.normalMap.value=q.normalMap,Z(q.normalMap,E.normalMapTransform),E.normalScale.value.copy(q.normalScale),q.side===1)E.normalScale.value.negate()}if(q.displacementMap)E.displacementMap.value=q.displacementMap,Z(q.displacementMap,E.displacementMapTransform),E.displacementScale.value=q.displacementScale,E.displacementBias.value=q.displacementBias;if(q.emissiveMap)E.emissiveMap.value=q.emissiveMap,Z(q.emissiveMap,E.emissiveMapTransform);if(q.specularMap)E.specularMap.value=q.specularMap,Z(q.specularMap,E.specularMapTransform);if(q.alphaTest>0)E.alphaTest.value=q.alphaTest;const I=$.get(q).envMap;if(I)E.envMap.value=I,E.flipEnvMap.value=I.isCubeTexture&&I.isRenderTargetTexture===!1?-1:1,E.reflectivity.value=q.reflectivity,E.ior.value=q.ior,E.refractionRatio.value=q.refractionRatio;if(q.lightMap){E.lightMap.value=q.lightMap;const z=J._useLegacyLights===!0?Math.PI:1;E.lightMapIntensity.value=q.lightMapIntensity*z,Z(q.lightMap,E.lightMapTransform)}if(q.aoMap)E.aoMap.value=q.aoMap,E.aoMapIntensity.value=q.aoMapIntensity,Z(q.aoMap,E.aoMapTransform)}function H(E,q){if(E.diffuse.value.copy(q.color),E.opacity.value=q.opacity,q.map)E.map.value=q.map,Z(q.map,E.mapTransform)}function X(E,q){E.dashSize.value=q.dashSize,E.totalSize.value=q.dashSize+q.gapSize,E.scale.value=q.scale}function K(E,q,I,z){if(E.diffuse.value.copy(q.color),E.opacity.value=q.opacity,E.size.value=q.size*I,E.scale.value=z*0.5,q.map)E.map.value=q.map,Z(q.map,E.uvTransform);if(q.alphaMap)E.alphaMap.value=q.alphaMap,Z(q.alphaMap,E.alphaMapTransform);if(q.alphaTest>0)E.alphaTest.value=q.alphaTest}function G(E,q){if(E.diffuse.value.copy(q.color),E.opacity.value=q.opacity,E.rotation.value=q.rotation,q.map)E.map.value=q.map,Z(q.map,E.mapTransform);if(q.alphaMap)E.alphaMap.value=q.alphaMap,Z(q.alphaMap,E.alphaMapTransform);if(q.alphaTest>0)E.alphaTest.value=q.alphaTest}function U(E,q){E.specular.value.copy(q.specular),E.shininess.value=Math.max(q.shininess,0.0001)}function V(E,q){if(q.gradientMap)E.gradientMap.value=q.gradientMap}function R(E,q){if(E.metalness.value=q.metalness,q.metalnessMap)E.metalnessMap.value=q.metalnessMap,Z(q.metalnessMap,E.metalnessMapTransform);if(E.roughness.value=q.roughness,q.roughnessMap)E.roughnessMap.value=q.roughnessMap,Z(q.roughnessMap,E.roughnessMapTransform);if($.get(q).envMap)E.envMapIntensity.value=q.envMapIntensity}function D(E,q,I){if(E.ior.value=q.ior,q.sheen>0){if(E.sheenColor.value.copy(q.sheenColor).multiplyScalar(q.sheen),E.sheenRoughness.value=q.sheenRoughness,q.sheenColorMap)E.sheenColorMap.value=q.sheenColorMap,Z(q.sheenColorMap,E.sheenColorMapTransform);if(q.sheenRoughnessMap)E.sheenRoughnessMap.value=q.sheenRoughnessMap,Z(q.sheenRoughnessMap,E.sheenRoughnessMapTransform)}if(q.clearcoat>0){if(E.clearcoat.value=q.clearcoat,E.clearcoatRoughness.value=q.clearcoatRoughness,q.clearcoatMap)E.clearcoatMap.value=q.clearcoatMap,Z(q.clearcoatMap,E.clearcoatMapTransform);if(q.clearcoatRoughnessMap)E.clearcoatRoughnessMap.value=q.clearcoatRoughnessMap,Z(q.clearcoatRoughnessMap,E.clearcoatRoughnessMapTransform);if(q.clearcoatNormalMap){if(E.clearcoatNormalMap.value=q.clearcoatNormalMap,Z(q.clearcoatNormalMap,E.clearcoatNormalMapTransform),E.clearcoatNormalScale.value.copy(q.clearcoatNormalScale),q.side===1)E.clearcoatNormalScale.value.negate()}}if(q.iridescence>0){if(E.iridescence.value=q.iridescence,E.iridescenceIOR.value=q.iridescenceIOR,E.iridescenceThicknessMinimum.value=q.iridescenceThicknessRange[0],E.iridescenceThicknessMaximum.value=q.iridescenceThicknessRange[1],q.iridescenceMap)E.iridescenceMap.value=q.iridescenceMap,Z(q.iridescenceMap,E.iridescenceMapTransform);if(q.iridescenceThicknessMap)E.iridescenceThicknessMap.value=q.iridescenceThicknessMap,Z(q.iridescenceThicknessMap,E.iridescenceThicknessMapTransform)}if(q.transmission>0){if(E.transmission.value=q.transmission,E.transmissionSamplerMap.value=I.texture,E.transmissionSamplerSize.value.set(I.width,I.height),q.transmissionMap)E.transmissionMap.value=q.transmissionMap,Z(q.transmissionMap,E.transmissionMapTransform);if(E.thickness.value=q.thickness,q.thicknessMap)E.thicknessMap.value=q.thicknessMap,Z(q.thicknessMap,E.thicknessMapTransform);E.attenuationDistance.value=q.attenuationDistance,E.attenuationColor.value.copy(q.attenuationColor)}if(q.anisotropy>0){if(E.anisotropyVector.value.set(q.anisotropy*Math.cos(q.anisotropyRotation),q.anisotropy*Math.sin(q.anisotropyRotation)),q.anisotropyMap)E.anisotropyMap.value=q.anisotropyMap,Z(q.anisotropyMap,E.anisotropyMapTransform)}if(E.specularIntensity.value=q.specularIntensity,E.specularColor.value.copy(q.specularColor),q.specularColorMap)E.specularColorMap.value=q.specularColorMap,Z(q.specularColorMap,E.specularColorMapTransform);if(q.specularIntensityMap)E.specularIntensityMap.value=q.specularIntensityMap,Z(q.specularIntensityMap,E.specularIntensityMapTransform)}function M(E,q){if(q.matcap)E.matcap.value=q.matcap}function O(E,q){const I=$.get(q).light;E.referencePosition.value.setFromMatrixPosition(I.matrixWorld),E.nearDistance.value=I.shadow.camera.near,E.farDistance.value=I.shadow.camera.far}return{refreshFogUniforms:Q,refreshMaterialUniforms:W}},jW=function(J,$,Z,Q){let W={},Y={},H=[];const X=Z.isWebGL2?J.getParameter(J.MAX_UNIFORM_BUFFER_BINDINGS):0;function K(I,z){const A=z.program;Q.uniformBlockBinding(I,A)}function G(I,z){let A=W[I.id];if(A===void 0)M(I),A=U(I),W[I.id]=A,I.addEventListener("dispose",E);const L=z.program;Q.updateUBOMapping(I,L);const w=$.render.frame;if(Y[I.id]!==w)R(I),Y[I.id]=w}function U(I){const z=V();I.__bindingPointIndex=z;const A=J.createBuffer(),L=I.__size,w=I.usage;return J.bindBuffer(J.UNIFORM_BUFFER,A),J.bufferData(J.UNIFORM_BUFFER,L,w),J.bindBuffer(J.UNIFORM_BUFFER,null),J.bindBufferBase(J.UNIFORM_BUFFER,z,A),A}function V(){for(let I=0;I<X;I++)if(H.indexOf(I)===-1)return H.push(I),I;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function R(I){const z=W[I.id],A=I.uniforms,L=I.__cache;J.bindBuffer(J.UNIFORM_BUFFER,z);for(let w=0,g=A.length;w<g;w++){const u=A[w];if(D(u,w,L)===!0){const N=u.__offset,C=Array.isArray(u.value)?u.value:[u.value];let m=0;for(let e=0;e<C.length;e++){const W0=C[e],P=O(W0);if(typeof W0==="number")u.__data[0]=W0,J.bufferSubData(J.UNIFORM_BUFFER,N+m,u.__data);else if(W0.isMatrix3)u.__data[0]=W0.elements[0],u.__data[1]=W0.elements[1],u.__data[2]=W0.elements[2],u.__data[3]=W0.elements[0],u.__data[4]=W0.elements[3],u.__data[5]=W0.elements[4],u.__data[6]=W0.elements[5],u.__data[7]=W0.elements[0],u.__data[8]=W0.elements[6],u.__data[9]=W0.elements[7],u.__data[10]=W0.elements[8],u.__data[11]=W0.elements[0];else W0.toArray(u.__data,m),m+=P.storage/Float32Array.BYTES_PER_ELEMENT}J.bufferSubData(J.UNIFORM_BUFFER,N,u.__data)}}J.bindBuffer(J.UNIFORM_BUFFER,null)}function D(I,z,A){const L=I.value;if(A[z]===void 0){if(typeof L==="number")A[z]=L;else{const w=Array.isArray(L)?L:[L],g=[];for(let u=0;u<w.length;u++)g.push(w[u].clone());A[z]=g}return!0}else if(typeof L==="number"){if(A[z]!==L)return A[z]=L,!0}else{const w=Array.isArray(A[z])?A[z]:[A[z]],g=Array.isArray(L)?L:[L];for(let u=0;u<w.length;u++){const N=w[u];if(N.equals(g[u])===!1)return N.copy(g[u]),!0}}return!1}function M(I){const z=I.uniforms;let A=0;const L=16;let w=0;for(let g=0,u=z.length;g<u;g++){const N=z[g],C={boundary:0,storage:0},m=Array.isArray(N.value)?N.value:[N.value];for(let e=0,W0=m.length;e<W0;e++){const P=m[e],l=O(P);C.boundary+=l.boundary,C.storage+=l.storage}if(N.__data=new Float32Array(C.storage/Float32Array.BYTES_PER_ELEMENT),N.__offset=A,g>0){w=A%L;const e=L-w;if(w!==0&&e-C.boundary<0)A+=L-w,N.__offset=A}A+=C.storage}if(w=A%L,w>0)A+=L-w;return I.__size=A,I.__cache={},this}function O(I){const z={boundary:0,storage:0};if(typeof I==="number")z.boundary=4,z.storage=4;else if(I.isVector2)z.boundary=8,z.storage=8;else if(I.isVector3||I.isColor)z.boundary=16,z.storage=12;else if(I.isVector4)z.boundary=16,z.storage=16;else if(I.isMatrix3)z.boundary=48,z.storage=48;else if(I.isMatrix4)z.boundary=64,z.storage=64;else if(I.isTexture)console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");else console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",I);return z}function E(I){const z=I.target;z.removeEventListener("dispose",E);const A=H.indexOf(z.__bindingPointIndex);H.splice(A,1),J.deleteBuffer(W[z.id]),delete W[z.id],delete Y[z.id]}function q(){for(let I in W)J.deleteBuffer(W[I]);H=[],W={},Y={}}return{bind:K,update:G,dispose:q}};var X9=function(J,$,Z,Q,W,Y,H){const X=t7.distanceSqToPoint(J);if(X<Z){const K=new v;t7.closestPointToPoint(J,K),K.applyMatrix4(Q);const G=W.ray.origin.distanceTo(K);if(G<W.near||G>W.far)return;Y.push({distance:G,distanceToRay:Math.sqrt(X),point:K,index:$,face:null,object:H})}};var R7=function(J,$,Z){if(!J||!Z&&J.constructor===$)return J;if(typeof $.BYTES_PER_ELEMENT==="number")return new $(J);return Array.prototype.slice.call(J)},bW=function(J){return ArrayBuffer.isView(J)&&!(J instanceof DataView)};class Z6{addEventListener(J,$){if(this._listeners===void 0)this._listeners={};const Z=this._listeners;if(Z[J]===void 0)Z[J]=[];if(Z[J].indexOf($)===-1)Z[J].push($)}hasEventListener(J,$){if(this._listeners===void 0)return!1;const Z=this._listeners;return Z[J]!==void 0&&Z[J].indexOf($)!==-1}removeEventListener(J,$){if(this._listeners===void 0)return;const Q=this._listeners[J];if(Q!==void 0){const W=Q.indexOf($);if(W!==-1)Q.splice(W,1)}}dispatchEvent(J){if(this._listeners===void 0)return;const Z=this._listeners[J.type];if(Z!==void 0){J.target=this;const Q=Z.slice(0);for(let W=0,Y=Q.length;W<Y;W++)Q[W].call(this,J);J.target=null}}}var XJ=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];var C7=Math.PI/180,o7=180/Math.PI;class m0{constructor(J=0,$=0){m0.prototype.isVector2=!0,this.x=J,this.y=$}get width(){return this.x}set width(J){this.x=J}get height(){return this.y}set height(J){this.y=J}set(J,$){return this.x=J,this.y=$,this}setScalar(J){return this.x=J,this.y=J,this}setX(J){return this.x=J,this}setY(J){return this.y=J,this}setComponent(J,$){switch(J){case 0:this.x=$;break;case 1:this.y=$;break;default:throw new Error("index is out of range: "+J)}return this}getComponent(J){switch(J){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+J)}}clone(){return new this.constructor(this.x,this.y)}copy(J){return this.x=J.x,this.y=J.y,this}add(J){return this.x+=J.x,this.y+=J.y,this}addScalar(J){return this.x+=J,this.y+=J,this}addVectors(J,$){return this.x=J.x+$.x,this.y=J.y+$.y,this}addScaledVector(J,$){return this.x+=J.x*$,this.y+=J.y*$,this}sub(J){return this.x-=J.x,this.y-=J.y,this}subScalar(J){return this.x-=J,this.y-=J,this}subVectors(J,$){return this.x=J.x-$.x,this.y=J.y-$.y,this}multiply(J){return this.x*=J.x,this.y*=J.y,this}multiplyScalar(J){return this.x*=J,this.y*=J,this}divide(J){return this.x/=J.x,this.y/=J.y,this}divideScalar(J){return this.multiplyScalar(1/J)}applyMatrix3(J){const $=this.x,Z=this.y,Q=J.elements;return this.x=Q[0]*$+Q[3]*Z+Q[6],this.y=Q[1]*$+Q[4]*Z+Q[7],this}min(J){return this.x=Math.min(this.x,J.x),this.y=Math.min(this.y,J.y),this}max(J){return this.x=Math.max(this.x,J.x),this.y=Math.max(this.y,J.y),this}clamp(J,$){return this.x=Math.max(J.x,Math.min($.x,this.x)),this.y=Math.max(J.y,Math.min($.y,this.y)),this}clampScalar(J,$){return this.x=Math.max(J,Math.min($,this.x)),this.y=Math.max(J,Math.min($,this.y)),this}clampLength(J,$){const Z=this.length();return this.divideScalar(Z||1).multiplyScalar(Math.max(J,Math.min($,Z)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(J){return this.x*J.x+this.y*J.y}cross(J){return this.x*J.y-this.y*J.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(J){const $=Math.sqrt(this.lengthSq()*J.lengthSq());if($===0)return Math.PI/2;const Z=this.dot(J)/$;return Math.acos(RJ(Z,-1,1))}distanceTo(J){return Math.sqrt(this.distanceToSquared(J))}distanceToSquared(J){const $=this.x-J.x,Z=this.y-J.y;return $*$+Z*Z}manhattanDistanceTo(J){return Math.abs(this.x-J.x)+Math.abs(this.y-J.y)}setLength(J){return this.normalize().multiplyScalar(J)}lerp(J,$){return this.x+=(J.x-this.x)*$,this.y+=(J.y-this.y)*$,this}lerpVectors(J,$,Z){return this.x=J.x+($.x-J.x)*Z,this.y=J.y+($.y-J.y)*Z,this}equals(J){return J.x===this.x&&J.y===this.y}fromArray(J,$=0){return this.x=J[$],this.y=J[$+1],this}toArray(J=[],$=0){return J[$]=this.x,J[$+1]=this.y,J}fromBufferAttribute(J,$){return this.x=J.getX($),this.y=J.getY($),this}rotateAround(J,$){const Z=Math.cos($),Q=Math.sin($),W=this.x-J.x,Y=this.y-J.y;return this.x=W*Z-Y*Q+J.x,this.y=W*Q+Y*Z+J.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class A0{constructor(J,$,Z,Q,W,Y,H,X,K){if(A0.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],J!==void 0)this.set(J,$,Z,Q,W,Y,H,X,K)}set(J,$,Z,Q,W,Y,H,X,K){const G=this.elements;return G[0]=J,G[1]=Q,G[2]=H,G[3]=$,G[4]=W,G[5]=X,G[6]=Z,G[7]=Y,G[8]=K,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(J){const $=this.elements,Z=J.elements;return $[0]=Z[0],$[1]=Z[1],$[2]=Z[2],$[3]=Z[3],$[4]=Z[4],$[5]=Z[5],$[6]=Z[6],$[7]=Z[7],$[8]=Z[8],this}extractBasis(J,$,Z){return J.setFromMatrix3Column(this,0),$.setFromMatrix3Column(this,1),Z.setFromMatrix3Column(this,2),this}setFromMatrix4(J){const $=J.elements;return this.set($[0],$[4],$[8],$[1],$[5],$[9],$[2],$[6],$[10]),this}multiply(J){return this.multiplyMatrices(this,J)}premultiply(J){return this.multiplyMatrices(J,this)}multiplyMatrices(J,$){const Z=J.elements,Q=$.elements,W=this.elements,Y=Z[0],H=Z[3],X=Z[6],K=Z[1],G=Z[4],U=Z[7],V=Z[2],R=Z[5],D=Z[8],M=Q[0],O=Q[3],E=Q[6],q=Q[1],I=Q[4],z=Q[7],A=Q[2],L=Q[5],w=Q[8];return W[0]=Y*M+H*q+X*A,W[3]=Y*O+H*I+X*L,W[6]=Y*E+H*z+X*w,W[1]=K*M+G*q+U*A,W[4]=K*O+G*I+U*L,W[7]=K*E+G*z+U*w,W[2]=V*M+R*q+D*A,W[5]=V*O+R*I+D*L,W[8]=V*E+R*z+D*w,this}multiplyScalar(J){const $=this.elements;return $[0]*=J,$[3]*=J,$[6]*=J,$[1]*=J,$[4]*=J,$[7]*=J,$[2]*=J,$[5]*=J,$[8]*=J,this}determinant(){const J=this.elements,$=J[0],Z=J[1],Q=J[2],W=J[3],Y=J[4],H=J[5],X=J[6],K=J[7],G=J[8];return $*Y*G-$*H*K-Z*W*G+Z*H*X+Q*W*K-Q*Y*X}invert(){const J=this.elements,$=J[0],Z=J[1],Q=J[2],W=J[3],Y=J[4],H=J[5],X=J[6],K=J[7],G=J[8],U=G*Y-H*K,V=H*X-G*W,R=K*W-Y*X,D=$*U+Z*V+Q*R;if(D===0)return this.set(0,0,0,0,0,0,0,0,0);const M=1/D;return J[0]=U*M,J[1]=(Q*K-G*Z)*M,J[2]=(H*Z-Q*Y)*M,J[3]=V*M,J[4]=(G*$-Q*X)*M,J[5]=(Q*W-H*$)*M,J[6]=R*M,J[7]=(Z*X-K*$)*M,J[8]=(Y*$-Z*W)*M,this}transpose(){let J;const $=this.elements;return J=$[1],$[1]=$[3],$[3]=J,J=$[2],$[2]=$[6],$[6]=J,J=$[5],$[5]=$[7],$[7]=J,this}getNormalMatrix(J){return this.setFromMatrix4(J).invert().transpose()}transposeIntoArray(J){const $=this.elements;return J[0]=$[0],J[1]=$[3],J[2]=$[6],J[3]=$[1],J[4]=$[4],J[5]=$[7],J[6]=$[2],J[7]=$[5],J[8]=$[8],this}setUvTransform(J,$,Z,Q,W,Y,H){const X=Math.cos(W),K=Math.sin(W);return this.set(Z*X,Z*K,-Z*(X*Y+K*H)+Y+J,-Q*K,Q*X,-Q*(-K*Y+X*H)+H+$,0,0,1),this}scale(J,$){return this.premultiply(A7.makeScale(J,$)),this}rotate(J){return this.premultiply(A7.makeRotation(-J)),this}translate(J,$){return this.premultiply(A7.makeTranslation(J,$)),this}makeTranslation(J,$){if(J.isVector2)this.set(1,0,J.x,0,1,J.y,0,0,1);else this.set(1,0,J,0,1,$,0,0,1);return this}makeRotation(J){const $=Math.cos(J),Z=Math.sin(J);return this.set($,-Z,0,Z,$,0,0,0,1),this}makeScale(J,$){return this.set(J,0,0,0,$,0,0,0,1),this}equals(J){const $=this.elements,Z=J.elements;for(let Q=0;Q<9;Q++)if($[Q]!==Z[Q])return!1;return!0}fromArray(J,$=0){for(let Z=0;Z<9;Z++)this.elements[Z]=J[Z+$];return this}toArray(J=[],$=0){const Z=this.elements;return J[$]=Z[0],J[$+1]=Z[1],J[$+2]=Z[2],J[$+3]=Z[3],J[$+4]=Z[4],J[$+5]=Z[5],J[$+6]=Z[6],J[$+7]=Z[7],J[$+8]=Z[8],J}clone(){return new this.constructor().fromArray(this.elements)}}var A7=new A0;var B8={},I8=new A0().set(0.8224621,0.177538,0,0.0331941,0.9668058,0,0.0170827,0.0723974,0.9105199),w8=new A0().set(1.2249401,-0.2249404,0,-0.0420569,1.0420571,0,-0.0196376,-0.0786361,1.0982735),d6={["srgb-linear"]:{transfer:"linear",primaries:"rec709",toReference:(J)=>J,fromReference:(J)=>J},["srgb"]:{transfer:"srgb",primaries:"rec709",toReference:(J)=>J.convertSRGBToLinear(),fromReference:(J)=>J.convertLinearToSRGB()},["display-p3-linear"]:{transfer:"linear",primaries:"p3",toReference:(J)=>J.applyMatrix3(w8),fromReference:(J)=>J.applyMatrix3(I8)},["display-p3"]:{transfer:"srgb",primaries:"p3",toReference:(J)=>J.convertSRGBToLinear().applyMatrix3(w8),fromReference:(J)=>J.applyMatrix3(I8).convertLinearToSRGB()}},i9=new Set(["srgb-linear","display-p3-linear"]),h0={enabled:!0,_workingColorSpace:"srgb-linear",get legacyMode(){return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),!this.enabled},set legacyMode(J){console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),this.enabled=!J},get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(J){if(!i9.has(J))throw new Error(`Unsupported working color space, "${J}".`);this._workingColorSpace=J},convert:function(J,$,Z){if(this.enabled===!1||$===Z||!$||!Z)return J;const Q=d6[$].toReference,W=d6[Z].fromReference;return W(Q(J))},fromWorkingColorSpace:function(J,$){return this.convert(J,this._workingColorSpace,$)},toWorkingColorSpace:function(J,$){return this.convert(J,$,this._workingColorSpace)},getPrimaries:function(J){return d6[J].primaries},getTransfer:function(J){if(J==="")return"linear";return d6[J].transfer}},W6;class e7{static getDataURL(J){if(/^data:/i.test(J.src))return J.src;if(typeof HTMLCanvasElement==="undefined")return J.src;let $;if(J instanceof HTMLCanvasElement)$=J;else{if(W6===void 0)W6=D7("canvas");W6.width=J.width,W6.height=J.height;const Z=W6.getContext("2d");if(J instanceof ImageData)Z.putImageData(J,0,0);else Z.drawImage(J,0,0,J.width,J.height);$=W6}if($.width>2048||$.height>2048)return console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",J),$.toDataURL("image/jpeg",0.6);else return $.toDataURL("image/png")}static sRGBToLinear(J){if(typeof HTMLImageElement!=="undefined"&&J instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&J instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&J instanceof ImageBitmap){const $=D7("canvas");$.width=J.width,$.height=J.height;const Z=$.getContext("2d");Z.drawImage(J,0,0,J.width,J.height);const Q=Z.getImageData(0,0,J.width,J.height),W=Q.data;for(let Y=0;Y<W.length;Y++)W[Y]=z6(W[Y]/255)*255;return Z.putImageData(Q,0,0),$}else if(J.data){const $=J.data.slice(0);for(let Z=0;Z<$.length;Z++)if($ instanceof Uint8Array||$ instanceof Uint8ClampedArray)$[Z]=Math.floor(z6($[Z]/255)*255);else $[Z]=z6($[Z]);return{data:$,width:J.width,height:J.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),J}}var r9=0;class J8{constructor(J=null){this.isSource=!0,Object.defineProperty(this,"id",{value:r9++}),this.uuid=h6(),this.data=J,this.version=0}set needsUpdate(J){if(J===!0)this.version++}toJSON(J){const $=J===void 0||typeof J==="string";if(!$&&J.images[this.uuid]!==void 0)return J.images[this.uuid];const Z={uuid:this.uuid,url:""},Q=this.data;if(Q!==null){let W;if(Array.isArray(Q)){W=[];for(let Y=0,H=Q.length;Y<H;Y++)if(Q[Y].isDataTexture)W.push(T7(Q[Y].image));else W.push(T7(Q[Y]))}else W=T7(Q);Z.url=W}if(!$)J.images[this.uuid]=Z;return Z}}var a9=0;class MJ extends Z6{constructor(J=MJ.DEFAULT_IMAGE,$=MJ.DEFAULT_MAPPING,Z=1001,Q=1001,W=1006,Y=1008,H=1023,X=1009,K=MJ.DEFAULT_ANISOTROPY,G=""){super();if(this.isTexture=!0,Object.defineProperty(this,"id",{value:a9++}),this.uuid=h6(),this.name="",this.source=new J8(J),this.mipmaps=[],this.mapping=$,this.channel=0,this.wrapS=Z,this.wrapT=Q,this.magFilter=W,this.minFilter=Y,this.anisotropy=K,this.format=H,this.internalFormat=null,this.type=X,this.offset=new m0(0,0),this.repeat=new m0(1,1),this.center=new m0(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new A0,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,typeof G==="string")this.colorSpace=G;else b6("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=G===3001?"srgb":"";this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(J=null){this.source.data=J}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(J){return this.name=J.name,this.source=J.source,this.mipmaps=J.mipmaps.slice(0),this.mapping=J.mapping,this.channel=J.channel,this.wrapS=J.wrapS,this.wrapT=J.wrapT,this.magFilter=J.magFilter,this.minFilter=J.minFilter,this.anisotropy=J.anisotropy,this.format=J.format,this.internalFormat=J.internalFormat,this.type=J.type,this.offset.copy(J.offset),this.repeat.copy(J.repeat),this.center.copy(J.center),this.rotation=J.rotation,this.matrixAutoUpdate=J.matrixAutoUpdate,this.matrix.copy(J.matrix),this.generateMipmaps=J.generateMipmaps,this.premultiplyAlpha=J.premultiplyAlpha,this.flipY=J.flipY,this.unpackAlignment=J.unpackAlignment,this.colorSpace=J.colorSpace,this.userData=JSON.parse(JSON.stringify(J.userData)),this.needsUpdate=!0,this}toJSON(J){const $=J===void 0||typeof J==="string";if(!$&&J.textures[this.uuid]!==void 0)return J.textures[this.uuid];const Z={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(J).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(Object.keys(this.userData).length>0)Z.userData=this.userData;if(!$)J.textures[this.uuid]=Z;return Z}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(J){if(this.mapping!==300)return J;if(J.applyMatrix3(this.matrix),J.x<0||J.x>1)switch(this.wrapS){case 1000:J.x=J.x-Math.floor(J.x);break;case 1001:J.x=J.x<0?0:1;break;case 1002:if(Math.abs(Math.floor(J.x)%2)===1)J.x=Math.ceil(J.x)-J.x;else J.x=J.x-Math.floor(J.x);break}if(J.y<0||J.y>1)switch(this.wrapT){case 1000:J.y=J.y-Math.floor(J.y);break;case 1001:J.y=J.y<0?0:1;break;case 1002:if(Math.abs(Math.floor(J.y)%2)===1)J.y=Math.ceil(J.y)-J.y;else J.y=J.y-Math.floor(J.y);break}if(this.flipY)J.y=1-J.y;return J}set needsUpdate(J){if(J===!0)this.version++,this.source.needsUpdate=!0}get encoding(){return b6("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace==="srgb"?3001:3000}set encoding(J){b6("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=J===3001?"srgb":""}}MJ.DEFAULT_IMAGE=null;MJ.DEFAULT_MAPPING=300;MJ.DEFAULT_ANISOTROPY=1;class QJ{constructor(J=0,$=0,Z=0,Q=1){QJ.prototype.isVector4=!0,this.x=J,this.y=$,this.z=Z,this.w=Q}get width(){return this.z}set width(J){this.z=J}get height(){return this.w}set height(J){this.w=J}set(J,$,Z,Q){return this.x=J,this.y=$,this.z=Z,this.w=Q,this}setScalar(J){return this.x=J,this.y=J,this.z=J,this.w=J,this}setX(J){return this.x=J,this}setY(J){return this.y=J,this}setZ(J){return this.z=J,this}setW(J){return this.w=J,this}setComponent(J,$){switch(J){case 0:this.x=$;break;case 1:this.y=$;break;case 2:this.z=$;break;case 3:this.w=$;break;default:throw new Error("index is out of range: "+J)}return this}getComponent(J){switch(J){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+J)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(J){return this.x=J.x,this.y=J.y,this.z=J.z,this.w=J.w!==void 0?J.w:1,this}add(J){return this.x+=J.x,this.y+=J.y,this.z+=J.z,this.w+=J.w,this}addScalar(J){return this.x+=J,this.y+=J,this.z+=J,this.w+=J,this}addVectors(J,$){return this.x=J.x+$.x,this.y=J.y+$.y,this.z=J.z+$.z,this.w=J.w+$.w,this}addScaledVector(J,$){return this.x+=J.x*$,this.y+=J.y*$,this.z+=J.z*$,this.w+=J.w*$,this}sub(J){return this.x-=J.x,this.y-=J.y,this.z-=J.z,this.w-=J.w,this}subScalar(J){return this.x-=J,this.y-=J,this.z-=J,this.w-=J,this}subVectors(J,$){return this.x=J.x-$.x,this.y=J.y-$.y,this.z=J.z-$.z,this.w=J.w-$.w,this}multiply(J){return this.x*=J.x,this.y*=J.y,this.z*=J.z,this.w*=J.w,this}multiplyScalar(J){return this.x*=J,this.y*=J,this.z*=J,this.w*=J,this}applyMatrix4(J){const $=this.x,Z=this.y,Q=this.z,W=this.w,Y=J.elements;return this.x=Y[0]*$+Y[4]*Z+Y[8]*Q+Y[12]*W,this.y=Y[1]*$+Y[5]*Z+Y[9]*Q+Y[13]*W,this.z=Y[2]*$+Y[6]*Z+Y[10]*Q+Y[14]*W,this.w=Y[3]*$+Y[7]*Z+Y[11]*Q+Y[15]*W,this}divideScalar(J){return this.multiplyScalar(1/J)}setAxisAngleFromQuaternion(J){this.w=2*Math.acos(J.w);const $=Math.sqrt(1-J.w*J.w);if($<0.0001)this.x=1,this.y=0,this.z=0;else this.x=J.x/$,this.y=J.y/$,this.z=J.z/$;return this}setAxisAngleFromRotationMatrix(J){let $,Z,Q,W;const Y=0.01,H=0.1,X=J.elements,K=X[0],G=X[4],U=X[8],V=X[1],R=X[5],D=X[9],M=X[2],O=X[6],E=X[10];if(Math.abs(G-V)<0.01&&Math.abs(U-M)<0.01&&Math.abs(D-O)<0.01){if(Math.abs(G+V)<0.1&&Math.abs(U+M)<0.1&&Math.abs(D+O)<0.1&&Math.abs(K+R+E-3)<0.1)return this.set(1,0,0,0),this;$=Math.PI;const I=(K+1)/2,z=(R+1)/2,A=(E+1)/2,L=(G+V)/4,w=(U+M)/4,g=(D+O)/4;if(I>z&&I>A)if(I<0.01)Z=0,Q=0.707106781,W=0.707106781;else Z=Math.sqrt(I),Q=L/Z,W=w/Z;else if(z>A)if(z<0.01)Z=0.707106781,Q=0,W=0.707106781;else Q=Math.sqrt(z),Z=L/Q,W=g/Q;else if(A<0.01)Z=0.707106781,Q=0.707106781,W=0;else W=Math.sqrt(A),Z=w/W,Q=g/W;return this.set(Z,Q,W,$),this}let q=Math.sqrt((O-D)*(O-D)+(U-M)*(U-M)+(V-G)*(V-G));if(Math.abs(q)<0.001)q=1;return this.x=(O-D)/q,this.y=(U-M)/q,this.z=(V-G)/q,this.w=Math.acos((K+R+E-1)/2),this}min(J){return this.x=Math.min(this.x,J.x),this.y=Math.min(this.y,J.y),this.z=Math.min(this.z,J.z),this.w=Math.min(this.w,J.w),this}max(J){return this.x=Math.max(this.x,J.x),this.y=Math.max(this.y,J.y),this.z=Math.max(this.z,J.z),this.w=Math.max(this.w,J.w),this}clamp(J,$){return this.x=Math.max(J.x,Math.min($.x,this.x)),this.y=Math.max(J.y,Math.min($.y,this.y)),this.z=Math.max(J.z,Math.min($.z,this.z)),this.w=Math.max(J.w,Math.min($.w,this.w)),this}clampScalar(J,$){return this.x=Math.max(J,Math.min($,this.x)),this.y=Math.max(J,Math.min($,this.y)),this.z=Math.max(J,Math.min($,this.z)),this.w=Math.max(J,Math.min($,this.w)),this}clampLength(J,$){const Z=this.length();return this.divideScalar(Z||1).multiplyScalar(Math.max(J,Math.min($,Z)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(J){return this.x*J.x+this.y*J.y+this.z*J.z+this.w*J.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(J){return this.normalize().multiplyScalar(J)}lerp(J,$){return this.x+=(J.x-this.x)*$,this.y+=(J.y-this.y)*$,this.z+=(J.z-this.z)*$,this.w+=(J.w-this.w)*$,this}lerpVectors(J,$,Z){return this.x=J.x+($.x-J.x)*Z,this.y=J.y+($.y-J.y)*Z,this.z=J.z+($.z-J.z)*Z,this.w=J.w+($.w-J.w)*Z,this}equals(J){return J.x===this.x&&J.y===this.y&&J.z===this.z&&J.w===this.w}fromArray(J,$=0){return this.x=J[$],this.y=J[$+1],this.z=J[$+2],this.w=J[$+3],this}toArray(J=[],$=0){return J[$]=this.x,J[$+1]=this.y,J[$+2]=this.z,J[$+3]=this.w,J}fromBufferAttribute(J,$){return this.x=J.getX($),this.y=J.getY($),this.z=J.getZ($),this.w=J.getW($),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class K9 extends Z6{constructor(J=1,$=1,Z={}){super();this.isRenderTarget=!0,this.width=J,this.height=$,this.depth=1,this.scissor=new QJ(0,0,J,$),this.scissorTest=!1,this.viewport=new QJ(0,0,J,$);const Q={width:J,height:$,depth:1};if(Z.encoding!==void 0)b6("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."),Z.colorSpace=Z.encoding===3001?"srgb":"";Z=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:1006,depthBuffer:!0,stencilBuffer:!1,depthTexture:null,samples:0},Z),this.texture=new MJ(Q,Z.mapping,Z.wrapS,Z.wrapT,Z.magFilter,Z.minFilter,Z.format,Z.type,Z.anisotropy,Z.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=Z.generateMipmaps,this.texture.internalFormat=Z.internalFormat,this.depthBuffer=Z.depthBuffer,this.stencilBuffer=Z.stencilBuffer,this.depthTexture=Z.depthTexture,this.samples=Z.samples}setSize(J,$,Z=1){if(this.width!==J||this.height!==$||this.depth!==Z)this.width=J,this.height=$,this.depth=Z,this.texture.image.width=J,this.texture.image.height=$,this.texture.image.depth=Z,this.dispose();this.viewport.set(0,0,J,$),this.scissor.set(0,0,J,$)}clone(){return new this.constructor().copy(this)}copy(J){this.width=J.width,this.height=J.height,this.depth=J.depth,this.scissor.copy(J.scissor),this.scissorTest=J.scissorTest,this.viewport.copy(J.viewport),this.texture=J.texture.clone(),this.texture.isRenderTargetTexture=!0;const $=Object.assign({},J.texture.image);if(this.texture.source=new J8($),this.depthBuffer=J.depthBuffer,this.stencilBuffer=J.stencilBuffer,J.depthTexture!==null)this.depthTexture=J.depthTexture.clone();return this.samples=J.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class nJ extends K9{constructor(J=1,$=1,Z={}){super(J,$,Z);this.isWebGLRenderTarget=!0}}class $8 extends MJ{constructor(J=null,$=1,Z=1,Q=1){super(null);this.isDataArrayTexture=!0,this.image={data:J,width:$,height:Z,depth:Q},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class G9 extends MJ{constructor(J=null,$=1,Z=1,Q=1){super(null);this.isData3DTexture=!0,this.image={data:J,width:$,height:Z,depth:Q},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Q6{constructor(J=0,$=0,Z=0,Q=1){this.isQuaternion=!0,this._x=J,this._y=$,this._z=Z,this._w=Q}static slerpFlat(J,$,Z,Q,W,Y,H){let X=Z[Q+0],K=Z[Q+1],G=Z[Q+2],U=Z[Q+3];const V=W[Y+0],R=W[Y+1],D=W[Y+2],M=W[Y+3];if(H===0){J[$+0]=X,J[$+1]=K,J[$+2]=G,J[$+3]=U;return}if(H===1){J[$+0]=V,J[$+1]=R,J[$+2]=D,J[$+3]=M;return}if(U!==M||X!==V||K!==R||G!==D){let O=1-H;const E=X*V+K*R+G*D+U*M,q=E>=0?1:-1,I=1-E*E;if(I>Number.EPSILON){const A=Math.sqrt(I),L=Math.atan2(A,E*q);O=Math.sin(O*L)/A,H=Math.sin(H*L)/A}const z=H*q;if(X=X*O+V*z,K=K*O+R*z,G=G*O+D*z,U=U*O+M*z,O===1-H){const A=1/Math.sqrt(X*X+K*K+G*G+U*U);X*=A,K*=A,G*=A,U*=A}}J[$]=X,J[$+1]=K,J[$+2]=G,J[$+3]=U}static multiplyQuaternionsFlat(J,$,Z,Q,W,Y){const H=Z[Q],X=Z[Q+1],K=Z[Q+2],G=Z[Q+3],U=W[Y],V=W[Y+1],R=W[Y+2],D=W[Y+3];return J[$]=H*D+G*U+X*R-K*V,J[$+1]=X*D+G*V+K*U-H*R,J[$+2]=K*D+G*R+H*V-X*U,J[$+3]=G*D-H*U-X*V-K*R,J}get x(){return this._x}set x(J){this._x=J,this._onChangeCallback()}get y(){return this._y}set y(J){this._y=J,this._onChangeCallback()}get z(){return this._z}set z(J){this._z=J,this._onChangeCallback()}get w(){return this._w}set w(J){this._w=J,this._onChangeCallback()}set(J,$,Z,Q){return this._x=J,this._y=$,this._z=Z,this._w=Q,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(J){return this._x=J.x,this._y=J.y,this._z=J.z,this._w=J.w,this._onChangeCallback(),this}setFromEuler(J,$){const{_x:Z,_y:Q,_z:W,_order:Y}=J,H=Math.cos,X=Math.sin,K=H(Z/2),G=H(Q/2),U=H(W/2),V=X(Z/2),R=X(Q/2),D=X(W/2);switch(Y){case"XYZ":this._x=V*G*U+K*R*D,this._y=K*R*U-V*G*D,this._z=K*G*D+V*R*U,this._w=K*G*U-V*R*D;break;case"YXZ":this._x=V*G*U+K*R*D,this._y=K*R*U-V*G*D,this._z=K*G*D-V*R*U,this._w=K*G*U+V*R*D;break;case"ZXY":this._x=V*G*U-K*R*D,this._y=K*R*U+V*G*D,this._z=K*G*D+V*R*U,this._w=K*G*U-V*R*D;break;case"ZYX":this._x=V*G*U-K*R*D,this._y=K*R*U+V*G*D,this._z=K*G*D-V*R*U,this._w=K*G*U+V*R*D;break;case"YZX":this._x=V*G*U+K*R*D,this._y=K*R*U+V*G*D,this._z=K*G*D-V*R*U,this._w=K*G*U-V*R*D;break;case"XZY":this._x=V*G*U-K*R*D,this._y=K*R*U-V*G*D,this._z=K*G*D+V*R*U,this._w=K*G*U+V*R*D;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+Y)}if($!==!1)this._onChangeCallback();return this}setFromAxisAngle(J,$){const Z=$/2,Q=Math.sin(Z);return this._x=J.x*Q,this._y=J.y*Q,this._z=J.z*Q,this._w=Math.cos(Z),this._onChangeCallback(),this}setFromRotationMatrix(J){const $=J.elements,Z=$[0],Q=$[4],W=$[8],Y=$[1],H=$[5],X=$[9],K=$[2],G=$[6],U=$[10],V=Z+H+U;if(V>0){const R=0.5/Math.sqrt(V+1);this._w=0.25/R,this._x=(G-X)*R,this._y=(W-K)*R,this._z=(Y-Q)*R}else if(Z>H&&Z>U){const R=2*Math.sqrt(1+Z-H-U);this._w=(G-X)/R,this._x=0.25*R,this._y=(Q+Y)/R,this._z=(W+K)/R}else if(H>U){const R=2*Math.sqrt(1+H-Z-U);this._w=(W-K)/R,this._x=(Q+Y)/R,this._y=0.25*R,this._z=(X+G)/R}else{const R=2*Math.sqrt(1+U-Z-H);this._w=(Y-Q)/R,this._x=(W+K)/R,this._y=(X+G)/R,this._z=0.25*R}return this._onChangeCallback(),this}setFromUnitVectors(J,$){let Z=J.dot($)+1;if(Z<Number.EPSILON)if(Z=0,Math.abs(J.x)>Math.abs(J.z))this._x=-J.y,this._y=J.x,this._z=0,this._w=Z;else this._x=0,this._y=-J.z,this._z=J.y,this._w=Z;else this._x=J.y*$.z-J.z*$.y,this._y=J.z*$.x-J.x*$.z,this._z=J.x*$.y-J.y*$.x,this._w=Z;return this.normalize()}angleTo(J){return 2*Math.acos(Math.abs(RJ(this.dot(J),-1,1)))}rotateTowards(J,$){const Z=this.angleTo(J);if(Z===0)return this;const Q=Math.min(1,$/Z);return this.slerp(J,Q),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(J){return this._x*J._x+this._y*J._y+this._z*J._z+this._w*J._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let J=this.length();if(J===0)this._x=0,this._y=0,this._z=0,this._w=1;else J=1/J,this._x=this._x*J,this._y=this._y*J,this._z=this._z*J,this._w=this._w*J;return this._onChangeCallback(),this}multiply(J){return this.multiplyQuaternions(this,J)}premultiply(J){return this.multiplyQuaternions(J,this)}multiplyQuaternions(J,$){const{_x:Z,_y:Q,_z:W,_w:Y}=J,H=$._x,X=$._y,K=$._z,G=$._w;return this._x=Z*G+Y*H+Q*K-W*X,this._y=Q*G+Y*X+W*H-Z*K,this._z=W*G+Y*K+Z*X-Q*H,this._w=Y*G-Z*H-Q*X-W*K,this._onChangeCallback(),this}slerp(J,$){if($===0)return this;if($===1)return this.copy(J);const Z=this._x,Q=this._y,W=this._z,Y=this._w;let H=Y*J._w+Z*J._x+Q*J._y+W*J._z;if(H<0)this._w=-J._w,this._x=-J._x,this._y=-J._y,this._z=-J._z,H=-H;else this.copy(J);if(H>=1)return this._w=Y,this._x=Z,this._y=Q,this._z=W,this;const X=1-H*H;if(X<=Number.EPSILON){const R=1-$;return this._w=R*Y+$*this._w,this._x=R*Z+$*this._x,this._y=R*Q+$*this._y,this._z=R*W+$*this._z,this.normalize(),this._onChangeCallback(),this}const K=Math.sqrt(X),G=Math.atan2(K,H),U=Math.sin((1-$)*G)/K,V=Math.sin($*G)/K;return this._w=Y*U+this._w*V,this._x=Z*U+this._x*V,this._y=Q*U+this._y*V,this._z=W*U+this._z*V,this._onChangeCallback(),this}slerpQuaternions(J,$,Z){return this.copy(J).slerp($,Z)}random(){const J=Math.random(),$=Math.sqrt(1-J),Z=Math.sqrt(J),Q=2*Math.PI*Math.random(),W=2*Math.PI*Math.random();return this.set($*Math.cos(Q),Z*Math.sin(W),Z*Math.cos(W),$*Math.sin(Q))}equals(J){return J._x===this._x&&J._y===this._y&&J._z===this._z&&J._w===this._w}fromArray(J,$=0){return this._x=J[$],this._y=J[$+1],this._z=J[$+2],this._w=J[$+3],this._onChangeCallback(),this}toArray(J=[],$=0){return J[$]=this._x,J[$+1]=this._y,J[$+2]=this._z,J[$+3]=this._w,J}fromBufferAttribute(J,$){return this._x=J.getX($),this._y=J.getY($),this._z=J.getZ($),this._w=J.getW($),this}toJSON(){return this.toArray()}_onChange(J){return this._onChangeCallback=J,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class v{constructor(J=0,$=0,Z=0){v.prototype.isVector3=!0,this.x=J,this.y=$,this.z=Z}set(J,$,Z){if(Z===void 0)Z=this.z;return this.x=J,this.y=$,this.z=Z,this}setScalar(J){return this.x=J,this.y=J,this.z=J,this}setX(J){return this.x=J,this}setY(J){return this.y=J,this}setZ(J){return this.z=J,this}setComponent(J,$){switch(J){case 0:this.x=$;break;case 1:this.y=$;break;case 2:this.z=$;break;default:throw new Error("index is out of range: "+J)}return this}getComponent(J){switch(J){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+J)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(J){return this.x=J.x,this.y=J.y,this.z=J.z,this}add(J){return this.x+=J.x,this.y+=J.y,this.z+=J.z,this}addScalar(J){return this.x+=J,this.y+=J,this.z+=J,this}addVectors(J,$){return this.x=J.x+$.x,this.y=J.y+$.y,this.z=J.z+$.z,this}addScaledVector(J,$){return this.x+=J.x*$,this.y+=J.y*$,this.z+=J.z*$,this}sub(J){return this.x-=J.x,this.y-=J.y,this.z-=J.z,this}subScalar(J){return this.x-=J,this.y-=J,this.z-=J,this}subVectors(J,$){return this.x=J.x-$.x,this.y=J.y-$.y,this.z=J.z-$.z,this}multiply(J){return this.x*=J.x,this.y*=J.y,this.z*=J.z,this}multiplyScalar(J){return this.x*=J,this.y*=J,this.z*=J,this}multiplyVectors(J,$){return this.x=J.x*$.x,this.y=J.y*$.y,this.z=J.z*$.z,this}applyEuler(J){return this.applyQuaternion(k8.setFromEuler(J))}applyAxisAngle(J,$){return this.applyQuaternion(k8.setFromAxisAngle(J,$))}applyMatrix3(J){const $=this.x,Z=this.y,Q=this.z,W=J.elements;return this.x=W[0]*$+W[3]*Z+W[6]*Q,this.y=W[1]*$+W[4]*Z+W[7]*Q,this.z=W[2]*$+W[5]*Z+W[8]*Q,this}applyNormalMatrix(J){return this.applyMatrix3(J).normalize()}applyMatrix4(J){const $=this.x,Z=this.y,Q=this.z,W=J.elements,Y=1/(W[3]*$+W[7]*Z+W[11]*Q+W[15]);return this.x=(W[0]*$+W[4]*Z+W[8]*Q+W[12])*Y,this.y=(W[1]*$+W[5]*Z+W[9]*Q+W[13])*Y,this.z=(W[2]*$+W[6]*Z+W[10]*Q+W[14])*Y,this}applyQuaternion(J){const $=this.x,Z=this.y,Q=this.z,W=J.x,Y=J.y,H=J.z,X=J.w,K=X*$+Y*Q-H*Z,G=X*Z+H*$-W*Q,U=X*Q+W*Z-Y*$,V=-W*$-Y*Z-H*Q;return this.x=K*X+V*-W+G*-H-U*-Y,this.y=G*X+V*-Y+U*-W-K*-H,this.z=U*X+V*-H+K*-Y-G*-W,this}project(J){return this.applyMatrix4(J.matrixWorldInverse).applyMatrix4(J.projectionMatrix)}unproject(J){return this.applyMatrix4(J.projectionMatrixInverse).applyMatrix4(J.matrixWorld)}transformDirection(J){const $=this.x,Z=this.y,Q=this.z,W=J.elements;return this.x=W[0]*$+W[4]*Z+W[8]*Q,this.y=W[1]*$+W[5]*Z+W[9]*Q,this.z=W[2]*$+W[6]*Z+W[10]*Q,this.normalize()}divide(J){return this.x/=J.x,this.y/=J.y,this.z/=J.z,this}divideScalar(J){return this.multiplyScalar(1/J)}min(J){return this.x=Math.min(this.x,J.x),this.y=Math.min(this.y,J.y),this.z=Math.min(this.z,J.z),this}max(J){return this.x=Math.max(this.x,J.x),this.y=Math.max(this.y,J.y),this.z=Math.max(this.z,J.z),this}clamp(J,$){return this.x=Math.max(J.x,Math.min($.x,this.x)),this.y=Math.max(J.y,Math.min($.y,this.y)),this.z=Math.max(J.z,Math.min($.z,this.z)),this}clampScalar(J,$){return this.x=Math.max(J,Math.min($,this.x)),this.y=Math.max(J,Math.min($,this.y)),this.z=Math.max(J,Math.min($,this.z)),this}clampLength(J,$){const Z=this.length();return this.divideScalar(Z||1).multiplyScalar(Math.max(J,Math.min($,Z)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(J){return this.x*J.x+this.y*J.y+this.z*J.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(J){return this.normalize().multiplyScalar(J)}lerp(J,$){return this.x+=(J.x-this.x)*$,this.y+=(J.y-this.y)*$,this.z+=(J.z-this.z)*$,this}lerpVectors(J,$,Z){return this.x=J.x+($.x-J.x)*Z,this.y=J.y+($.y-J.y)*Z,this.z=J.z+($.z-J.z)*Z,this}cross(J){return this.crossVectors(this,J)}crossVectors(J,$){const{x:Z,y:Q,z:W}=J,Y=$.x,H=$.y,X=$.z;return this.x=Q*X-W*H,this.y=W*Y-Z*X,this.z=Z*H-Q*Y,this}projectOnVector(J){const $=J.lengthSq();if($===0)return this.set(0,0,0);const Z=J.dot(this)/$;return this.copy(J).multiplyScalar(Z)}projectOnPlane(J){return S7.copy(this).projectOnVector(J),this.sub(S7)}reflect(J){return this.sub(S7.copy(J).multiplyScalar(2*this.dot(J)))}angleTo(J){const $=Math.sqrt(this.lengthSq()*J.lengthSq());if($===0)return Math.PI/2;const Z=this.dot(J)/$;return Math.acos(RJ(Z,-1,1))}distanceTo(J){return Math.sqrt(this.distanceToSquared(J))}distanceToSquared(J){const $=this.x-J.x,Z=this.y-J.y,Q=this.z-J.z;return $*$+Z*Z+Q*Q}manhattanDistanceTo(J){return Math.abs(this.x-J.x)+Math.abs(this.y-J.y)+Math.abs(this.z-J.z)}setFromSpherical(J){return this.setFromSphericalCoords(J.radius,J.phi,J.theta)}setFromSphericalCoords(J,$,Z){const Q=Math.sin($)*J;return this.x=Q*Math.sin(Z),this.y=Math.cos($)*J,this.z=Q*Math.cos(Z),this}setFromCylindrical(J){return this.setFromCylindricalCoords(J.radius,J.theta,J.y)}setFromCylindricalCoords(J,$,Z){return this.x=J*Math.sin($),this.y=Z,this.z=J*Math.cos($),this}setFromMatrixPosition(J){const $=J.elements;return this.x=$[12],this.y=$[13],this.z=$[14],this}setFromMatrixScale(J){const $=this.setFromMatrixColumn(J,0).length(),Z=this.setFromMatrixColumn(J,1).length(),Q=this.setFromMatrixColumn(J,2).length();return this.x=$,this.y=Z,this.z=Q,this}setFromMatrixColumn(J,$){return this.fromArray(J.elements,$*4)}setFromMatrix3Column(J,$){return this.fromArray(J.elements,$*3)}setFromEuler(J){return this.x=J._x,this.y=J._y,this.z=J._z,this}setFromColor(J){return this.x=J.r,this.y=J.g,this.z=J.b,this}equals(J){return J.x===this.x&&J.y===this.y&&J.z===this.z}fromArray(J,$=0){return this.x=J[$],this.y=J[$+1],this.z=J[$+2],this}toArray(J=[],$=0){return J[$]=this.x,J[$+1]=this.y,J[$+2]=this.z,J}fromBufferAttribute(J,$){return this.x=J.getX($),this.y=J.getY($),this.z=J.getZ($),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const J=(Math.random()-0.5)*2,$=Math.random()*Math.PI*2,Z=Math.sqrt(1-J**2);return this.x=Z*Math.cos($),this.y=Z*Math.sin($),this.z=J,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}var S7=new v,k8=new Q6;class I6{constructor(J=new v(Infinity,Infinity,Infinity),$=new v((-Infinity),(-Infinity),(-Infinity))){this.isBox3=!0,this.min=J,this.max=$}set(J,$){return this.min.copy(J),this.max.copy($),this}setFromArray(J){this.makeEmpty();for(let $=0,Z=J.length;$<Z;$+=3)this.expandByPoint(fJ.fromArray(J,$));return this}setFromBufferAttribute(J){this.makeEmpty();for(let $=0,Z=J.count;$<Z;$++)this.expandByPoint(fJ.fromBufferAttribute(J,$));return this}setFromPoints(J){this.makeEmpty();for(let $=0,Z=J.length;$<Z;$++)this.expandByPoint(J[$]);return this}setFromCenterAndSize(J,$){const Z=fJ.copy($).multiplyScalar(0.5);return this.min.copy(J).sub(Z),this.max.copy(J).add(Z),this}setFromObject(J,$=!1){return this.makeEmpty(),this.expandByObject(J,$)}clone(){return new this.constructor().copy(this)}copy(J){return this.min.copy(J.min),this.max.copy(J.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=Infinity,this.max.x=this.max.y=this.max.z=(-Infinity),this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(J){return this.isEmpty()?J.set(0,0,0):J.addVectors(this.min,this.max).multiplyScalar(0.5)}getSize(J){return this.isEmpty()?J.set(0,0,0):J.subVectors(this.max,this.min)}expandByPoint(J){return this.min.min(J),this.max.max(J),this}expandByVector(J){return this.min.sub(J),this.max.add(J),this}expandByScalar(J){return this.min.addScalar(-J),this.max.addScalar(J),this}expandByObject(J,$=!1){if(J.updateWorldMatrix(!1,!1),J.boundingBox!==void 0){if(J.boundingBox===null)J.computeBoundingBox();Y6.copy(J.boundingBox),Y6.applyMatrix4(J.matrixWorld),this.union(Y6)}else{const Q=J.geometry;if(Q!==void 0)if($&&Q.attributes!==void 0&&Q.attributes.position!==void 0){const W=Q.attributes.position;for(let Y=0,H=W.count;Y<H;Y++)fJ.fromBufferAttribute(W,Y).applyMatrix4(J.matrixWorld),this.expandByPoint(fJ)}else{if(Q.boundingBox===null)Q.computeBoundingBox();Y6.copy(Q.boundingBox),Y6.applyMatrix4(J.matrixWorld),this.union(Y6)}}const Z=J.children;for(let Q=0,W=Z.length;Q<W;Q++)this.expandByObject(Z[Q],$);return this}containsPoint(J){return J.x<this.min.x||J.x>this.max.x||J.y<this.min.y||J.y>this.max.y||J.z<this.min.z||J.z>this.max.z?!1:!0}containsBox(J){return this.min.x<=J.min.x&&J.max.x<=this.max.x&&this.min.y<=J.min.y&&J.max.y<=this.max.y&&this.min.z<=J.min.z&&J.max.z<=this.max.z}getParameter(J,$){return $.set((J.x-this.min.x)/(this.max.x-this.min.x),(J.y-this.min.y)/(this.max.y-this.min.y),(J.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(J){return J.max.x<this.min.x||J.min.x>this.max.x||J.max.y<this.min.y||J.min.y>this.max.y||J.max.z<this.min.z||J.min.z>this.max.z?!1:!0}intersectsSphere(J){return this.clampPoint(J.center,fJ),fJ.distanceToSquared(J.center)<=J.radius*J.radius}intersectsPlane(J){let $,Z;if(J.normal.x>0)$=J.normal.x*this.min.x,Z=J.normal.x*this.max.x;else $=J.normal.x*this.max.x,Z=J.normal.x*this.min.x;if(J.normal.y>0)$+=J.normal.y*this.min.y,Z+=J.normal.y*this.max.y;else $+=J.normal.y*this.max.y,Z+=J.normal.y*this.min.y;if(J.normal.z>0)$+=J.normal.z*this.min.z,Z+=J.normal.z*this.max.z;else $+=J.normal.z*this.max.z,Z+=J.normal.z*this.min.z;return $<=-J.constant&&Z>=-J.constant}intersectsTriangle(J){if(this.isEmpty())return!1;this.getCenter(T6),c6.subVectors(this.max,T6),X6.subVectors(J.a,T6),H6.subVectors(J.b,T6),K6.subVectors(J.c,T6),gJ.subVectors(H6,X6),pJ.subVectors(K6,H6),rJ.subVectors(X6,K6);let $=[0,-gJ.z,gJ.y,0,-pJ.z,pJ.y,0,-rJ.z,rJ.y,gJ.z,0,-gJ.x,pJ.z,0,-pJ.x,rJ.z,0,-rJ.x,-gJ.y,gJ.x,0,-pJ.y,pJ.x,0,-rJ.y,rJ.x,0];if(!y7($,X6,H6,K6,c6))return!1;if($=[1,0,0,0,1,0,0,0,1],!y7($,X6,H6,K6,c6))return!1;return n6.crossVectors(gJ,pJ),$=[n6.x,n6.y,n6.z],y7($,X6,H6,K6,c6)}clampPoint(J,$){return $.copy(J).clamp(this.min,this.max)}distanceToPoint(J){return this.clampPoint(J,fJ).distanceTo(J)}getBoundingSphere(J){if(this.isEmpty())J.makeEmpty();else this.getCenter(J.center),J.radius=this.getSize(fJ).length()*0.5;return J}intersect(J){if(this.min.max(J.min),this.max.min(J.max),this.isEmpty())this.makeEmpty();return this}union(J){return this.min.min(J.min),this.max.max(J.max),this}applyMatrix4(J){if(this.isEmpty())return this;return yJ[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(J),yJ[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(J),yJ[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(J),yJ[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(J),yJ[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(J),yJ[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(J),yJ[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(J),yJ[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(J),this.setFromPoints(yJ),this}translate(J){return this.min.add(J),this.max.add(J),this}equals(J){return J.min.equals(this.min)&&J.max.equals(this.max)}}var yJ=[new v,new v,new v,new v,new v,new v,new v,new v],fJ=new v,Y6=new I6,X6=new v,H6=new v,K6=new v,gJ=new v,pJ=new v,rJ=new v,T6=new v,c6=new v,n6=new v,aJ=new v,t9=new I6,S6=new v,f7=new v;class g6{constructor(J=new v,$=-1){this.center=J,this.radius=$}set(J,$){return this.center.copy(J),this.radius=$,this}setFromPoints(J,$){const Z=this.center;if($!==void 0)Z.copy($);else t9.setFromPoints(J).getCenter(Z);let Q=0;for(let W=0,Y=J.length;W<Y;W++)Q=Math.max(Q,Z.distanceToSquared(J[W]));return this.radius=Math.sqrt(Q),this}copy(J){return this.center.copy(J.center),this.radius=J.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(J){return J.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(J){return J.distanceTo(this.center)-this.radius}intersectsSphere(J){const $=this.radius+J.radius;return J.center.distanceToSquared(this.center)<=$*$}intersectsBox(J){return J.intersectsSphere(this)}intersectsPlane(J){return Math.abs(J.distanceToPoint(this.center))<=this.radius}clampPoint(J,$){const Z=this.center.distanceToSquared(J);if($.copy(J),Z>this.radius*this.radius)$.sub(this.center).normalize(),$.multiplyScalar(this.radius).add(this.center);return $}getBoundingBox(J){if(this.isEmpty())return J.makeEmpty(),J;return J.set(this.center,this.center),J.expandByScalar(this.radius),J}applyMatrix4(J){return this.center.applyMatrix4(J),this.radius=this.radius*J.getMaxScaleOnAxis(),this}translate(J){return this.center.add(J),this}expandByPoint(J){if(this.isEmpty())return this.center.copy(J),this.radius=0,this;S6.subVectors(J,this.center);const $=S6.lengthSq();if($>this.radius*this.radius){const Z=Math.sqrt($),Q=(Z-this.radius)*0.5;this.center.addScaledVector(S6,Q/Z),this.radius+=Q}return this}union(J){if(J.isEmpty())return this;if(this.isEmpty())return this.copy(J),this;if(this.center.equals(J.center)===!0)this.radius=Math.max(this.radius,J.radius);else f7.subVectors(J.center,this.center).setLength(J.radius),this.expandByPoint(S6.copy(J.center).add(f7)),this.expandByPoint(S6.copy(J.center).sub(f7));return this}equals(J){return J.center.equals(this.center)&&J.radius===this.radius}clone(){return new this.constructor().copy(this)}}var vJ=new v,v7=new v,s6=new v,mJ=new v,j7=new v,o6=new v,b7=new v;class Z8{constructor(J=new v,$=new v(0,0,-1)){this.origin=J,this.direction=$}set(J,$){return this.origin.copy(J),this.direction.copy($),this}copy(J){return this.origin.copy(J.origin),this.direction.copy(J.direction),this}at(J,$){return $.copy(this.origin).addScaledVector(this.direction,J)}lookAt(J){return this.direction.copy(J).sub(this.origin).normalize(),this}recast(J){return this.origin.copy(this.at(J,vJ)),this}closestPointToPoint(J,$){$.subVectors(J,this.origin);const Z=$.dot(this.direction);if(Z<0)return $.copy(this.origin);return $.copy(this.origin).addScaledVector(this.direction,Z)}distanceToPoint(J){return Math.sqrt(this.distanceSqToPoint(J))}distanceSqToPoint(J){const $=vJ.subVectors(J,this.origin).dot(this.direction);if($<0)return this.origin.distanceToSquared(J);return vJ.copy(this.origin).addScaledVector(this.direction,$),vJ.distanceToSquared(J)}distanceSqToSegment(J,$,Z,Q){v7.copy(J).add($).multiplyScalar(0.5),s6.copy($).sub(J).normalize(),mJ.copy(this.origin).sub(v7);const W=J.distanceTo($)*0.5,Y=-this.direction.dot(s6),H=mJ.dot(this.direction),X=-mJ.dot(s6),K=mJ.lengthSq(),G=Math.abs(1-Y*Y);let U,V,R,D;if(G>0)if(U=Y*X-H,V=Y*H-X,D=W*G,U>=0)if(V>=-D)if(V<=D){const M=1/G;U*=M,V*=M,R=U*(U+Y*V+2*H)+V*(Y*U+V+2*X)+K}else V=W,U=Math.max(0,-(Y*V+H)),R=-U*U+V*(V+2*X)+K;else V=-W,U=Math.max(0,-(Y*V+H)),R=-U*U+V*(V+2*X)+K;else if(V<=-D)U=Math.max(0,-(-Y*W+H)),V=U>0?-W:Math.min(Math.max(-W,-X),W),R=-U*U+V*(V+2*X)+K;else if(V<=D)U=0,V=Math.min(Math.max(-W,-X),W),R=V*(V+2*X)+K;else U=Math.max(0,-(Y*W+H)),V=U>0?W:Math.min(Math.max(-W,-X),W),R=-U*U+V*(V+2*X)+K;else V=Y>0?-W:W,U=Math.max(0,-(Y*V+H)),R=-U*U+V*(V+2*X)+K;if(Z)Z.copy(this.origin).addScaledVector(this.direction,U);if(Q)Q.copy(v7).addScaledVector(s6,V);return R}intersectSphere(J,$){vJ.subVectors(J.center,this.origin);const Z=vJ.dot(this.direction),Q=vJ.dot(vJ)-Z*Z,W=J.radius*J.radius;if(Q>W)return null;const Y=Math.sqrt(W-Q),H=Z-Y,X=Z+Y;if(X<0)return null;if(H<0)return this.at(X,$);return this.at(H,$)}intersectsSphere(J){return this.distanceSqToPoint(J.center)<=J.radius*J.radius}distanceToPlane(J){const $=J.normal.dot(this.direction);if($===0){if(J.distanceToPoint(this.origin)===0)return 0;return null}const Z=-(this.origin.dot(J.normal)+J.constant)/$;return Z>=0?Z:null}intersectPlane(J,$){const Z=this.distanceToPlane(J);if(Z===null)return null;return this.at(Z,$)}intersectsPlane(J){const $=J.distanceToPoint(this.origin);if($===0)return!0;if(J.normal.dot(this.direction)*$<0)return!0;return!1}intersectBox(J,$){let Z,Q,W,Y,H,X;const K=1/this.direction.x,G=1/this.direction.y,U=1/this.direction.z,V=this.origin;if(K>=0)Z=(J.min.x-V.x)*K,Q=(J.max.x-V.x)*K;else Z=(J.max.x-V.x)*K,Q=(J.min.x-V.x)*K;if(G>=0)W=(J.min.y-V.y)*G,Y=(J.max.y-V.y)*G;else W=(J.max.y-V.y)*G,Y=(J.min.y-V.y)*G;if(Z>Y||W>Q)return null;if(W>Z||isNaN(Z))Z=W;if(Y<Q||isNaN(Q))Q=Y;if(U>=0)H=(J.min.z-V.z)*U,X=(J.max.z-V.z)*U;else H=(J.max.z-V.z)*U,X=(J.min.z-V.z)*U;if(Z>X||H>Q)return null;if(H>Z||Z!==Z)Z=H;if(X<Q||Q!==Q)Q=X;if(Q<0)return null;return this.at(Z>=0?Z:Q,$)}intersectsBox(J){return this.intersectBox(J,vJ)!==null}intersectTriangle(J,$,Z,Q,W){j7.subVectors($,J),o6.subVectors(Z,J),b7.crossVectors(j7,o6);let Y=this.direction.dot(b7),H;if(Y>0){if(Q)return null;H=1}else if(Y<0)H=-1,Y=-Y;else return null;mJ.subVectors(this.origin,J);const X=H*this.direction.dot(o6.crossVectors(mJ,o6));if(X<0)return null;const K=H*this.direction.dot(j7.cross(mJ));if(K<0)return null;if(X+K>Y)return null;const G=-H*mJ.dot(b7);if(G<0)return null;return this.at(G/Y,W)}applyMatrix4(J){return this.origin.applyMatrix4(J),this.direction.transformDirection(J),this}equals(J){return J.origin.equals(this.origin)&&J.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class ZJ{constructor(J,$,Z,Q,W,Y,H,X,K,G,U,V,R,D,M,O){if(ZJ.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],J!==void 0)this.set(J,$,Z,Q,W,Y,H,X,K,G,U,V,R,D,M,O)}set(J,$,Z,Q,W,Y,H,X,K,G,U,V,R,D,M,O){const E=this.elements;return E[0]=J,E[4]=$,E[8]=Z,E[12]=Q,E[1]=W,E[5]=Y,E[9]=H,E[13]=X,E[2]=K,E[6]=G,E[10]=U,E[14]=V,E[3]=R,E[7]=D,E[11]=M,E[15]=O,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new ZJ().fromArray(this.elements)}copy(J){const $=this.elements,Z=J.elements;return $[0]=Z[0],$[1]=Z[1],$[2]=Z[2],$[3]=Z[3],$[4]=Z[4],$[5]=Z[5],$[6]=Z[6],$[7]=Z[7],$[8]=Z[8],$[9]=Z[9],$[10]=Z[10],$[11]=Z[11],$[12]=Z[12],$[13]=Z[13],$[14]=Z[14],$[15]=Z[15],this}copyPosition(J){const $=this.elements,Z=J.elements;return $[12]=Z[12],$[13]=Z[13],$[14]=Z[14],this}setFromMatrix3(J){const $=J.elements;return this.set($[0],$[3],$[6],0,$[1],$[4],$[7],0,$[2],$[5],$[8],0,0,0,0,1),this}extractBasis(J,$,Z){return J.setFromMatrixColumn(this,0),$.setFromMatrixColumn(this,1),Z.setFromMatrixColumn(this,2),this}makeBasis(J,$,Z){return this.set(J.x,$.x,Z.x,0,J.y,$.y,Z.y,0,J.z,$.z,Z.z,0,0,0,0,1),this}extractRotation(J){const $=this.elements,Z=J.elements,Q=1/G6.setFromMatrixColumn(J,0).length(),W=1/G6.setFromMatrixColumn(J,1).length(),Y=1/G6.setFromMatrixColumn(J,2).length();return $[0]=Z[0]*Q,$[1]=Z[1]*Q,$[2]=Z[2]*Q,$[3]=0,$[4]=Z[4]*W,$[5]=Z[5]*W,$[6]=Z[6]*W,$[7]=0,$[8]=Z[8]*Y,$[9]=Z[9]*Y,$[10]=Z[10]*Y,$[11]=0,$[12]=0,$[13]=0,$[14]=0,$[15]=1,this}makeRotationFromEuler(J){const $=this.elements,Z=J.x,Q=J.y,W=J.z,Y=Math.cos(Z),H=Math.sin(Z),X=Math.cos(Q),K=Math.sin(Q),G=Math.cos(W),U=Math.sin(W);if(J.order==="XYZ"){const V=Y*G,R=Y*U,D=H*G,M=H*U;$[0]=X*G,$[4]=-X*U,$[8]=K,$[1]=R+D*K,$[5]=V-M*K,$[9]=-H*X,$[2]=M-V*K,$[6]=D+R*K,$[10]=Y*X}else if(J.order==="YXZ"){const V=X*G,R=X*U,D=K*G,M=K*U;$[0]=V+M*H,$[4]=D*H-R,$[8]=Y*K,$[1]=Y*U,$[5]=Y*G,$[9]=-H,$[2]=R*H-D,$[6]=M+V*H,$[10]=Y*X}else if(J.order==="ZXY"){const V=X*G,R=X*U,D=K*G,M=K*U;$[0]=V-M*H,$[4]=-Y*U,$[8]=D+R*H,$[1]=R+D*H,$[5]=Y*G,$[9]=M-V*H,$[2]=-Y*K,$[6]=H,$[10]=Y*X}else if(J.order==="ZYX"){const V=Y*G,R=Y*U,D=H*G,M=H*U;$[0]=X*G,$[4]=D*K-R,$[8]=V*K+M,$[1]=X*U,$[5]=M*K+V,$[9]=R*K-D,$[2]=-K,$[6]=H*X,$[10]=Y*X}else if(J.order==="YZX"){const V=Y*X,R=Y*K,D=H*X,M=H*K;$[0]=X*G,$[4]=M-V*U,$[8]=D*U+R,$[1]=U,$[5]=Y*G,$[9]=-H*G,$[2]=-K*G,$[6]=R*U+D,$[10]=V-M*U}else if(J.order==="XZY"){const V=Y*X,R=Y*K,D=H*X,M=H*K;$[0]=X*G,$[4]=-U,$[8]=K*G,$[1]=V*U+M,$[5]=Y*G,$[9]=R*U-D,$[2]=D*U-R,$[6]=H*G,$[10]=M*U+V}return $[3]=0,$[7]=0,$[11]=0,$[12]=0,$[13]=0,$[14]=0,$[15]=1,this}makeRotationFromQuaternion(J){return this.compose(e9,J,J$)}lookAt(J,$,Z){const Q=this.elements;if(NJ.subVectors(J,$),NJ.lengthSq()===0)NJ.z=1;if(NJ.normalize(),lJ.crossVectors(Z,NJ),lJ.lengthSq()===0){if(Math.abs(Z.z)===1)NJ.x+=0.0001;else NJ.z+=0.0001;NJ.normalize(),lJ.crossVectors(Z,NJ)}return lJ.normalize(),i6.crossVectors(NJ,lJ),Q[0]=lJ.x,Q[4]=i6.x,Q[8]=NJ.x,Q[1]=lJ.y,Q[5]=i6.y,Q[9]=NJ.y,Q[2]=lJ.z,Q[6]=i6.z,Q[10]=NJ.z,this}multiply(J){return this.multiplyMatrices(this,J)}premultiply(J){return this.multiplyMatrices(J,this)}multiplyMatrices(J,$){const Z=J.elements,Q=$.elements,W=this.elements,Y=Z[0],H=Z[4],X=Z[8],K=Z[12],G=Z[1],U=Z[5],V=Z[9],R=Z[13],D=Z[2],M=Z[6],O=Z[10],E=Z[14],q=Z[3],I=Z[7],z=Z[11],A=Z[15],L=Q[0],w=Q[4],g=Q[8],u=Q[12],N=Q[1],C=Q[5],m=Q[9],e=Q[13],W0=Q[2],P=Q[6],l=Q[10],n=Q[14],d=Q[3],r=Q[7],p=Q[11],T=Q[15];return W[0]=Y*L+H*N+X*W0+K*d,W[4]=Y*w+H*C+X*P+K*r,W[8]=Y*g+H*m+X*l+K*p,W[12]=Y*u+H*e+X*n+K*T,W[1]=G*L+U*N+V*W0+R*d,W[5]=G*w+U*C+V*P+R*r,W[9]=G*g+U*m+V*l+R*p,W[13]=G*u+U*e+V*n+R*T,W[2]=D*L+M*N+O*W0+E*d,W[6]=D*w+M*C+O*P+E*r,W[10]=D*g+M*m+O*l+E*p,W[14]=D*u+M*e+O*n+E*T,W[3]=q*L+I*N+z*W0+A*d,W[7]=q*w+I*C+z*P+A*r,W[11]=q*g+I*m+z*l+A*p,W[15]=q*u+I*e+z*n+A*T,this}multiplyScalar(J){const $=this.elements;return $[0]*=J,$[4]*=J,$[8]*=J,$[12]*=J,$[1]*=J,$[5]*=J,$[9]*=J,$[13]*=J,$[2]*=J,$[6]*=J,$[10]*=J,$[14]*=J,$[3]*=J,$[7]*=J,$[11]*=J,$[15]*=J,this}determinant(){const J=this.elements,$=J[0],Z=J[4],Q=J[8],W=J[12],Y=J[1],H=J[5],X=J[9],K=J[13],G=J[2],U=J[6],V=J[10],R=J[14],D=J[3],M=J[7],O=J[11],E=J[15];return D*(+W*X*U-Q*K*U-W*H*V+Z*K*V+Q*H*R-Z*X*R)+M*(+$*X*R-$*K*V+W*Y*V-Q*Y*R+Q*K*G-W*X*G)+O*(+$*K*U-$*H*R-W*Y*U+Z*Y*R+W*H*G-Z*K*G)+E*(-Q*H*G-$*X*U+$*H*V+Q*Y*U-Z*Y*V+Z*X*G)}transpose(){const J=this.elements;let $;return $=J[1],J[1]=J[4],J[4]=$,$=J[2],J[2]=J[8],J[8]=$,$=J[6],J[6]=J[9],J[9]=$,$=J[3],J[3]=J[12],J[12]=$,$=J[7],J[7]=J[13],J[13]=$,$=J[11],J[11]=J[14],J[14]=$,this}setPosition(J,$,Z){const Q=this.elements;if(J.isVector3)Q[12]=J.x,Q[13]=J.y,Q[14]=J.z;else Q[12]=J,Q[13]=$,Q[14]=Z;return this}invert(){const J=this.elements,$=J[0],Z=J[1],Q=J[2],W=J[3],Y=J[4],H=J[5],X=J[6],K=J[7],G=J[8],U=J[9],V=J[10],R=J[11],D=J[12],M=J[13],O=J[14],E=J[15],q=U*O*K-M*V*K+M*X*R-H*O*R-U*X*E+H*V*E,I=D*V*K-G*O*K-D*X*R+Y*O*R+G*X*E-Y*V*E,z=G*M*K-D*U*K+D*H*R-Y*M*R-G*H*E+Y*U*E,A=D*U*X-G*M*X-D*H*V+Y*M*V+G*H*O-Y*U*O,L=$*q+Z*I+Q*z+W*A;if(L===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/L;return J[0]=q*w,J[1]=(M*V*W-U*O*W-M*Q*R+Z*O*R+U*Q*E-Z*V*E)*w,J[2]=(H*O*W-M*X*W+M*Q*K-Z*O*K-H*Q*E+Z*X*E)*w,J[3]=(U*X*W-H*V*W-U*Q*K+Z*V*K+H*Q*R-Z*X*R)*w,J[4]=I*w,J[5]=(G*O*W-D*V*W+D*Q*R-$*O*R-G*Q*E+$*V*E)*w,J[6]=(D*X*W-Y*O*W-D*Q*K+$*O*K+Y*Q*E-$*X*E)*w,J[7]=(Y*V*W-G*X*W+G*Q*K-$*V*K-Y*Q*R+$*X*R)*w,J[8]=z*w,J[9]=(D*U*W-G*M*W-D*Z*R+$*M*R+G*Z*E-$*U*E)*w,J[10]=(Y*M*W-D*H*W+D*Z*K-$*M*K-Y*Z*E+$*H*E)*w,J[11]=(G*H*W-Y*U*W-G*Z*K+$*U*K+Y*Z*R-$*H*R)*w,J[12]=A*w,J[13]=(G*M*Q-D*U*Q+D*Z*V-$*M*V-G*Z*O+$*U*O)*w,J[14]=(D*H*Q-Y*M*Q-D*Z*X+$*M*X+Y*Z*O-$*H*O)*w,J[15]=(Y*U*Q-G*H*Q+G*Z*X-$*U*X-Y*Z*V+$*H*V)*w,this}scale(J){const $=this.elements,Z=J.x,Q=J.y,W=J.z;return $[0]*=Z,$[4]*=Q,$[8]*=W,$[1]*=Z,$[5]*=Q,$[9]*=W,$[2]*=Z,$[6]*=Q,$[10]*=W,$[3]*=Z,$[7]*=Q,$[11]*=W,this}getMaxScaleOnAxis(){const J=this.elements,$=J[0]*J[0]+J[1]*J[1]+J[2]*J[2],Z=J[4]*J[4]+J[5]*J[5]+J[6]*J[6],Q=J[8]*J[8]+J[9]*J[9]+J[10]*J[10];return Math.sqrt(Math.max($,Z,Q))}makeTranslation(J,$,Z){if(J.isVector3)this.set(1,0,0,J.x,0,1,0,J.y,0,0,1,J.z,0,0,0,1);else this.set(1,0,0,J,0,1,0,$,0,0,1,Z,0,0,0,1);return this}makeRotationX(J){const $=Math.cos(J),Z=Math.sin(J);return this.set(1,0,0,0,0,$,-Z,0,0,Z,$,0,0,0,0,1),this}makeRotationY(J){const $=Math.cos(J),Z=Math.sin(J);return this.set($,0,Z,0,0,1,0,0,-Z,0,$,0,0,0,0,1),this}makeRotationZ(J){const $=Math.cos(J),Z=Math.sin(J);return this.set($,-Z,0,0,Z,$,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(J,$){const Z=Math.cos($),Q=Math.sin($),W=1-Z,Y=J.x,H=J.y,X=J.z,K=W*Y,G=W*H;return this.set(K*Y+Z,K*H-Q*X,K*X+Q*H,0,K*H+Q*X,G*H+Z,G*X-Q*Y,0,K*X-Q*H,G*X+Q*Y,W*X*X+Z,0,0,0,0,1),this}makeScale(J,$,Z){return this.set(J,0,0,0,0,$,0,0,0,0,Z,0,0,0,0,1),this}makeShear(J,$,Z,Q,W,Y){return this.set(1,Z,W,0,J,1,Y,0,$,Q,1,0,0,0,0,1),this}compose(J,$,Z){const Q=this.elements,W=$._x,Y=$._y,H=$._z,X=$._w,K=W+W,G=Y+Y,U=H+H,V=W*K,R=W*G,D=W*U,M=Y*G,O=Y*U,E=H*U,q=X*K,I=X*G,z=X*U,A=Z.x,L=Z.y,w=Z.z;return Q[0]=(1-(M+E))*A,Q[1]=(R+z)*A,Q[2]=(D-I)*A,Q[3]=0,Q[4]=(R-z)*L,Q[5]=(1-(V+E))*L,Q[6]=(O+q)*L,Q[7]=0,Q[8]=(D+I)*w,Q[9]=(O-q)*w,Q[10]=(1-(V+M))*w,Q[11]=0,Q[12]=J.x,Q[13]=J.y,Q[14]=J.z,Q[15]=1,this}decompose(J,$,Z){const Q=this.elements;let W=G6.set(Q[0],Q[1],Q[2]).length();const Y=G6.set(Q[4],Q[5],Q[6]).length(),H=G6.set(Q[8],Q[9],Q[10]).length();if(this.determinant()<0)W=-W;J.x=Q[12],J.y=Q[13],J.z=Q[14],IJ.copy(this);const K=1/W,G=1/Y,U=1/H;return IJ.elements[0]*=K,IJ.elements[1]*=K,IJ.elements[2]*=K,IJ.elements[4]*=G,IJ.elements[5]*=G,IJ.elements[6]*=G,IJ.elements[8]*=U,IJ.elements[9]*=U,IJ.elements[10]*=U,$.setFromRotationMatrix(IJ),Z.x=W,Z.y=Y,Z.z=H,this}makePerspective(J,$,Z,Q,W,Y,H=2000){const X=this.elements,K=2*W/($-J),G=2*W/(Z-Q),U=($+J)/($-J),V=(Z+Q)/(Z-Q);let R,D;if(H===2000)R=-(Y+W)/(Y-W),D=-2*Y*W/(Y-W);else if(H===2001)R=-Y/(Y-W),D=-Y*W/(Y-W);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+H);return X[0]=K,X[4]=0,X[8]=U,X[12]=0,X[1]=0,X[5]=G,X[9]=V,X[13]=0,X[2]=0,X[6]=0,X[10]=R,X[14]=D,X[3]=0,X[7]=0,X[11]=-1,X[15]=0,this}makeOrthographic(J,$,Z,Q,W,Y,H=2000){const X=this.elements,K=1/($-J),G=1/(Z-Q),U=1/(Y-W),V=($+J)*K,R=(Z+Q)*G;let D,M;if(H===2000)D=(Y+W)*U,M=-2*U;else if(H===2001)D=W*U,M=-1*U;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+H);return X[0]=2*K,X[4]=0,X[8]=0,X[12]=-V,X[1]=0,X[5]=2*G,X[9]=0,X[13]=-R,X[2]=0,X[6]=0,X[10]=M,X[14]=-D,X[3]=0,X[7]=0,X[11]=0,X[15]=1,this}equals(J){const $=this.elements,Z=J.elements;for(let Q=0;Q<16;Q++)if($[Q]!==Z[Q])return!1;return!0}fromArray(J,$=0){for(let Z=0;Z<16;Z++)this.elements[Z]=J[Z+$];return this}toArray(J=[],$=0){const Z=this.elements;return J[$]=Z[0],J[$+1]=Z[1],J[$+2]=Z[2],J[$+3]=Z[3],J[$+4]=Z[4],J[$+5]=Z[5],J[$+6]=Z[6],J[$+7]=Z[7],J[$+8]=Z[8],J[$+9]=Z[9],J[$+10]=Z[10],J[$+11]=Z[11],J[$+12]=Z[12],J[$+13]=Z[13],J[$+14]=Z[14],J[$+15]=Z[15],J}}var G6=new v,IJ=new ZJ,e9=new v(0,0,0),J$=new v(1,1,1),lJ=new v,i6=new v,NJ=new v,C8=new ZJ,L8=new Q6;class F7{constructor(J=0,$=0,Z=0,Q=F7.DEFAULT_ORDER){this.isEuler=!0,this._x=J,this._y=$,this._z=Z,this._order=Q}get x(){return this._x}set x(J){this._x=J,this._onChangeCallback()}get y(){return this._y}set y(J){this._y=J,this._onChangeCallback()}get z(){return this._z}set z(J){this._z=J,this._onChangeCallback()}get order(){return this._order}set order(J){this._order=J,this._onChangeCallback()}set(J,$,Z,Q=this._order){return this._x=J,this._y=$,this._z=Z,this._order=Q,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(J){return this._x=J._x,this._y=J._y,this._z=J._z,this._order=J._order,this._onChangeCallback(),this}setFromRotationMatrix(J,$=this._order,Z=!0){const Q=J.elements,W=Q[0],Y=Q[4],H=Q[8],X=Q[1],K=Q[5],G=Q[9],U=Q[2],V=Q[6],R=Q[10];switch($){case"XYZ":if(this._y=Math.asin(RJ(H,-1,1)),Math.abs(H)<0.9999999)this._x=Math.atan2(-G,R),this._z=Math.atan2(-Y,W);else this._x=Math.atan2(V,K),this._z=0;break;case"YXZ":if(this._x=Math.asin(-RJ(G,-1,1)),Math.abs(G)<0.9999999)this._y=Math.atan2(H,R),this._z=Math.atan2(X,K);else this._y=Math.atan2(-U,W),this._z=0;break;case"ZXY":if(this._x=Math.asin(RJ(V,-1,1)),Math.abs(V)<0.9999999)this._y=Math.atan2(-U,R),this._z=Math.atan2(-Y,K);else this._y=0,this._z=Math.atan2(X,W);break;case"ZYX":if(this._y=Math.asin(-RJ(U,-1,1)),Math.abs(U)<0.9999999)this._x=Math.atan2(V,R),this._z=Math.atan2(X,W);else this._x=0,this._z=Math.atan2(-Y,K);break;case"YZX":if(this._z=Math.asin(RJ(X,-1,1)),Math.abs(X)<0.9999999)this._x=Math.atan2(-G,K),this._y=Math.atan2(-U,W);else this._x=0,this._y=Math.atan2(H,R);break;case"XZY":if(this._z=Math.asin(-RJ(Y,-1,1)),Math.abs(Y)<0.9999999)this._x=Math.atan2(V,K),this._y=Math.atan2(H,W);else this._x=Math.atan2(-G,R),this._y=0;break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+$)}if(this._order=$,Z===!0)this._onChangeCallback();return this}setFromQuaternion(J,$,Z){return C8.makeRotationFromQuaternion(J),this.setFromRotationMatrix(C8,$,Z)}setFromVector3(J,$=this._order){return this.set(J.x,J.y,J.z,$)}reorder(J){return L8.setFromEuler(this),this.setFromQuaternion(L8,J)}equals(J){return J._x===this._x&&J._y===this._y&&J._z===this._z&&J._order===this._order}fromArray(J){if(this._x=J[0],this._y=J[1],this._z=J[2],J[3]!==void 0)this._order=J[3];return this._onChangeCallback(),this}toArray(J=[],$=0){return J[$]=this._x,J[$+1]=this._y,J[$+2]=this._z,J[$+3]=this._order,J}_onChange(J){return this._onChangeCallback=J,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}F7.DEFAULT_ORDER="XYZ";class Q8{constructor(){this.mask=1|0}set(J){this.mask=(1<<J|0)>>>0}enable(J){this.mask|=1<<J|0}enableAll(){this.mask=4294967295|0}toggle(J){this.mask^=1<<J|0}disable(J){this.mask&=~(1<<J|0)}disableAll(){this.mask=0}test(J){return(this.mask&J.mask)!==0}isEnabled(J){return(this.mask&(1<<J|0))!==0}}var $$=0,A8=new v,V6=new Q6,jJ=new ZJ,r6=new v,y6=new v,Z$=new v,Q$=new Q6,P8=new v(1,0,0),T8=new v(0,1,0),S8=new v(0,0,1),W$={type:"added"},Y$={type:"removed"};class DJ extends Z6{constructor(){super();this.isObject3D=!0,Object.defineProperty(this,"id",{value:$$++}),this.uuid=h6(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=DJ.DEFAULT_UP.clone();const J=new v,$=new F7,Z=new Q6,Q=new v(1,1,1);function W(){Z.setFromEuler($,!1)}function Y(){$.setFromQuaternion(Z,void 0,!1)}$._onChange(W),Z._onChange(Y),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:J},rotation:{configurable:!0,enumerable:!0,value:$},quaternion:{configurable:!0,enumerable:!0,value:Z},scale:{configurable:!0,enumerable:!0,value:Q},modelViewMatrix:{value:new ZJ},normalMatrix:{value:new A0}}),this.matrix=new ZJ,this.matrixWorld=new ZJ,this.matrixAutoUpdate=DJ.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=DJ.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.layers=new Q8,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(J){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(J),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(J){return this.quaternion.premultiply(J),this}setRotationFromAxisAngle(J,$){this.quaternion.setFromAxisAngle(J,$)}setRotationFromEuler(J){this.quaternion.setFromEuler(J,!0)}setRotationFromMatrix(J){this.quaternion.setFromRotationMatrix(J)}setRotationFromQuaternion(J){this.quaternion.copy(J)}rotateOnAxis(J,$){return V6.setFromAxisAngle(J,$),this.quaternion.multiply(V6),this}rotateOnWorldAxis(J,$){return V6.setFromAxisAngle(J,$),this.quaternion.premultiply(V6),this}rotateX(J){return this.rotateOnAxis(P8,J)}rotateY(J){return this.rotateOnAxis(T8,J)}rotateZ(J){return this.rotateOnAxis(S8,J)}translateOnAxis(J,$){return A8.copy(J).applyQuaternion(this.quaternion),this.position.add(A8.multiplyScalar($)),this}translateX(J){return this.translateOnAxis(P8,J)}translateY(J){return this.translateOnAxis(T8,J)}translateZ(J){return this.translateOnAxis(S8,J)}localToWorld(J){return this.updateWorldMatrix(!0,!1),J.applyMatrix4(this.matrixWorld)}worldToLocal(J){return this.updateWorldMatrix(!0,!1),J.applyMatrix4(jJ.copy(this.matrixWorld).invert())}lookAt(J,$,Z){if(J.isVector3)r6.copy(J);else r6.set(J,$,Z);const Q=this.parent;if(this.updateWorldMatrix(!0,!1),y6.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight)jJ.lookAt(y6,r6,this.up);else jJ.lookAt(r6,y6,this.up);if(this.quaternion.setFromRotationMatrix(jJ),Q)jJ.extractRotation(Q.matrixWorld),V6.setFromRotationMatrix(jJ),this.quaternion.premultiply(V6.invert())}add(J){if(arguments.length>1){for(let $=0;$<arguments.length;$++)this.add(arguments[$]);return this}if(J===this)return console.error("THREE.Object3D.add: object can\'t be added as a child of itself.",J),this;if(J&&J.isObject3D){if(J.parent!==null)J.parent.remove(J);J.parent=this,this.children.push(J),J.dispatchEvent(W$)}else console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",J);return this}remove(J){if(arguments.length>1){for(let Z=0;Z<arguments.length;Z++)this.remove(arguments[Z]);return this}const $=this.children.indexOf(J);if($!==-1)J.parent=null,this.children.splice($,1),J.dispatchEvent(Y$);return this}removeFromParent(){const J=this.parent;if(J!==null)J.remove(this);return this}clear(){return this.remove(...this.children)}attach(J){if(this.updateWorldMatrix(!0,!1),jJ.copy(this.matrixWorld).invert(),J.parent!==null)J.parent.updateWorldMatrix(!0,!1),jJ.multiply(J.parent.matrixWorld);return J.applyMatrix4(jJ),this.add(J),J.updateWorldMatrix(!1,!0),this}getObjectById(J){return this.getObjectByProperty("id",J)}getObjectByName(J){return this.getObjectByProperty("name",J)}getObjectByProperty(J,$){if(this[J]===$)return this;for(let Z=0,Q=this.children.length;Z<Q;Z++){const Y=this.children[Z].getObjectByProperty(J,$);if(Y!==void 0)return Y}return}getObjectsByProperty(J,$){let Z=[];if(this[J]===$)Z.push(this);for(let Q=0,W=this.children.length;Q<W;Q++){const Y=this.children[Q].getObjectsByProperty(J,$);if(Y.length>0)Z=Z.concat(Y)}return Z}getWorldPosition(J){return this.updateWorldMatrix(!0,!1),J.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(J){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(y6,J,Z$),J}getWorldScale(J){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(y6,Q$,J),J}getWorldDirection(J){this.updateWorldMatrix(!0,!1);const $=this.matrixWorld.elements;return J.set($[8],$[9],$[10]).normalize()}raycast(){}traverse(J){J(this);const $=this.children;for(let Z=0,Q=$.length;Z<Q;Z++)$[Z].traverse(J)}traverseVisible(J){if(this.visible===!1)return;J(this);const $=this.children;for(let Z=0,Q=$.length;Z<Q;Z++)$[Z].traverseVisible(J)}traverseAncestors(J){const $=this.parent;if($!==null)J($),$.traverseAncestors(J)}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(J){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||J){if(this.parent===null)this.matrixWorld.copy(this.matrix);else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);this.matrixWorldNeedsUpdate=!1,J=!0}const $=this.children;for(let Z=0,Q=$.length;Z<Q;Z++){const W=$[Z];if(W.matrixWorldAutoUpdate===!0||J===!0)W.updateMatrixWorld(J)}}updateWorldMatrix(J,$){const Z=this.parent;if(J===!0&&Z!==null&&Z.matrixWorldAutoUpdate===!0)Z.updateWorldMatrix(!0,!1);if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null)this.matrixWorld.copy(this.matrix);else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);if($===!0){const Q=this.children;for(let W=0,Y=Q.length;W<Y;W++){const H=Q[W];if(H.matrixWorldAutoUpdate===!0)H.updateWorldMatrix(!1,!0)}}}toJSON(J){const $=J===void 0||typeof J==="string",Z={};if($)J={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},Z.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"};const Q={};if(Q.uuid=this.uuid,Q.type=this.type,this.name!=="")Q.name=this.name;if(this.castShadow===!0)Q.castShadow=!0;if(this.receiveShadow===!0)Q.receiveShadow=!0;if(this.visible===!1)Q.visible=!1;if(this.frustumCulled===!1)Q.frustumCulled=!1;if(this.renderOrder!==0)Q.renderOrder=this.renderOrder;if(Object.keys(this.userData).length>0)Q.userData=this.userData;if(Q.layers=this.layers.mask,Q.matrix=this.matrix.toArray(),Q.up=this.up.toArray(),this.matrixAutoUpdate===!1)Q.matrixAutoUpdate=!1;if(this.isInstancedMesh){if(Q.type="InstancedMesh",Q.count=this.count,Q.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null)Q.instanceColor=this.instanceColor.toJSON()}function W(H,X){if(H[X.uuid]===void 0)H[X.uuid]=X.toJSON(J);return X.uuid}if(this.isScene){if(this.background){if(this.background.isColor)Q.background=this.background.toJSON();else if(this.background.isTexture)Q.background=this.background.toJSON(J).uuid}if(this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0)Q.environment=this.environment.toJSON(J).uuid}else if(this.isMesh||this.isLine||this.isPoints){Q.geometry=W(J.geometries,this.geometry);const H=this.geometry.parameters;if(H!==void 0&&H.shapes!==void 0){const X=H.shapes;if(Array.isArray(X))for(let K=0,G=X.length;K<G;K++){const U=X[K];W(J.shapes,U)}else W(J.shapes,X)}}if(this.isSkinnedMesh){if(Q.bindMode=this.bindMode,Q.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0)W(J.skeletons,this.skeleton),Q.skeleton=this.skeleton.uuid}if(this.material!==void 0)if(Array.isArray(this.material)){const H=[];for(let X=0,K=this.material.length;X<K;X++)H.push(W(J.materials,this.material[X]));Q.material=H}else Q.material=W(J.materials,this.material);if(this.children.length>0){Q.children=[];for(let H=0;H<this.children.length;H++)Q.children.push(this.children[H].toJSON(J).object)}if(this.animations.length>0){Q.animations=[];for(let H=0;H<this.animations.length;H++){const X=this.animations[H];Q.animations.push(W(J.animations,X))}}if($){const H=Y(J.geometries),X=Y(J.materials),K=Y(J.textures),G=Y(J.images),U=Y(J.shapes),V=Y(J.skeletons),R=Y(J.animations),D=Y(J.nodes);if(H.length>0)Z.geometries=H;if(X.length>0)Z.materials=X;if(K.length>0)Z.textures=K;if(G.length>0)Z.images=G;if(U.length>0)Z.shapes=U;if(V.length>0)Z.skeletons=V;if(R.length>0)Z.animations=R;if(D.length>0)Z.nodes=D}return Z.object=Q,Z;function Y(H){const X=[];for(let K in H){const G=H[K];delete G.metadata,X.push(G)}return X}}clone(J){return new this.constructor().copy(this,J)}copy(J,$=!0){if(this.name=J.name,this.up.copy(J.up),this.position.copy(J.position),this.rotation.order=J.rotation.order,this.quaternion.copy(J.quaternion),this.scale.copy(J.scale),this.matrix.copy(J.matrix),this.matrixWorld.copy(J.matrixWorld),this.matrixAutoUpdate=J.matrixAutoUpdate,this.matrixWorldNeedsUpdate=J.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=J.matrixWorldAutoUpdate,this.layers.mask=J.layers.mask,this.visible=J.visible,this.castShadow=J.castShadow,this.receiveShadow=J.receiveShadow,this.frustumCulled=J.frustumCulled,this.renderOrder=J.renderOrder,this.animations=J.animations.slice(),this.userData=JSON.parse(JSON.stringify(J.userData)),$===!0)for(let Z=0;Z<J.children.length;Z++){const Q=J.children[Z];this.add(Q.clone())}return this}}DJ.DEFAULT_UP=new v(0,1,0);DJ.DEFAULT_MATRIX_AUTO_UPDATE=!0;DJ.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;var wJ=new v,bJ=new v,x7=new v,xJ=new v,U6=new v,q6=new v,y8=new v,h7=new v,g7=new v,p7=new v,a6=!1;class kJ{constructor(J=new v,$=new v,Z=new v){this.a=J,this.b=$,this.c=Z}static getNormal(J,$,Z,Q){Q.subVectors(Z,$),wJ.subVectors(J,$),Q.cross(wJ);const W=Q.lengthSq();if(W>0)return Q.multiplyScalar(1/Math.sqrt(W));return Q.set(0,0,0)}static getBarycoord(J,$,Z,Q,W){wJ.subVectors(Q,$),bJ.subVectors(Z,$),x7.subVectors(J,$);const Y=wJ.dot(wJ),H=wJ.dot(bJ),X=wJ.dot(x7),K=bJ.dot(bJ),G=bJ.dot(x7),U=Y*K-H*H;if(U===0)return W.set(-2,-1,-1);const V=1/U,R=(K*X-H*G)*V,D=(Y*G-H*X)*V;return W.set(1-R-D,D,R)}static containsPoint(J,$,Z,Q){return this.getBarycoord(J,$,Z,Q,xJ),xJ.x>=0&&xJ.y>=0&&xJ.x+xJ.y<=1}static getUV(J,$,Z,Q,W,Y,H,X){if(a6===!1)console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),a6=!0;return this.getInterpolation(J,$,Z,Q,W,Y,H,X)}static getInterpolation(J,$,Z,Q,W,Y,H,X){return this.getBarycoord(J,$,Z,Q,xJ),X.setScalar(0),X.addScaledVector(W,xJ.x),X.addScaledVector(Y,xJ.y),X.addScaledVector(H,xJ.z),X}static isFrontFacing(J,$,Z,Q){return wJ.subVectors(Z,$),bJ.subVectors(J,$),wJ.cross(bJ).dot(Q)<0?!0:!1}set(J,$,Z){return this.a.copy(J),this.b.copy($),this.c.copy(Z),this}setFromPointsAndIndices(J,$,Z,Q){return this.a.copy(J[$]),this.b.copy(J[Z]),this.c.copy(J[Q]),this}setFromAttributeAndIndices(J,$,Z,Q){return this.a.fromBufferAttribute(J,$),this.b.fromBufferAttribute(J,Z),this.c.fromBufferAttribute(J,Q),this}clone(){return new this.constructor().copy(this)}copy(J){return this.a.copy(J.a),this.b.copy(J.b),this.c.copy(J.c),this}getArea(){return wJ.subVectors(this.c,this.b),bJ.subVectors(this.a,this.b),wJ.cross(bJ).length()*0.5}getMidpoint(J){return J.addVectors(this.a,this.b).add(this.c).multiplyScalar(0.3333333333333333)}getNormal(J){return kJ.getNormal(this.a,this.b,this.c,J)}getPlane(J){return J.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(J,$){return kJ.getBarycoord(J,this.a,this.b,this.c,$)}getUV(J,$,Z,Q,W){if(a6===!1)console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),a6=!0;return kJ.getInterpolation(J,this.a,this.b,this.c,$,Z,Q,W)}getInterpolation(J,$,Z,Q,W){return kJ.getInterpolation(J,this.a,this.b,this.c,$,Z,Q,W)}containsPoint(J){return kJ.containsPoint(J,this.a,this.b,this.c)}isFrontFacing(J){return kJ.isFrontFacing(this.a,this.b,this.c,J)}intersectsBox(J){return J.intersectsTriangle(this)}closestPointToPoint(J,$){const Z=this.a,Q=this.b,W=this.c;let Y,H;U6.subVectors(Q,Z),q6.subVectors(W,Z),h7.subVectors(J,Z);const X=U6.dot(h7),K=q6.dot(h7);if(X<=0&&K<=0)return $.copy(Z);g7.subVectors(J,Q);const G=U6.dot(g7),U=q6.dot(g7);if(G>=0&&U<=G)return $.copy(Q);const V=X*U-G*K;if(V<=0&&X>=0&&G<=0)return Y=X/(X-G),$.copy(Z).addScaledVector(U6,Y);p7.subVectors(J,W);const R=U6.dot(p7),D=q6.dot(p7);if(D>=0&&R<=D)return $.copy(W);const M=R*K-X*D;if(M<=0&&K>=0&&D<=0)return H=K/(K-D),$.copy(Z).addScaledVector(q6,H);const O=G*D-R*U;if(O<=0&&U-G>=0&&R-D>=0)return y8.subVectors(W,Q),H=(U-G)/(U-G+(R-D)),$.copy(Q).addScaledVector(y8,H);const E=1/(O+M+V);return Y=M*E,H=V*E,$.copy(Z).addScaledVector(U6,Y).addScaledVector(q6,H)}equals(J){return J.a.equals(this.a)&&J.b.equals(this.b)&&J.c.equals(this.c)}}var X$=0;class w6 extends Z6{constructor(){super();this.isMaterial=!0,Object.defineProperty(this,"id",{value:X$++}),this.uuid=h6(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(J){if(this._alphaTest>0!==J>0)this.version++;this._alphaTest=J}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(J){if(J===void 0)return;for(let $ in J){const Z=J[$];if(Z===void 0){console.warn(`THREE.Material: parameter '${$}' has value of undefined.`);continue}const Q=this[$];if(Q===void 0){console.warn(`THREE.Material: '${$}' is not a property of THREE.${this.type}.`);continue}if(Q&&Q.isColor)Q.set(Z);else if(Q&&Q.isVector3&&(Z&&Z.isVector3))Q.copy(Z);else this[$]=Z}}toJSON(J){const $=J===void 0||typeof J==="string";if($)J={textures:{},images:{}};const Z={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};if(Z.uuid=this.uuid,Z.type=this.type,this.name!=="")Z.name=this.name;if(this.color&&this.color.isColor)Z.color=this.color.getHex();if(this.roughness!==void 0)Z.roughness=this.roughness;if(this.metalness!==void 0)Z.metalness=this.metalness;if(this.sheen!==void 0)Z.sheen=this.sheen;if(this.sheenColor&&this.sheenColor.isColor)Z.sheenColor=this.sheenColor.getHex();if(this.sheenRoughness!==void 0)Z.sheenRoughness=this.sheenRoughness;if(this.emissive&&this.emissive.isColor)Z.emissive=this.emissive.getHex();if(this.emissiveIntensity&&this.emissiveIntensity!==1)Z.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)Z.specular=this.specular.getHex();if(this.specularIntensity!==void 0)Z.specularIntensity=this.specularIntensity;if(this.specularColor&&this.specularColor.isColor)Z.specularColor=this.specularColor.getHex();if(this.shininess!==void 0)Z.shininess=this.shininess;if(this.clearcoat!==void 0)Z.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==void 0)Z.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture)Z.clearcoatMap=this.clearcoatMap.toJSON(J).uuid;if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture)Z.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(J).uuid;if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture)Z.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(J).uuid,Z.clearcoatNormalScale=this.clearcoatNormalScale.toArray();if(this.iridescence!==void 0)Z.iridescence=this.iridescence;if(this.iridescenceIOR!==void 0)Z.iridescenceIOR=this.iridescenceIOR;if(this.iridescenceThicknessRange!==void 0)Z.iridescenceThicknessRange=this.iridescenceThicknessRange;if(this.iridescenceMap&&this.iridescenceMap.isTexture)Z.iridescenceMap=this.iridescenceMap.toJSON(J).uuid;if(this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture)Z.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(J).uuid;if(this.anisotropy!==void 0)Z.anisotropy=this.anisotropy;if(this.anisotropyRotation!==void 0)Z.anisotropyRotation=this.anisotropyRotation;if(this.anisotropyMap&&this.anisotropyMap.isTexture)Z.anisotropyMap=this.anisotropyMap.toJSON(J).uuid;if(this.map&&this.map.isTexture)Z.map=this.map.toJSON(J).uuid;if(this.matcap&&this.matcap.isTexture)Z.matcap=this.matcap.toJSON(J).uuid;if(this.alphaMap&&this.alphaMap.isTexture)Z.alphaMap=this.alphaMap.toJSON(J).uuid;if(this.lightMap&&this.lightMap.isTexture)Z.lightMap=this.lightMap.toJSON(J).uuid,Z.lightMapIntensity=this.lightMapIntensity;if(this.aoMap&&this.aoMap.isTexture)Z.aoMap=this.aoMap.toJSON(J).uuid,Z.aoMapIntensity=this.aoMapIntensity;if(this.bumpMap&&this.bumpMap.isTexture)Z.bumpMap=this.bumpMap.toJSON(J).uuid,Z.bumpScale=this.bumpScale;if(this.normalMap&&this.normalMap.isTexture)Z.normalMap=this.normalMap.toJSON(J).uuid,Z.normalMapType=this.normalMapType,Z.normalScale=this.normalScale.toArray();if(this.displacementMap&&this.displacementMap.isTexture)Z.displacementMap=this.displacementMap.toJSON(J).uuid,Z.displacementScale=this.displacementScale,Z.displacementBias=this.displacementBias;if(this.roughnessMap&&this.roughnessMap.isTexture)Z.roughnessMap=this.roughnessMap.toJSON(J).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)Z.metalnessMap=this.metalnessMap.toJSON(J).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)Z.emissiveMap=this.emissiveMap.toJSON(J).uuid;if(this.specularMap&&this.specularMap.isTexture)Z.specularMap=this.specularMap.toJSON(J).uuid;if(this.specularIntensityMap&&this.specularIntensityMap.isTexture)Z.specularIntensityMap=this.specularIntensityMap.toJSON(J).uuid;if(this.specularColorMap&&this.specularColorMap.isTexture)Z.specularColorMap=this.specularColorMap.toJSON(J).uuid;if(this.envMap&&this.envMap.isTexture){if(Z.envMap=this.envMap.toJSON(J).uuid,this.combine!==void 0)Z.combine=this.combine}if(this.envMapIntensity!==void 0)Z.envMapIntensity=this.envMapIntensity;if(this.reflectivity!==void 0)Z.reflectivity=this.reflectivity;if(this.refractionRatio!==void 0)Z.refractionRatio=this.refractionRatio;if(this.gradientMap&&this.gradientMap.isTexture)Z.gradientMap=this.gradientMap.toJSON(J).uuid;if(this.transmission!==void 0)Z.transmission=this.transmission;if(this.transmissionMap&&this.transmissionMap.isTexture)Z.transmissionMap=this.transmissionMap.toJSON(J).uuid;if(this.thickness!==void 0)Z.thickness=this.thickness;if(this.thicknessMap&&this.thicknessMap.isTexture)Z.thicknessMap=this.thicknessMap.toJSON(J).uuid;if(this.attenuationDistance!==void 0&&this.attenuationDistance!==Infinity)Z.attenuationDistance=this.attenuationDistance;if(this.attenuationColor!==void 0)Z.attenuationColor=this.attenuationColor.getHex();if(this.size!==void 0)Z.size=this.size;if(this.shadowSide!==null)Z.shadowSide=this.shadowSide;if(this.sizeAttenuation!==void 0)Z.sizeAttenuation=this.sizeAttenuation;if(this.blending!==1)Z.blending=this.blending;if(this.side!==0)Z.side=this.side;if(this.vertexColors===!0)Z.vertexColors=!0;if(this.opacity<1)Z.opacity=this.opacity;if(this.transparent===!0)Z.transparent=!0;if(Z.depthFunc=this.depthFunc,Z.depthTest=this.depthTest,Z.depthWrite=this.depthWrite,Z.colorWrite=this.colorWrite,Z.stencilWrite=this.stencilWrite,Z.stencilWriteMask=this.stencilWriteMask,Z.stencilFunc=this.stencilFunc,Z.stencilRef=this.stencilRef,Z.stencilFuncMask=this.stencilFuncMask,Z.stencilFail=this.stencilFail,Z.stencilZFail=this.stencilZFail,Z.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0)Z.rotation=this.rotation;if(this.polygonOffset===!0)Z.polygonOffset=!0;if(this.polygonOffsetFactor!==0)Z.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)Z.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth!==void 0&&this.linewidth!==1)Z.linewidth=this.linewidth;if(this.dashSize!==void 0)Z.dashSize=this.dashSize;if(this.gapSize!==void 0)Z.gapSize=this.gapSize;if(this.scale!==void 0)Z.scale=this.scale;if(this.dithering===!0)Z.dithering=!0;if(this.alphaTest>0)Z.alphaTest=this.alphaTest;if(this.alphaHash===!0)Z.alphaHash=!0;if(this.alphaToCoverage===!0)Z.alphaToCoverage=!0;if(this.premultipliedAlpha===!0)Z.premultipliedAlpha=!0;if(this.forceSinglePass===!0)Z.forceSinglePass=!0;if(this.wireframe===!0)Z.wireframe=!0;if(this.wireframeLinewidth>1)Z.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=="round")Z.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=="round")Z.wireframeLinejoin=this.wireframeLinejoin;if(this.flatShading===!0)Z.flatShading=!0;if(this.visible===!1)Z.visible=!1;if(this.toneMapped===!1)Z.toneMapped=!1;if(this.fog===!1)Z.fog=!1;if(Object.keys(this.userData).length>0)Z.userData=this.userData;function Q(W){const Y=[];for(let H in W){const X=W[H];delete X.metadata,Y.push(X)}return Y}if($){const W=Q(J.textures),Y=Q(J.images);if(W.length>0)Z.textures=W;if(Y.length>0)Z.images=Y}return Z}clone(){return new this.constructor().copy(this)}copy(J){this.name=J.name,this.blending=J.blending,this.side=J.side,this.vertexColors=J.vertexColors,this.opacity=J.opacity,this.transparent=J.transparent,this.blendSrc=J.blendSrc,this.blendDst=J.blendDst,this.blendEquation=J.blendEquation,this.blendSrcAlpha=J.blendSrcAlpha,this.blendDstAlpha=J.blendDstAlpha,this.blendEquationAlpha=J.blendEquationAlpha,this.depthFunc=J.depthFunc,this.depthTest=J.depthTest,this.depthWrite=J.depthWrite,this.stencilWriteMask=J.stencilWriteMask,this.stencilFunc=J.stencilFunc,this.stencilRef=J.stencilRef,this.stencilFuncMask=J.stencilFuncMask,this.stencilFail=J.stencilFail,this.stencilZFail=J.stencilZFail,this.stencilZPass=J.stencilZPass,this.stencilWrite=J.stencilWrite;const $=J.clippingPlanes;let Z=null;if($!==null){const Q=$.length;Z=new Array(Q);for(let W=0;W!==Q;++W)Z[W]=$[W].clone()}return this.clippingPlanes=Z,this.clipIntersection=J.clipIntersection,this.clipShadows=J.clipShadows,this.shadowSide=J.shadowSide,this.colorWrite=J.colorWrite,this.precision=J.precision,this.polygonOffset=J.polygonOffset,this.polygonOffsetFactor=J.polygonOffsetFactor,this.polygonOffsetUnits=J.polygonOffsetUnits,this.dithering=J.dithering,this.alphaTest=J.alphaTest,this.alphaHash=J.alphaHash,this.alphaToCoverage=J.alphaToCoverage,this.premultipliedAlpha=J.premultipliedAlpha,this.forceSinglePass=J.forceSinglePass,this.visible=J.visible,this.toneMapped=J.toneMapped,this.userData=JSON.parse(JSON.stringify(J.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(J){if(J===!0)this.version++}}var V9={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},uJ={h:0,s:0,l:0},t6={h:0,s:0,l:0};class g0{constructor(J,$,Z){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(J,$,Z)}set(J,$,Z){if($===void 0&&Z===void 0){const Q=J;if(Q&&Q.isColor)this.copy(Q);else if(typeof Q==="number")this.setHex(Q);else if(typeof Q==="string")this.setStyle(Q)}else this.setRGB(J,$,Z);return this}setScalar(J){return this.r=J,this.g=J,this.b=J,this}setHex(J,$="srgb"){return J=Math.floor(J),this.r=(J>>16&255)/255,this.g=(J>>8&255)/255,this.b=(J&255)/255,h0.toWorkingColorSpace(this,$),this}setRGB(J,$,Z,Q=h0.workingColorSpace){return this.r=J,this.g=$,this.b=Z,h0.toWorkingColorSpace(this,Q),this}setHSL(J,$,Z,Q=h0.workingColorSpace){if(J=s9(J,1),$=RJ($,0,1),Z=RJ(Z,0,1),$===0)this.r=this.g=this.b=Z;else{const W=Z<=0.5?Z*(1+$):Z+$-Z*$,Y=2*Z-W;this.r=m7(Y,W,J+0.3333333333333333),this.g=m7(Y,W,J),this.b=m7(Y,W,J-0.3333333333333333)}return h0.toWorkingColorSpace(this,Q),this}setStyle(J,$="srgb"){function Z(W){if(W===void 0)return;if(parseFloat(W)<1)console.warn("THREE.Color: Alpha component of "+J+" will be ignored.")}let Q;if(Q=/^(\w+)\(([^\)]*)\)/.exec(J)){let W;const Y=Q[1],H=Q[2];switch(Y){case"rgb":case"rgba":if(W=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(H))return Z(W[4]),this.setRGB(Math.min(255,parseInt(W[1],10))/255,Math.min(255,parseInt(W[2],10))/255,Math.min(255,parseInt(W[3],10))/255,$);if(W=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(H))return Z(W[4]),this.setRGB(Math.min(100,parseInt(W[1],10))/100,Math.min(100,parseInt(W[2],10))/100,Math.min(100,parseInt(W[3],10))/100,$);break;case"hsl":case"hsla":if(W=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(H))return Z(W[4]),this.setHSL(parseFloat(W[1])/360,parseFloat(W[2])/100,parseFloat(W[3])/100,$);break;default:console.warn("THREE.Color: Unknown color model "+J)}}else if(Q=/^\#([A-Fa-f\d]+)$/.exec(J)){const W=Q[1],Y=W.length;if(Y===3)return this.setRGB(parseInt(W.charAt(0),16)/15,parseInt(W.charAt(1),16)/15,parseInt(W.charAt(2),16)/15,$);else if(Y===6)return this.setHex(parseInt(W,16),$);else console.warn("THREE.Color: Invalid hex color "+J)}else if(J&&J.length>0)return this.setColorName(J,$);return this}setColorName(J,$="srgb"){const Z=V9[J.toLowerCase()];if(Z!==void 0)this.setHex(Z,$);else console.warn("THREE.Color: Unknown color "+J);return this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(J){return this.r=J.r,this.g=J.g,this.b=J.b,this}copySRGBToLinear(J){return this.r=z6(J.r),this.g=z6(J.g),this.b=z6(J.b),this}copyLinearToSRGB(J){return this.r=P7(J.r),this.g=P7(J.g),this.b=P7(J.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(J="srgb"){return h0.fromWorkingColorSpace(HJ.copy(this),J),Math.round(RJ(HJ.r*255,0,255))*65536+Math.round(RJ(HJ.g*255,0,255))*256+Math.round(RJ(HJ.b*255,0,255))}getHexString(J="srgb"){return("000000"+this.getHex(J).toString(16)).slice(-6)}getHSL(J,$=h0.workingColorSpace){h0.fromWorkingColorSpace(HJ.copy(this),$);const{r:Z,g:Q,b:W}=HJ,Y=Math.max(Z,Q,W),H=Math.min(Z,Q,W);let X,K;const G=(H+Y)/2;if(H===Y)X=0,K=0;else{const U=Y-H;switch(K=G<=0.5?U/(Y+H):U/(2-Y-H),Y){case Z:X=(Q-W)/U+(Q<W?6:0);break;case Q:X=(W-Z)/U+2;break;case W:X=(Z-Q)/U+4;break}X/=6}return J.h=X,J.s=K,J.l=G,J}getRGB(J,$=h0.workingColorSpace){return h0.fromWorkingColorSpace(HJ.copy(this),$),J.r=HJ.r,J.g=HJ.g,J.b=HJ.b,J}getStyle(J="srgb"){h0.fromWorkingColorSpace(HJ.copy(this),J);const{r:$,g:Z,b:Q}=HJ;if(J!=="srgb")return`color(${J} ${$.toFixed(3)} ${Z.toFixed(3)} ${Q.toFixed(3)})`;return`rgb(${Math.round($*255)},${Math.round(Z*255)},${Math.round(Q*255)})`}offsetHSL(J,$,Z){return this.getHSL(uJ),this.setHSL(uJ.h+J,uJ.s+$,uJ.l+Z)}add(J){return this.r+=J.r,this.g+=J.g,this.b+=J.b,this}addColors(J,$){return this.r=J.r+$.r,this.g=J.g+$.g,this.b=J.b+$.b,this}addScalar(J){return this.r+=J,this.g+=J,this.b+=J,this}sub(J){return this.r=Math.max(0,this.r-J.r),this.g=Math.max(0,this.g-J.g),this.b=Math.max(0,this.b-J.b),this}multiply(J){return this.r*=J.r,this.g*=J.g,this.b*=J.b,this}multiplyScalar(J){return this.r*=J,this.g*=J,this.b*=J,this}lerp(J,$){return this.r+=(J.r-this.r)*$,this.g+=(J.g-this.g)*$,this.b+=(J.b-this.b)*$,this}lerpColors(J,$,Z){return this.r=J.r+($.r-J.r)*Z,this.g=J.g+($.g-J.g)*Z,this.b=J.b+($.b-J.b)*Z,this}lerpHSL(J,$){this.getHSL(uJ),J.getHSL(t6);const Z=L7(uJ.h,t6.h,$),Q=L7(uJ.s,t6.s,$),W=L7(uJ.l,t6.l,$);return this.setHSL(Z,Q,W),this}setFromVector3(J){return this.r=J.x,this.g=J.y,this.b=J.z,this}applyMatrix3(J){const $=this.r,Z=this.g,Q=this.b,W=J.elements;return this.r=W[0]*$+W[3]*Z+W[6]*Q,this.g=W[1]*$+W[4]*Z+W[7]*Q,this.b=W[2]*$+W[5]*Z+W[8]*Q,this}equals(J){return J.r===this.r&&J.g===this.g&&J.b===this.b}fromArray(J,$=0){return this.r=J[$],this.g=J[$+1],this.b=J[$+2],this}toArray(J=[],$=0){return J[$]=this.r,J[$+1]=this.g,J[$+2]=this.b,J}fromBufferAttribute(J,$){return this.r=J.getX($),this.g=J.getY($),this.b=J.getZ($),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}var HJ=new g0;g0.NAMES=V9;class W8 extends w6{constructor(J){super();this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new g0(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=0.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(J)}copy(J){return super.copy(J),this.color.copy(J.color),this.map=J.map,this.lightMap=J.lightMap,this.lightMapIntensity=J.lightMapIntensity,this.aoMap=J.aoMap,this.aoMapIntensity=J.aoMapIntensity,this.specularMap=J.specularMap,this.alphaMap=J.alphaMap,this.envMap=J.envMap,this.combine=J.combine,this.reflectivity=J.reflectivity,this.refractionRatio=J.refractionRatio,this.wireframe=J.wireframe,this.wireframeLinewidth=J.wireframeLinewidth,this.wireframeLinecap=J.wireframeLinecap,this.wireframeLinejoin=J.wireframeLinejoin,this.fog=J.fog,this}}var t0=new v,e6=new m0;class CJ{constructor(J,$,Z=!1){if(Array.isArray(J))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=J,this.itemSize=$,this.count=J!==void 0?J.length/$:0,this.normalized=Z,this.usage=35044,this.updateRange={offset:0,count:-1},this.gpuType=1015,this.version=0}onUploadCallback(){}set needsUpdate(J){if(J===!0)this.version++}setUsage(J){return this.usage=J,this}copy(J){return this.name=J.name,this.array=new J.array.constructor(J.array),this.itemSize=J.itemSize,this.count=J.count,this.normalized=J.normalized,this.usage=J.usage,this.gpuType=J.gpuType,this}copyAt(J,$,Z){J*=this.itemSize,Z*=$.itemSize;for(let Q=0,W=this.itemSize;Q<W;Q++)this.array[J+Q]=$.array[Z+Q];return this}copyArray(J){return this.array.set(J),this}applyMatrix3(J){if(this.itemSize===2)for(let $=0,Z=this.count;$<Z;$++)e6.fromBufferAttribute(this,$),e6.applyMatrix3(J),this.setXY($,e6.x,e6.y);else if(this.itemSize===3)for(let $=0,Z=this.count;$<Z;$++)t0.fromBufferAttribute(this,$),t0.applyMatrix3(J),this.setXYZ($,t0.x,t0.y,t0.z);return this}applyMatrix4(J){for(let $=0,Z=this.count;$<Z;$++)t0.fromBufferAttribute(this,$),t0.applyMatrix4(J),this.setXYZ($,t0.x,t0.y,t0.z);return this}applyNormalMatrix(J){for(let $=0,Z=this.count;$<Z;$++)t0.fromBufferAttribute(this,$),t0.applyNormalMatrix(J),this.setXYZ($,t0.x,t0.y,t0.z);return this}transformDirection(J){for(let $=0,Z=this.count;$<Z;$++)t0.fromBufferAttribute(this,$),t0.transformDirection(J),this.setXYZ($,t0.x,t0.y,t0.z);return this}set(J,$=0){return this.array.set(J,$),this}getComponent(J,$){let Z=this.array[J*this.itemSize+$];if(this.normalized)Z=P6(Z,this.array);return Z}setComponent(J,$,Z){if(this.normalized)Z=qJ(Z,this.array);return this.array[J*this.itemSize+$]=Z,this}getX(J){let $=this.array[J*this.itemSize];if(this.normalized)$=P6($,this.array);return $}setX(J,$){if(this.normalized)$=qJ($,this.array);return this.array[J*this.itemSize]=$,this}getY(J){let $=this.array[J*this.itemSize+1];if(this.normalized)$=P6($,this.array);return $}setY(J,$){if(this.normalized)$=qJ($,this.array);return this.array[J*this.itemSize+1]=$,this}getZ(J){let $=this.array[J*this.itemSize+2];if(this.normalized)$=P6($,this.array);return $}setZ(J,$){if(this.normalized)$=qJ($,this.array);return this.array[J*this.itemSize+2]=$,this}getW(J){let $=this.array[J*this.itemSize+3];if(this.normalized)$=P6($,this.array);return $}setW(J,$){if(this.normalized)$=qJ($,this.array);return this.array[J*this.itemSize+3]=$,this}setXY(J,$,Z){if(J*=this.itemSize,this.normalized)$=qJ($,this.array),Z=qJ(Z,this.array);return this.array[J+0]=$,this.array[J+1]=Z,this}setXYZ(J,$,Z,Q){if(J*=this.itemSize,this.normalized)$=qJ($,this.array),Z=qJ(Z,this.array),Q=qJ(Q,this.array);return this.array[J+0]=$,this.array[J+1]=Z,this.array[J+2]=Q,this}setXYZW(J,$,Z,Q,W){if(J*=this.itemSize,this.normalized)$=qJ($,this.array),Z=qJ(Z,this.array),Q=qJ(Q,this.array),W=qJ(W,this.array);return this.array[J+0]=$,this.array[J+1]=Z,this.array[J+2]=Q,this.array[J+3]=W,this}onUpload(J){return this.onUploadCallback=J,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const J={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};if(this.name!=="")J.name=this.name;if(this.usage!==35044)J.usage=this.usage;if(this.updateRange.offset!==0||this.updateRange.count!==-1)J.updateRange=this.updateRange;return J}}class Y8 extends CJ{constructor(J,$,Z){super(new Uint16Array(J),$,Z)}}class X8 extends CJ{constructor(J,$,Z){super(new Uint32Array(J),$,Z)}}class cJ extends CJ{constructor(J,$,Z){super(new Float32Array(J),$,Z)}}var H$=0,BJ=new ZJ,l7=new DJ,R6=new v,OJ=new I6,f6=new I6,$J=new v;class PJ extends Z6{constructor(){super();this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:H$++}),this.uuid=h6(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:Infinity},this.userData={}}getIndex(){return this.index}setIndex(J){if(Array.isArray(J))this.index=new((H9(J))?X8:Y8)(J,1);else this.index=J;return this}getAttribute(J){return this.attributes[J]}setAttribute(J,$){return this.attributes[J]=$,this}deleteAttribute(J){return delete this.attributes[J],this}hasAttribute(J){return this.attributes[J]!==void 0}addGroup(J,$,Z=0){this.groups.push({start:J,count:$,materialIndex:Z})}clearGroups(){this.groups=[]}setDrawRange(J,$){this.drawRange.start=J,this.drawRange.count=$}applyMatrix4(J){const $=this.attributes.position;if($!==void 0)$.applyMatrix4(J),$.needsUpdate=!0;const Z=this.attributes.normal;if(Z!==void 0){const W=new A0().getNormalMatrix(J);Z.applyNormalMatrix(W),Z.needsUpdate=!0}const Q=this.attributes.tangent;if(Q!==void 0)Q.transformDirection(J),Q.needsUpdate=!0;if(this.boundingBox!==null)this.computeBoundingBox();if(this.boundingSphere!==null)this.computeBoundingSphere();return this}applyQuaternion(J){return BJ.makeRotationFromQuaternion(J),this.applyMatrix4(BJ),this}rotateX(J){return BJ.makeRotationX(J),this.applyMatrix4(BJ),this}rotateY(J){return BJ.makeRotationY(J),this.applyMatrix4(BJ),this}rotateZ(J){return BJ.makeRotationZ(J),this.applyMatrix4(BJ),this}translate(J,$,Z){return BJ.makeTranslation(J,$,Z),this.applyMatrix4(BJ),this}scale(J,$,Z){return BJ.makeScale(J,$,Z),this.applyMatrix4(BJ),this}lookAt(J){return l7.lookAt(J),l7.updateMatrix(),this.applyMatrix4(l7.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(R6).negate(),this.translate(R6.x,R6.y,R6.z),this}setFromPoints(J){const $=[];for(let Z=0,Q=J.length;Z<Q;Z++){const W=J[Z];$.push(W.x,W.y,W.z||0)}return this.setAttribute("position",new cJ($,3)),this}computeBoundingBox(){if(this.boundingBox===null)this.boundingBox=new I6;const J=this.attributes.position,$=this.morphAttributes.position;if(J&&J.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new v((-Infinity),(-Infinity),(-Infinity)),new v(Infinity,Infinity,Infinity));return}if(J!==void 0){if(this.boundingBox.setFromBufferAttribute(J),$)for(let Z=0,Q=$.length;Z<Q;Z++){const W=$[Z];if(OJ.setFromBufferAttribute(W),this.morphTargetsRelative)$J.addVectors(this.boundingBox.min,OJ.min),this.boundingBox.expandByPoint($J),$J.addVectors(this.boundingBox.max,OJ.max),this.boundingBox.expandByPoint($J);else this.boundingBox.expandByPoint(OJ.min),this.boundingBox.expandByPoint(OJ.max)}}else this.boundingBox.makeEmpty();if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){if(this.boundingSphere===null)this.boundingSphere=new g6;const J=this.attributes.position,$=this.morphAttributes.position;if(J&&J.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new v,Infinity);return}if(J){const Z=this.boundingSphere.center;if(OJ.setFromBufferAttribute(J),$)for(let W=0,Y=$.length;W<Y;W++){const H=$[W];if(f6.setFromBufferAttribute(H),this.morphTargetsRelative)$J.addVectors(OJ.min,f6.min),OJ.expandByPoint($J),$J.addVectors(OJ.max,f6.max),OJ.expandByPoint($J);else OJ.expandByPoint(f6.min),OJ.expandByPoint(f6.max)}OJ.getCenter(Z);let Q=0;for(let W=0,Y=J.count;W<Y;W++)$J.fromBufferAttribute(J,W),Q=Math.max(Q,Z.distanceToSquared($J));if($)for(let W=0,Y=$.length;W<Y;W++){const H=$[W],X=this.morphTargetsRelative;for(let K=0,G=H.count;K<G;K++){if($J.fromBufferAttribute(H,K),X)R6.fromBufferAttribute(J,K),$J.add(R6);Q=Math.max(Q,Z.distanceToSquared($J))}}if(this.boundingSphere.radius=Math.sqrt(Q),isNaN(this.boundingSphere.radius))console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const J=this.index,$=this.attributes;if(J===null||$.position===void 0||$.normal===void 0||$.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const Z=J.array,Q=$.position.array,W=$.normal.array,Y=$.uv.array,H=Q.length/3;if(this.hasAttribute("tangent")===!1)this.setAttribute("tangent",new CJ(new Float32Array(4*H),4));const X=this.getAttribute("tangent").array,K=[],G=[];for(let N=0;N<H;N++)K[N]=new v,G[N]=new v;const U=new v,V=new v,R=new v,D=new m0,M=new m0,O=new m0,E=new v,q=new v;function I(N,C,m){U.fromArray(Q,N*3),V.fromArray(Q,C*3),R.fromArray(Q,m*3),D.fromArray(Y,N*2),M.fromArray(Y,C*2),O.fromArray(Y,m*2),V.sub(U),R.sub(U),M.sub(D),O.sub(D);const e=1/(M.x*O.y-O.x*M.y);if(!isFinite(e))return;E.copy(V).multiplyScalar(O.y).addScaledVector(R,-M.y).multiplyScalar(e),q.copy(R).multiplyScalar(M.x).addScaledVector(V,-O.x).multiplyScalar(e),K[N].add(E),K[C].add(E),K[m].add(E),G[N].add(q),G[C].add(q),G[m].add(q)}let z=this.groups;if(z.length===0)z=[{start:0,count:Z.length}];for(let N=0,C=z.length;N<C;++N){const m=z[N],e=m.start,W0=m.count;for(let P=e,l=e+W0;P<l;P+=3)I(Z[P+0],Z[P+1],Z[P+2])}const A=new v,L=new v,w=new v,g=new v;function u(N){w.fromArray(W,N*3),g.copy(w);const C=K[N];A.copy(C),A.sub(w.multiplyScalar(w.dot(C))).normalize(),L.crossVectors(g,C);const e=L.dot(G[N])<0?-1:1;X[N*4]=A.x,X[N*4+1]=A.y,X[N*4+2]=A.z,X[N*4+3]=e}for(let N=0,C=z.length;N<C;++N){const m=z[N],e=m.start,W0=m.count;for(let P=e,l=e+W0;P<l;P+=3)u(Z[P+0]),u(Z[P+1]),u(Z[P+2])}}computeVertexNormals(){const J=this.index,$=this.getAttribute("position");if($!==void 0){let Z=this.getAttribute("normal");if(Z===void 0)Z=new CJ(new Float32Array($.count*3),3),this.setAttribute("normal",Z);else for(let V=0,R=Z.count;V<R;V++)Z.setXYZ(V,0,0,0);const Q=new v,W=new v,Y=new v,H=new v,X=new v,K=new v,G=new v,U=new v;if(J)for(let V=0,R=J.count;V<R;V+=3){const D=J.getX(V+0),M=J.getX(V+1),O=J.getX(V+2);Q.fromBufferAttribute($,D),W.fromBufferAttribute($,M),Y.fromBufferAttribute($,O),G.subVectors(Y,W),U.subVectors(Q,W),G.cross(U),H.fromBufferAttribute(Z,D),X.fromBufferAttribute(Z,M),K.fromBufferAttribute(Z,O),H.add(G),X.add(G),K.add(G),Z.setXYZ(D,H.x,H.y,H.z),Z.setXYZ(M,X.x,X.y,X.z),Z.setXYZ(O,K.x,K.y,K.z)}else for(let V=0,R=$.count;V<R;V+=3)Q.fromBufferAttribute($,V+0),W.fromBufferAttribute($,V+1),Y.fromBufferAttribute($,V+2),G.subVectors(Y,W),U.subVectors(Q,W),G.cross(U),Z.setXYZ(V+0,G.x,G.y,G.z),Z.setXYZ(V+1,G.x,G.y,G.z),Z.setXYZ(V+2,G.x,G.y,G.z);this.normalizeNormals(),Z.needsUpdate=!0}}normalizeNormals(){const J=this.attributes.normal;for(let $=0,Z=J.count;$<Z;$++)$J.fromBufferAttribute(J,$),$J.normalize(),J.setXYZ($,$J.x,$J.y,$J.z)}toNonIndexed(){function J(H,X){const{array:K,itemSize:G,normalized:U}=H,V=new K.constructor(X.length*G);let R=0,D=0;for(let M=0,O=X.length;M<O;M++){if(H.isInterleavedBufferAttribute)R=X[M]*H.data.stride+H.offset;else R=X[M]*G;for(let E=0;E<G;E++)V[D++]=K[R++]}return new CJ(V,G,U)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const $=new PJ,Z=this.index.array,Q=this.attributes;for(let H in Q){const X=Q[H],K=J(X,Z);$.setAttribute(H,K)}const W=this.morphAttributes;for(let H in W){const X=[],K=W[H];for(let G=0,U=K.length;G<U;G++){const V=K[G],R=J(V,Z);X.push(R)}$.morphAttributes[H]=X}$.morphTargetsRelative=this.morphTargetsRelative;const Y=this.groups;for(let H=0,X=Y.length;H<X;H++){const K=Y[H];$.addGroup(K.start,K.count,K.materialIndex)}return $}toJSON(){const J={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(J.uuid=this.uuid,J.type=this.type,this.name!=="")J.name=this.name;if(Object.keys(this.userData).length>0)J.userData=this.userData;if(this.parameters!==void 0){const X=this.parameters;for(let K in X)if(X[K]!==void 0)J[K]=X[K];return J}J.data={attributes:{}};const $=this.index;if($!==null)J.data.index={type:$.array.constructor.name,array:Array.prototype.slice.call($.array)};const Z=this.attributes;for(let X in Z){const K=Z[X];J.data.attributes[X]=K.toJSON(J.data)}const Q={};let W=!1;for(let X in this.morphAttributes){const K=this.morphAttributes[X],G=[];for(let U=0,V=K.length;U<V;U++){const R=K[U];G.push(R.toJSON(J.data))}if(G.length>0)Q[X]=G,W=!0}if(W)J.data.morphAttributes=Q,J.data.morphTargetsRelative=this.morphTargetsRelative;const Y=this.groups;if(Y.length>0)J.data.groups=JSON.parse(JSON.stringify(Y));const H=this.boundingSphere;if(H!==null)J.data.boundingSphere={center:H.center.toArray(),radius:H.radius};return J}clone(){return new this.constructor().copy(this)}copy(J){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const $={};this.name=J.name;const Z=J.index;if(Z!==null)this.setIndex(Z.clone($));const Q=J.attributes;for(let K in Q){const G=Q[K];this.setAttribute(K,G.clone($))}const W=J.morphAttributes;for(let K in W){const G=[],U=W[K];for(let V=0,R=U.length;V<R;V++)G.push(U[V].clone($));this.morphAttributes[K]=G}this.morphTargetsRelative=J.morphTargetsRelative;const Y=J.groups;for(let K=0,G=Y.length;K<G;K++){const U=Y[K];this.addGroup(U.start,U.count,U.materialIndex)}const H=J.boundingBox;if(H!==null)this.boundingBox=H.clone();const X=J.boundingSphere;if(X!==null)this.boundingSphere=X.clone();return this.drawRange.start=J.drawRange.start,this.drawRange.count=J.drawRange.count,this.userData=J.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}var f8=new ZJ,tJ=new Z8,J7=new g6,v8=new v,E6=new v,D6=new v,F6=new v,u7=new v,$7=new v,Z7=new m0,Q7=new m0,W7=new m0,j8=new v,b8=new v,x8=new v,Y7=new v,X7=new v;class hJ extends DJ{constructor(J=new PJ,$=new W8){super();this.isMesh=!0,this.type="Mesh",this.geometry=J,this.material=$,this.updateMorphTargets()}copy(J,$){if(super.copy(J,$),J.morphTargetInfluences!==void 0)this.morphTargetInfluences=J.morphTargetInfluences.slice();if(J.morphTargetDictionary!==void 0)this.morphTargetDictionary=Object.assign({},J.morphTargetDictionary);return this.material=Array.isArray(J.material)?J.material.slice():J.material,this.geometry=J.geometry,this}updateMorphTargets(){const $=this.geometry.morphAttributes,Z=Object.keys($);if(Z.length>0){const Q=$[Z[0]];if(Q!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let W=0,Y=Q.length;W<Y;W++){const H=Q[W].name||String(W);this.morphTargetInfluences.push(0),this.morphTargetDictionary[H]=W}}}}getVertexPosition(J,$){const Z=this.geometry,Q=Z.attributes.position,W=Z.morphAttributes.position,Y=Z.morphTargetsRelative;$.fromBufferAttribute(Q,J);const H=this.morphTargetInfluences;if(W&&H){$7.set(0,0,0);for(let X=0,K=W.length;X<K;X++){const G=H[X],U=W[X];if(G===0)continue;if(u7.fromBufferAttribute(U,J),Y)$7.addScaledVector(u7,G);else $7.addScaledVector(u7.sub($),G)}$.add($7)}return $}raycast(J,$){const Z=this.geometry,Q=this.material,W=this.matrixWorld;if(Q===void 0)return;if(Z.boundingSphere===null)Z.computeBoundingSphere();if(J7.copy(Z.boundingSphere),J7.applyMatrix4(W),tJ.copy(J.ray).recast(J.near),J7.containsPoint(tJ.origin)===!1){if(tJ.intersectSphere(J7,v8)===null)return;if(tJ.origin.distanceToSquared(v8)>(J.far-J.near)**2)return}if(f8.copy(W).invert(),tJ.copy(J.ray).applyMatrix4(f8),Z.boundingBox!==null){if(tJ.intersectsBox(Z.boundingBox)===!1)return}this._computeIntersections(J,$,tJ)}_computeIntersections(J,$,Z){let Q;const W=this.geometry,Y=this.material,H=W.index,X=W.attributes.position,K=W.attributes.uv,G=W.attributes.uv1,U=W.attributes.normal,V=W.groups,R=W.drawRange;if(H!==null)if(Array.isArray(Y))for(let D=0,M=V.length;D<M;D++){const O=V[D],E=Y[O.materialIndex],q=Math.max(O.start,R.start),I=Math.min(H.count,Math.min(O.start+O.count,R.start+R.count));for(let z=q,A=I;z<A;z+=3){const L=H.getX(z),w=H.getX(z+1),g=H.getX(z+2);if(Q=H7(this,E,J,Z,K,G,U,L,w,g),Q)Q.faceIndex=Math.floor(z/3),Q.face.materialIndex=O.materialIndex,$.push(Q)}}else{const D=Math.max(0,R.start),M=Math.min(H.count,R.start+R.count);for(let O=D,E=M;O<E;O+=3){const q=H.getX(O),I=H.getX(O+1),z=H.getX(O+2);if(Q=H7(this,Y,J,Z,K,G,U,q,I,z),Q)Q.faceIndex=Math.floor(O/3),$.push(Q)}}else if(X!==void 0)if(Array.isArray(Y))for(let D=0,M=V.length;D<M;D++){const O=V[D],E=Y[O.materialIndex],q=Math.max(O.start,R.start),I=Math.min(X.count,Math.min(O.start+O.count,R.start+R.count));for(let z=q,A=I;z<A;z+=3){const L=z,w=z+1,g=z+2;if(Q=H7(this,E,J,Z,K,G,U,L,w,g),Q)Q.faceIndex=Math.floor(z/3),Q.face.materialIndex=O.materialIndex,$.push(Q)}}else{const D=Math.max(0,R.start),M=Math.min(X.count,R.start+R.count);for(let O=D,E=M;O<E;O+=3){const q=O,I=O+1,z=O+2;if(Q=H7(this,Y,J,Z,K,G,U,q,I,z),Q)Q.faceIndex=Math.floor(O/3),$.push(Q)}}}}class p6 extends PJ{constructor(J=1,$=1,Z=1,Q=1,W=1,Y=1){super();this.type="BoxGeometry",this.parameters={width:J,height:$,depth:Z,widthSegments:Q,heightSegments:W,depthSegments:Y};const H=this;Q=Math.floor(Q),W=Math.floor(W),Y=Math.floor(Y);const X=[],K=[],G=[],U=[];let V=0,R=0;D("z","y","x",-1,-1,Z,$,J,Y,W,0),D("z","y","x",1,-1,Z,$,-J,Y,W,1),D("x","z","y",1,1,J,Z,$,Q,Y,2),D("x","z","y",1,-1,J,Z,-$,Q,Y,3),D("x","y","z",1,-1,J,$,Z,Q,W,4),D("x","y","z",-1,-1,J,$,-Z,Q,W,5),this.setIndex(X),this.setAttribute("position",new cJ(K,3)),this.setAttribute("normal",new cJ(G,3)),this.setAttribute("uv",new cJ(U,2));function D(M,O,E,q,I,z,A,L,w,g,u){const N=z/w,C=A/g,m=z/2,e=A/2,W0=L/2,P=w+1,l=g+1;let n=0,d=0;const r=new v;for(let p=0;p<l;p++){const T=p*C-e;for(let h=0;h<P;h++){const a=h*N-m;r[M]=a*q,r[O]=T*I,r[E]=W0,K.push(r.x,r.y,r.z),r[M]=0,r[O]=0,r[E]=L>0?1:-1,G.push(r.x,r.y,r.z),U.push(h/w),U.push(1-p/g),n+=1}}for(let p=0;p<g;p++)for(let T=0;T<w;T++){const h=V+T+P*p,a=V+T+P*(p+1),G0=V+(T+1)+P*(p+1),X0=V+(T+1)+P*p;X.push(h,a,X0),X.push(a,G0,X0),d+=6}H.addGroup(R,d,u),R+=d,V+=n}}copy(J){return super.copy(J),this.parameters=Object.assign({},J.parameters),this}static fromJSON(J){return new p6(J.width,J.height,J.depth,J.widthSegments,J.heightSegments,J.depthSegments)}}var V$={clone:B6,merge:UJ},U$="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",q$="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";class sJ extends w6{constructor(J){super();if(this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=U$,this.fragmentShader=q$,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,J!==void 0)this.setValues(J)}copy(J){return super.copy(J),this.fragmentShader=J.fragmentShader,this.vertexShader=J.vertexShader,this.uniforms=B6(J.uniforms),this.uniformsGroups=G$(J.uniformsGroups),this.defines=Object.assign({},J.defines),this.wireframe=J.wireframe,this.wireframeLinewidth=J.wireframeLinewidth,this.fog=J.fog,this.lights=J.lights,this.clipping=J.clipping,this.extensions=Object.assign({},J.extensions),this.glslVersion=J.glslVersion,this}toJSON(J){const $=super.toJSON(J);$.glslVersion=this.glslVersion,$.uniforms={};for(let Q in this.uniforms){const Y=this.uniforms[Q].value;if(Y&&Y.isTexture)$.uniforms[Q]={type:"t",value:Y.toJSON(J).uuid};else if(Y&&Y.isColor)$.uniforms[Q]={type:"c",value:Y.getHex()};else if(Y&&Y.isVector2)$.uniforms[Q]={type:"v2",value:Y.toArray()};else if(Y&&Y.isVector3)$.uniforms[Q]={type:"v3",value:Y.toArray()};else if(Y&&Y.isVector4)$.uniforms[Q]={type:"v4",value:Y.toArray()};else if(Y&&Y.isMatrix3)$.uniforms[Q]={type:"m3",value:Y.toArray()};else if(Y&&Y.isMatrix4)$.uniforms[Q]={type:"m4",value:Y.toArray()};else $.uniforms[Q]={value:Y}}if(Object.keys(this.defines).length>0)$.defines=this.defines;$.vertexShader=this.vertexShader,$.fragmentShader=this.fragmentShader,$.lights=this.lights,$.clipping=this.clipping;const Z={};for(let Q in this.extensions)if(this.extensions[Q]===!0)Z[Q]=!0;if(Object.keys(Z).length>0)$.extensions=Z;return $}}class H8 extends DJ{constructor(){super();this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new ZJ,this.projectionMatrix=new ZJ,this.projectionMatrixInverse=new ZJ,this.coordinateSystem=2000}copy(J,$){return super.copy(J,$),this.matrixWorldInverse.copy(J.matrixWorldInverse),this.projectionMatrix.copy(J.projectionMatrix),this.projectionMatrixInverse.copy(J.projectionMatrixInverse),this.coordinateSystem=J.coordinateSystem,this}getWorldDirection(J){return super.getWorldDirection(J).negate()}updateMatrixWorld(J){super.updateMatrixWorld(J),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(J,$){super.updateWorldMatrix(J,$),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class EJ extends H8{constructor(J=50,$=1,Z=0.1,Q=2000){super();this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=J,this.zoom=1,this.near=Z,this.far=Q,this.focus=10,this.aspect=$,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(J,$){return super.copy(J,$),this.fov=J.fov,this.zoom=J.zoom,this.near=J.near,this.far=J.far,this.focus=J.focus,this.aspect=J.aspect,this.view=J.view===null?null:Object.assign({},J.view),this.filmGauge=J.filmGauge,this.filmOffset=J.filmOffset,this}setFocalLength(J){const $=0.5*this.getFilmHeight()/J;this.fov=o7*2*Math.atan($),this.updateProjectionMatrix()}getFocalLength(){const J=Math.tan(C7*0.5*this.fov);return 0.5*this.getFilmHeight()/J}getEffectiveFOV(){return o7*2*Math.atan(Math.tan(C7*0.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(J,$,Z,Q,W,Y){if(this.aspect=J/$,this.view===null)this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};this.view.enabled=!0,this.view.fullWidth=J,this.view.fullHeight=$,this.view.offsetX=Z,this.view.offsetY=Q,this.view.width=W,this.view.height=Y,this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null)this.view.enabled=!1;this.updateProjectionMatrix()}updateProjectionMatrix(){const J=this.near;let $=J*Math.tan(C7*0.5*this.fov)/this.zoom,Z=2*$,Q=this.aspect*Z,W=-0.5*Q;const Y=this.view;if(this.view!==null&&this.view.enabled){const{fullWidth:X,fullHeight:K}=Y;W+=Y.offsetX*Q/X,$-=Y.offsetY*Z/K,Q*=Y.width/X,Z*=Y.height/K}const H=this.filmOffset;if(H!==0)W+=J*H/this.getFilmWidth();this.projectionMatrix.makePerspective(W,W+Q,$,$-Z,J,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(J){const $=super.toJSON(J);if($.object.fov=this.fov,$.object.zoom=this.zoom,$.object.near=this.near,$.object.far=this.far,$.object.focus=this.focus,$.object.aspect=this.aspect,this.view!==null)$.object.view=Object.assign({},this.view);return $.object.filmGauge=this.filmGauge,$.object.filmOffset=this.filmOffset,$}}var N6=-90,O6=1;class q9 extends DJ{constructor(J,$,Z){super();this.type="CubeCamera",this.renderTarget=Z,this.coordinateSystem=null,this.activeMipmapLevel=0;const Q=new EJ(N6,O6,J,$);Q.layers=this.layers,this.add(Q);const W=new EJ(N6,O6,J,$);W.layers=this.layers,this.add(W);const Y=new EJ(N6,O6,J,$);Y.layers=this.layers,this.add(Y);const H=new EJ(N6,O6,J,$);H.layers=this.layers,this.add(H);const X=new EJ(N6,O6,J,$);X.layers=this.layers,this.add(X);const K=new EJ(N6,O6,J,$);K.layers=this.layers,this.add(K)}updateCoordinateSystem(){const J=this.coordinateSystem,$=this.children.concat(),[Z,Q,W,Y,H,X]=$;for(let K of $)this.remove(K);if(J===2000)Z.up.set(0,1,0),Z.lookAt(1,0,0),Q.up.set(0,1,0),Q.lookAt(-1,0,0),W.up.set(0,0,-1),W.lookAt(0,1,0),Y.up.set(0,0,1),Y.lookAt(0,-1,0),H.up.set(0,1,0),H.lookAt(0,0,1),X.up.set(0,1,0),X.lookAt(0,0,-1);else if(J===2001)Z.up.set(0,-1,0),Z.lookAt(-1,0,0),Q.up.set(0,-1,0),Q.lookAt(1,0,0),W.up.set(0,0,1),W.lookAt(0,1,0),Y.up.set(0,0,-1),Y.lookAt(0,-1,0),H.up.set(0,-1,0),H.lookAt(0,0,1),X.up.set(0,-1,0),X.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+J);for(let K of $)this.add(K),K.updateMatrixWorld()}update(J,$){if(this.parent===null)this.updateMatrixWorld();const{renderTarget:Z,activeMipmapLevel:Q}=this;if(this.coordinateSystem!==J.coordinateSystem)this.coordinateSystem=J.coordinateSystem,this.updateCoordinateSystem();const[W,Y,H,X,K,G]=this.children,U=J.getRenderTarget(),V=J.getActiveCubeFace(),R=J.getActiveMipmapLevel(),D=J.xr.enabled;J.xr.enabled=!1;const M=Z.texture.generateMipmaps;Z.texture.generateMipmaps=!1,J.setRenderTarget(Z,0,Q),J.render($,W),J.setRenderTarget(Z,1,Q),J.render($,Y),J.setRenderTarget(Z,2,Q),J.render($,H),J.setRenderTarget(Z,3,Q),J.render($,X),J.setRenderTarget(Z,4,Q),J.render($,K),Z.texture.generateMipmaps=M,J.setRenderTarget(Z,5,Q),J.render($,G),J.setRenderTarget(U,V,R),J.xr.enabled=D,Z.texture.needsPMREMUpdate=!0}}class K8 extends MJ{constructor(J,$,Z,Q,W,Y,H,X,K,G){J=J!==void 0?J:[],$=$!==void 0?$:301;super(J,$,Z,Q,W,Y,H,X,K,G);this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(J){this.image=J}}class R9 extends nJ{constructor(J=1,$={}){super(J,J,$);this.isWebGLCubeRenderTarget=!0;const Z={width:J,height:J,depth:1},Q=[Z,Z,Z,Z,Z,Z];if($.encoding!==void 0)b6("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."),$.colorSpace=$.encoding===3001?"srgb":"";this.texture=new K8(Q,$.mapping,$.wrapS,$.wrapT,$.magFilter,$.minFilter,$.format,$.type,$.anisotropy,$.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=$.generateMipmaps!==void 0?$.generateMipmaps:!1,this.texture.minFilter=$.minFilter!==void 0?$.minFilter:1006}fromEquirectangularTexture(J,$){this.texture.type=$.type,this.texture.colorSpace=$.colorSpace,this.texture.generateMipmaps=$.generateMipmaps,this.texture.minFilter=$.minFilter,this.texture.magFilter=$.magFilter;const Z={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},Q=new p6(5,5,5),W=new sJ({name:"CubemapFromEquirect",uniforms:B6(Z.uniforms),vertexShader:Z.vertexShader,fragmentShader:Z.fragmentShader,side:1,blending:0});W.uniforms.tEquirect.value=$;const Y=new hJ(Q,W),H=$.minFilter;if($.minFilter===1008)$.minFilter=1006;return new q9(1,10,this).update(J,Y),$.minFilter=H,Y.geometry.dispose(),Y.material.dispose(),this}clear(J,$,Z,Q){const W=J.getRenderTarget();for(let Y=0;Y<6;Y++)J.setRenderTarget(this,Y),J.clear($,Z,Q);J.setRenderTarget(W)}}var d7=new v,R$=new v,E$=new A0;class dJ{constructor(J=new v(1,0,0),$=0){this.isPlane=!0,this.normal=J,this.constant=$}set(J,$){return this.normal.copy(J),this.constant=$,this}setComponents(J,$,Z,Q){return this.normal.set(J,$,Z),this.constant=Q,this}setFromNormalAndCoplanarPoint(J,$){return this.normal.copy(J),this.constant=-$.dot(this.normal),this}setFromCoplanarPoints(J,$,Z){const Q=d7.subVectors(Z,$).cross(R$.subVectors(J,$)).normalize();return this.setFromNormalAndCoplanarPoint(Q,J),this}copy(J){return this.normal.copy(J.normal),this.constant=J.constant,this}normalize(){const J=1/this.normal.length();return this.normal.multiplyScalar(J),this.constant*=J,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(J){return this.normal.dot(J)+this.constant}distanceToSphere(J){return this.distanceToPoint(J.center)-J.radius}projectPoint(J,$){return $.copy(J).addScaledVector(this.normal,-this.distanceToPoint(J))}intersectLine(J,$){const Z=J.delta(d7),Q=this.normal.dot(Z);if(Q===0){if(this.distanceToPoint(J.start)===0)return $.copy(J.start);return null}const W=-(J.start.dot(this.normal)+this.constant)/Q;if(W<0||W>1)return null;return $.copy(J.start).addScaledVector(Z,W)}intersectsLine(J){const $=this.distanceToPoint(J.start),Z=this.distanceToPoint(J.end);return $<0&&Z>0||Z<0&&$>0}intersectsBox(J){return J.intersectsPlane(this)}intersectsSphere(J){return J.intersectsPlane(this)}coplanarPoint(J){return J.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(J,$){const Z=$||E$.getNormalMatrix(J),Q=this.coplanarPoint(d7).applyMatrix4(J),W=this.normal.applyMatrix3(Z).normalize();return this.constant=-Q.dot(W),this}translate(J){return this.constant-=J.dot(this.normal),this}equals(J){return J.normal.equals(this.normal)&&J.constant===this.constant}clone(){return new this.constructor().copy(this)}}var eJ=new g6,K7=new v;class G8{constructor(J=new dJ,$=new dJ,Z=new dJ,Q=new dJ,W=new dJ,Y=new dJ){this.planes=[J,$,Z,Q,W,Y]}set(J,$,Z,Q,W,Y){const H=this.planes;return H[0].copy(J),H[1].copy($),H[2].copy(Z),H[3].copy(Q),H[4].copy(W),H[5].copy(Y),this}copy(J){const $=this.planes;for(let Z=0;Z<6;Z++)$[Z].copy(J.planes[Z]);return this}setFromProjectionMatrix(J,$=2000){const Z=this.planes,Q=J.elements,W=Q[0],Y=Q[1],H=Q[2],X=Q[3],K=Q[4],G=Q[5],U=Q[6],V=Q[7],R=Q[8],D=Q[9],M=Q[10],O=Q[11],E=Q[12],q=Q[13],I=Q[14],z=Q[15];if(Z[0].setComponents(X-W,V-K,O-R,z-E).normalize(),Z[1].setComponents(X+W,V+K,O+R,z+E).normalize(),Z[2].setComponents(X+Y,V+G,O+D,z+q).normalize(),Z[3].setComponents(X-Y,V-G,O-D,z-q).normalize(),Z[4].setComponents(X-H,V-U,O-M,z-I).normalize(),$===2000)Z[5].setComponents(X+H,V+U,O+M,z+I).normalize();else if($===2001)Z[5].setComponents(H,U,M,I).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+$);return this}intersectsObject(J){if(J.boundingSphere!==void 0){if(J.boundingSphere===null)J.computeBoundingSphere();eJ.copy(J.boundingSphere).applyMatrix4(J.matrixWorld)}else{const $=J.geometry;if($.boundingSphere===null)$.computeBoundingSphere();eJ.copy($.boundingSphere).applyMatrix4(J.matrixWorld)}return this.intersectsSphere(eJ)}intersectsSprite(J){return eJ.center.set(0,0,0),eJ.radius=0.7071067811865476,eJ.applyMatrix4(J.matrixWorld),this.intersectsSphere(eJ)}intersectsSphere(J){const $=this.planes,Z=J.center,Q=-J.radius;for(let W=0;W<6;W++)if($[W].distanceToPoint(Z)<Q)return!1;return!0}intersectsBox(J){const $=this.planes;for(let Z=0;Z<6;Z++){const Q=$[Z];if(K7.x=Q.normal.x>0?J.max.x:J.min.x,K7.y=Q.normal.y>0?J.max.y:J.min.y,K7.z=Q.normal.z>0?J.max.z:J.min.z,Q.distanceToPoint(K7)<0)return!1}return!0}containsPoint(J){const $=this.planes;for(let Z=0;Z<6;Z++)if($[Z].distanceToPoint(J)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class V8 extends PJ{constructor(J=1,$=1,Z=1,Q=1){super();this.type="PlaneGeometry",this.parameters={width:J,height:$,widthSegments:Z,heightSegments:Q};const W=J/2,Y=$/2,H=Math.floor(Z),X=Math.floor(Q),K=H+1,G=X+1,U=J/H,V=$/X,R=[],D=[],M=[],O=[];for(let E=0;E<G;E++){const q=E*V-Y;for(let I=0;I<K;I++){const z=I*U-W;D.push(z,-q,0),M.push(0,0,1),O.push(I/H),O.push(1-E/X)}}for(let E=0;E<X;E++)for(let q=0;q<H;q++){const I=q+K*E,z=q+K*(E+1),A=q+1+K*(E+1),L=q+1+K*E;R.push(I,z,L),R.push(z,A,L)}this.setIndex(R),this.setAttribute("position",new cJ(D,3)),this.setAttribute("normal",new cJ(M,3)),this.setAttribute("uv",new cJ(O,2))}copy(J){return super.copy(J),this.parameters=Object.assign({},J.parameters),this}static fromJSON(J){return new V8(J.width,J.height,J.widthSegments,J.heightSegments)}}var F$="#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",N$="#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",O$="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",M$="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",_$="#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",z$="#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",B$="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",I$="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",w$="vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",k$="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",C$="float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",L$="#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",A$="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",P$="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",T$="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",S$="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",y$="#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",f$="#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",v$="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",j$="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",b$="#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",x$="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",h$="#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",g$="vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",p$="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",m$="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",l$="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",u$="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",d$="gl_FragColor = linearToOutputTexel( gl_FragColor );",c$="\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n\tvec3( 0.8224621, 0.177538, 0.0 ),\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn sRGBTransferOETF( value );\n}",n$="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",s$="#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",o$="#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",i$="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",r$="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",a$="#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",t$="#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",e$="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",J5="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",$5="#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",Z5="#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",Q5="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",W5="LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",Y5="varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",X5="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",H5="#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",K5="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",G5="varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",V5="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",U5="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",q5="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tanisotropyV /= material.anisotropy;\n\tmaterial.anisotropy = saturate( material.anisotropy );\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\n#endif",R5="struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",E5="\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal;\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",D5="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",F5="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",N5="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",O5="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",M5="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",_5="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",z5="#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",B5="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",I5="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",w5="#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",k5="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",C5="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",L5="#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",A5="#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",P5="#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",T5="#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",S5="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",y5="#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",f5="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",v5="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",j5="#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",b5="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",x5="#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",h5="#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",g5="#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",p5="#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",m5="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",l5="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",u5="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",d5="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",c5="#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",n5="#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",s5="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",o5="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",i5="#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",r5="#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",a5="#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",t5="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",e5="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",JZ="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif",$Z="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",ZZ="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",QZ="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",WZ="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",YZ="#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",XZ="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",HZ="#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",KZ="#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",GZ="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",VZ="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",UZ="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",qZ="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",RZ="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",EZ="uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",DZ="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",FZ="#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",NZ="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",OZ="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",MZ="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",_Z="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",zZ="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",BZ="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",IZ="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",wZ="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",kZ="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",CZ="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",LZ="#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",AZ="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",PZ="#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",TZ="#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",SZ="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",yZ="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",fZ="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",vZ="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",jZ="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",bZ="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",xZ="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",hZ="#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",gZ="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",pZ="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",mZ="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",lZ="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",uZ="#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",dZ="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",cZ="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",nZ="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",k0={alphahash_fragment:F$,alphahash_pars_fragment:N$,alphamap_fragment:O$,alphamap_pars_fragment:M$,alphatest_fragment:_$,alphatest_pars_fragment:z$,aomap_fragment:B$,aomap_pars_fragment:I$,begin_vertex:w$,beginnormal_vertex:k$,bsdfs:C$,iridescence_fragment:L$,bumpmap_pars_fragment:A$,clipping_planes_fragment:P$,clipping_planes_pars_fragment:T$,clipping_planes_pars_vertex:S$,clipping_planes_vertex:y$,color_fragment:f$,color_pars_fragment:v$,color_pars_vertex:j$,color_vertex:b$,common:x$,cube_uv_reflection_fragment:h$,defaultnormal_vertex:g$,displacementmap_pars_vertex:p$,displacementmap_vertex:m$,emissivemap_fragment:l$,emissivemap_pars_fragment:u$,colorspace_fragment:d$,colorspace_pars_fragment:c$,envmap_fragment:n$,envmap_common_pars_fragment:s$,envmap_pars_fragment:o$,envmap_pars_vertex:i$,envmap_physical_pars_fragment:H5,envmap_vertex:r$,fog_vertex:a$,fog_pars_vertex:t$,fog_fragment:e$,fog_pars_fragment:J5,gradientmap_pars_fragment:$5,lightmap_fragment:Z5,lightmap_pars_fragment:Q5,lights_lambert_fragment:W5,lights_lambert_pars_fragment:Y5,lights_pars_begin:X5,lights_toon_fragment:K5,lights_toon_pars_fragment:G5,lights_phong_fragment:V5,lights_phong_pars_fragment:U5,lights_physical_fragment:q5,lights_physical_pars_fragment:R5,lights_fragment_begin:E5,lights_fragment_maps:D5,lights_fragment_end:F5,logdepthbuf_fragment:N5,logdepthbuf_pars_fragment:O5,logdepthbuf_pars_vertex:M5,logdepthbuf_vertex:_5,map_fragment:z5,map_pars_fragment:B5,map_particle_fragment:I5,map_particle_pars_fragment:w5,metalnessmap_fragment:k5,metalnessmap_pars_fragment:C5,morphcolor_vertex:L5,morphnormal_vertex:A5,morphtarget_pars_vertex:P5,morphtarget_vertex:T5,normal_fragment_begin:S5,normal_fragment_maps:y5,normal_pars_fragment:f5,normal_pars_vertex:v5,normal_vertex:j5,normalmap_pars_fragment:b5,clearcoat_normal_fragment_begin:x5,clearcoat_normal_fragment_maps:h5,clearcoat_pars_fragment:g5,iridescence_pars_fragment:p5,opaque_fragment:m5,packing:l5,premultiplied_alpha_fragment:u5,project_vertex:d5,dithering_fragment:c5,dithering_pars_fragment:n5,roughnessmap_fragment:s5,roughnessmap_pars_fragment:o5,shadowmap_pars_fragment:i5,shadowmap_pars_vertex:r5,shadowmap_vertex:a5,shadowmask_pars_fragment:t5,skinbase_vertex:e5,skinning_pars_vertex:JZ,skinning_vertex:$Z,skinnormal_vertex:ZZ,specularmap_fragment:QZ,specularmap_pars_fragment:WZ,tonemapping_fragment:YZ,tonemapping_pars_fragment:XZ,transmission_fragment:HZ,transmission_pars_fragment:KZ,uv_pars_fragment:GZ,uv_pars_vertex:VZ,uv_vertex:UZ,worldpos_vertex:qZ,background_vert:RZ,background_frag:EZ,backgroundCube_vert:DZ,backgroundCube_frag:FZ,cube_vert:NZ,cube_frag:OZ,depth_vert:MZ,depth_frag:_Z,distanceRGBA_vert:zZ,distanceRGBA_frag:BZ,equirect_vert:IZ,equirect_frag:wZ,linedashed_vert:kZ,linedashed_frag:CZ,meshbasic_vert:LZ,meshbasic_frag:AZ,meshlambert_vert:PZ,meshlambert_frag:TZ,meshmatcap_vert:SZ,meshmatcap_frag:yZ,meshnormal_vert:fZ,meshnormal_frag:vZ,meshphong_vert:jZ,meshphong_frag:bZ,meshphysical_vert:xZ,meshphysical_frag:hZ,meshtoon_vert:gZ,meshtoon_frag:pZ,points_vert:mZ,points_frag:lZ,shadow_vert:uZ,shadow_frag:dZ,sprite_vert:cZ,sprite_frag:nZ},Q0={common:{diffuse:{value:new g0(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new A0},alphaMap:{value:null},alphaMapTransform:{value:new A0},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new A0}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:0.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new A0}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new A0}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new A0},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new A0},normalScale:{value:new m0(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new A0},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new A0}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new A0}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new A0}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:0.00025},fogNear:{value:1},fogFar:{value:2000},fogColor:{value:new g0(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new g0(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new A0},alphaTest:{value:0},uvTransform:{value:new A0}},sprite:{diffuse:{value:new g0(16777215)},opacity:{value:1},center:{value:new m0(0.5,0.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new A0},alphaMap:{value:null},alphaMapTransform:{value:new A0},alphaTest:{value:0}}},AJ={basic:{uniforms:UJ([Q0.common,Q0.specularmap,Q0.envmap,Q0.aomap,Q0.lightmap,Q0.fog]),vertexShader:k0.meshbasic_vert,fragmentShader:k0.meshbasic_frag},lambert:{uniforms:UJ([Q0.common,Q0.specularmap,Q0.envmap,Q0.aomap,Q0.lightmap,Q0.emissivemap,Q0.bumpmap,Q0.normalmap,Q0.displacementmap,Q0.fog,Q0.lights,{emissive:{value:new g0(0)}}]),vertexShader:k0.meshlambert_vert,fragmentShader:k0.meshlambert_frag},phong:{uniforms:UJ([Q0.common,Q0.specularmap,Q0.envmap,Q0.aomap,Q0.lightmap,Q0.emissivemap,Q0.bumpmap,Q0.normalmap,Q0.displacementmap,Q0.fog,Q0.lights,{emissive:{value:new g0(0)},specular:{value:new g0(1118481)},shininess:{value:30}}]),vertexShader:k0.meshphong_vert,fragmentShader:k0.meshphong_frag},standard:{uniforms:UJ([Q0.common,Q0.envmap,Q0.aomap,Q0.lightmap,Q0.emissivemap,Q0.bumpmap,Q0.normalmap,Q0.displacementmap,Q0.roughnessmap,Q0.metalnessmap,Q0.fog,Q0.lights,{emissive:{value:new g0(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:k0.meshphysical_vert,fragmentShader:k0.meshphysical_frag},toon:{uniforms:UJ([Q0.common,Q0.aomap,Q0.lightmap,Q0.emissivemap,Q0.bumpmap,Q0.normalmap,Q0.displacementmap,Q0.gradientmap,Q0.fog,Q0.lights,{emissive:{value:new g0(0)}}]),vertexShader:k0.meshtoon_vert,fragmentShader:k0.meshtoon_frag},matcap:{uniforms:UJ([Q0.common,Q0.bumpmap,Q0.normalmap,Q0.displacementmap,Q0.fog,{matcap:{value:null}}]),vertexShader:k0.meshmatcap_vert,fragmentShader:k0.meshmatcap_frag},points:{uniforms:UJ([Q0.points,Q0.fog]),vertexShader:k0.points_vert,fragmentShader:k0.points_frag},dashed:{uniforms:UJ([Q0.common,Q0.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:k0.linedashed_vert,fragmentShader:k0.linedashed_frag},depth:{uniforms:UJ([Q0.common,Q0.displacementmap]),vertexShader:k0.depth_vert,fragmentShader:k0.depth_frag},normal:{uniforms:UJ([Q0.common,Q0.bumpmap,Q0.normalmap,Q0.displacementmap,{opacity:{value:1}}]),vertexShader:k0.meshnormal_vert,fragmentShader:k0.meshnormal_frag},sprite:{uniforms:UJ([Q0.sprite,Q0.fog]),vertexShader:k0.sprite_vert,fragmentShader:k0.sprite_frag},background:{uniforms:{uvTransform:{value:new A0},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:k0.background_vert,fragmentShader:k0.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:k0.backgroundCube_vert,fragmentShader:k0.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:k0.cube_vert,fragmentShader:k0.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:k0.equirect_vert,fragmentShader:k0.equirect_frag},distanceRGBA:{uniforms:UJ([Q0.common,Q0.displacementmap,{referencePosition:{value:new v},nearDistance:{value:1},farDistance:{value:1000}}]),vertexShader:k0.distanceRGBA_vert,fragmentShader:k0.distanceRGBA_frag},shadow:{uniforms:UJ([Q0.lights,Q0.fog,{color:{value:new g0(0)},opacity:{value:1}}]),vertexShader:k0.shadow_vert,fragmentShader:k0.shadow_frag}};AJ.physical={uniforms:UJ([AJ.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new A0},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new A0},clearcoatNormalScale:{value:new m0(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new A0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new A0},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new A0},sheen:{value:0},sheenColor:{value:new g0(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new A0},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new A0},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new A0},transmissionSamplerSize:{value:new m0},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new A0},attenuationDistance:{value:0},attenuationColor:{value:new g0(0)},specularColor:{value:new g0(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new A0},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new A0},anisotropyVector:{value:new m0},anisotropyMap:{value:null},anisotropyMapTransform:{value:new A0}}]),vertexShader:k0.meshphysical_vert,fragmentShader:k0.meshphysical_frag};var G7={r:0,b:0,g:0};class D9 extends H8{constructor(J=-1,$=1,Z=1,Q=-1,W=0.1,Y=2000){super();this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=J,this.right=$,this.top=Z,this.bottom=Q,this.near=W,this.far=Y,this.updateProjectionMatrix()}copy(J,$){return super.copy(J,$),this.left=J.left,this.right=J.right,this.top=J.top,this.bottom=J.bottom,this.near=J.near,this.far=J.far,this.zoom=J.zoom,this.view=J.view===null?null:Object.assign({},J.view),this}setViewOffset(J,$,Z,Q,W,Y){if(this.view===null)this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};this.view.enabled=!0,this.view.fullWidth=J,this.view.fullHeight=$,this.view.offsetX=Z,this.view.offsetY=Q,this.view.width=W,this.view.height=Y,this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null)this.view.enabled=!1;this.updateProjectionMatrix()}updateProjectionMatrix(){const J=(this.right-this.left)/(2*this.zoom),$=(this.top-this.bottom)/(2*this.zoom),Z=(this.right+this.left)/2,Q=(this.top+this.bottom)/2;let W=Z-J,Y=Z+J,H=Q+$,X=Q-$;if(this.view!==null&&this.view.enabled){const K=(this.right-this.left)/this.view.fullWidth/this.zoom,G=(this.top-this.bottom)/this.view.fullHeight/this.zoom;W+=K*this.view.offsetX,Y=W+K*this.view.width,H-=G*this.view.offsetY,X=H-G*this.view.height}this.projectionMatrix.makeOrthographic(W,Y,H,X,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(J){const $=super.toJSON(J);if($.object.zoom=this.zoom,$.object.left=this.left,$.object.right=this.right,$.object.top=this.top,$.object.bottom=this.bottom,$.object.near=this.near,$.object.far=this.far,this.view!==null)$.object.view=Object.assign({},this.view);return $}}var _6=4,h8=[0.125,0.215,0.35,0.446,0.526,0.582],$6=20,c7=new D9,g8=new g0,n7=null,J6=(1+Math.sqrt(5))/2,M6=1/J6,p8=[new v(1,1,1),new v(-1,1,1),new v(1,1,-1),new v(-1,1,-1),new v(0,J6,M6),new v(0,J6,-M6),new v(M6,0,J6),new v(-M6,0,J6),new v(J6,M6,0),new v(-J6,M6,0)];class r7{constructor(J){this._renderer=J,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(J,$=0,Z=0.1,Q=100){n7=this._renderer.getRenderTarget(),this._setSize(256);const W=this._allocateTargets();if(W.depthBuffer=!0,this._sceneToCubeUV(J,Z,Q,W),$>0)this._blur(W,0,0,$);return this._applyPMREM(W),this._cleanup(W),W}fromEquirectangular(J,$=null){return this._fromTexture(J,$)}fromCubemap(J,$=null){return this._fromTexture(J,$)}compileCubemapShader(){if(this._cubemapMaterial===null)this._cubemapMaterial=u8(),this._compileMaterial(this._cubemapMaterial)}compileEquirectangularShader(){if(this._equirectMaterial===null)this._equirectMaterial=l8(),this._compileMaterial(this._equirectMaterial)}dispose(){if(this._dispose(),this._cubemapMaterial!==null)this._cubemapMaterial.dispose();if(this._equirectMaterial!==null)this._equirectMaterial.dispose()}_setSize(J){this._lodMax=Math.floor(Math.log2(J)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){if(this._blurMaterial!==null)this._blurMaterial.dispose();if(this._pingPongRenderTarget!==null)this._pingPongRenderTarget.dispose();for(let J=0;J<this._lodPlanes.length;J++)this._lodPlanes[J].dispose()}_cleanup(J){this._renderer.setRenderTarget(n7),J.scissorTest=!1,V7(J,0,0,J.width,J.height)}_fromTexture(J,$){if(J.mapping===301||J.mapping===302)this._setSize(J.image.length===0?16:J.image[0].width||J.image[0].image.width);else this._setSize(J.image.width/4);n7=this._renderer.getRenderTarget();const Z=$||this._allocateTargets();return this._textureToCubeUV(J,Z),this._applyPMREM(Z),this._cleanup(Z),Z}_allocateTargets(){const J=3*Math.max(this._cubeSize,112),$=4*this._cubeSize,Z={magFilter:1006,minFilter:1006,generateMipmaps:!1,type:1016,format:1023,colorSpace:"srgb-linear",depthBuffer:!1},Q=m8(J,$,Z);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==J||this._pingPongRenderTarget.height!==$){if(this._pingPongRenderTarget!==null)this._dispose();this._pingPongRenderTarget=m8(J,$,Z);const{_lodMax:W}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=eZ(W)),this._blurMaterial=JQ(W,J,$)}return Q}_compileMaterial(J){const $=new hJ(this._lodPlanes[0],J);this._renderer.compile($,c7)}_sceneToCubeUV(J,$,Z,Q){const H=new EJ(90,1,$,Z),X=[1,-1,1,1,1,1],K=[1,1,1,-1,-1,-1],G=this._renderer,U=G.autoClear,V=G.toneMapping;G.getClearColor(g8),G.toneMapping=0,G.autoClear=!1;const R=new W8({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),D=new hJ(new p6,R);let M=!1;const O=J.background;if(O){if(O.isColor)R.color.copy(O),J.background=null,M=!0}else R.color.copy(g8),M=!0;for(let E=0;E<6;E++){const q=E%3;if(q===0)H.up.set(0,X[E],0),H.lookAt(K[E],0,0);else if(q===1)H.up.set(0,0,X[E]),H.lookAt(0,K[E],0);else H.up.set(0,X[E],0),H.lookAt(0,0,K[E]);const I=this._cubeSize;if(V7(Q,q*I,E>2?I:0,I,I),G.setRenderTarget(Q),M)G.render(D,H);G.render(J,H)}D.geometry.dispose(),D.material.dispose(),G.toneMapping=V,G.autoClear=U,J.background=O}_textureToCubeUV(J,$){const Z=this._renderer,Q=J.mapping===301||J.mapping===302;if(Q){if(this._cubemapMaterial===null)this._cubemapMaterial=u8();this._cubemapMaterial.uniforms.flipEnvMap.value=J.isRenderTargetTexture===!1?-1:1}else if(this._equirectMaterial===null)this._equirectMaterial=l8();const W=Q?this._cubemapMaterial:this._equirectMaterial,Y=new hJ(this._lodPlanes[0],W),H=W.uniforms;H.envMap.value=J;const X=this._cubeSize;V7($,0,0,3*X,2*X),Z.setRenderTarget($),Z.render(Y,c7)}_applyPMREM(J){const $=this._renderer,Z=$.autoClear;$.autoClear=!1;for(let Q=1;Q<this._lodPlanes.length;Q++){const W=Math.sqrt(this._sigmas[Q]*this._sigmas[Q]-this._sigmas[Q-1]*this._sigmas[Q-1]),Y=p8[(Q-1)%p8.length];this._blur(J,Q-1,Q,W,Y)}$.autoClear=Z}_blur(J,$,Z,Q,W){const Y=this._pingPongRenderTarget;this._halfBlur(J,Y,$,Z,Q,"latitudinal",W),this._halfBlur(Y,J,Z,Z,Q,"longitudinal",W)}_halfBlur(J,$,Z,Q,W,Y,H){const X=this._renderer,K=this._blurMaterial;if(Y!=="latitudinal"&&Y!=="longitudinal")console.error("blur direction must be either latitudinal or longitudinal!");const G=3,U=new hJ(this._lodPlanes[Q],K),V=K.uniforms,R=this._sizeLods[Z]-1,D=isFinite(W)?Math.PI/(2*R):2*Math.PI/(2*$6-1),M=W/D,O=isFinite(W)?1+Math.floor(G*M):$6;if(O>$6)console.warn(`sigmaRadians, ${W}, is too large and will clip, as it requested ${O} samples when the maximum is set to ${$6}`);const E=[];let q=0;for(let w=0;w<$6;++w){const g=w/M,u=Math.exp(-g*g/2);if(E.push(u),w===0)q+=u;else if(w<O)q+=2*u}for(let w=0;w<E.length;w++)E[w]=E[w]/q;if(V.envMap.value=J.texture,V.samples.value=O,V.weights.value=E,V.latitudinal.value=Y==="latitudinal",H)V.poleAxis.value=H;const{_lodMax:I}=this;V.dTheta.value=D,V.mipInt.value=I-Z;const z=this._sizeLods[Q],A=3*z*(Q>I-_6?Q-I+_6:0),L=4*(this._cubeSize-z);V7($,A,L,3*z,2*z),X.setRenderTarget($),X.render(U,c7)}}var F9=new MJ,N9=new $8,O9=new G9,M9=new K8,d8=[],c8=[],n8=new Float32Array(16),s8=new Float32Array(9),o8=new Float32Array(4);class _9{constructor(J,$,Z){this.id=J,this.addr=Z,this.cache=[],this.setValue=PQ($.type)}}class z9{constructor(J,$,Z){this.id=J,this.addr=Z,this.cache=[],this.size=$.size,this.setValue=iQ($.type)}}class B9{constructor(J){this.id=J,this.seq=[],this.map={}}setValue(J,$,Z){const Q=this.seq;for(let W=0,Y=Q.length;W!==Y;++W){const H=Q[W];H.setValue(J,$[H.id],Z)}}}var s7=/(\w+)(\])?(\[|\.)?/g;class x6{constructor(J,$){this.seq=[],this.map={};const Z=J.getProgramParameter($,J.ACTIVE_UNIFORMS);for(let Q=0;Q<Z;++Q){const W=J.getActiveUniform($,Q),Y=J.getUniformLocation($,W.name);rQ(W,Y,this)}}setValue(J,$,Z,Q){const W=this.map[$];if(W!==void 0)W.setValue(J,Z,Q)}setOptional(J,$,Z){const Q=$[Z];if(Q!==void 0)this.setValue(J,Z,Q)}static upload(J,$,Z,Q){for(let W=0,Y=$.length;W!==Y;++W){const H=$[W],X=Z[H.id];if(X.needsUpdate!==!1)H.setValue(J,X.value,Q)}}static seqWithValue(J,$){const Z=[];for(let Q=0,W=J.length;Q!==W;++Q){const Y=J[Q];if(Y.id in $)Z.push(Y)}return Z}}var aQ=0,YW=/^[ \t]*#include +<([\w\d./]+)>/gm,XW=new Map([["encodings_fragment","colorspace_fragment"],["encodings_pars_fragment","colorspace_pars_fragment"],["output_fragment","opaque_fragment"]]),KW=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g,FW=0;class I9{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(J){const{vertexShader:$,fragmentShader:Z}=J,Q=this._getShaderStage($),W=this._getShaderStage(Z),Y=this._getShaderCacheForMaterial(J);if(Y.has(Q)===!1)Y.add(Q),Q.usedTimes++;if(Y.has(W)===!1)Y.add(W),W.usedTimes++;return this}remove(J){const $=this.materialCache.get(J);for(let Z of $)if(Z.usedTimes--,Z.usedTimes===0)this.shaderCache.delete(Z.code);return this.materialCache.delete(J),this}getVertexShaderID(J){return this._getShaderStage(J.vertexShader).id}getFragmentShaderID(J){return this._getShaderStage(J.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(J){const $=this.materialCache;let Z=$.get(J);if(Z===void 0)Z=new Set,$.set(J,Z);return Z}_getShaderStage(J){const $=this.shaderCache;let Z=$.get(J);if(Z===void 0)Z=new w9(J),$.set(J,Z);return Z}}class w9{constructor(J){this.id=FW++,this.code=J,this.usedTimes=0}}var IW=0;class k9 extends w6{constructor(J){super();this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(J)}copy(J){return super.copy(J),this.depthPacking=J.depthPacking,this.map=J.map,this.alphaMap=J.alphaMap,this.displacementMap=J.displacementMap,this.displacementScale=J.displacementScale,this.displacementBias=J.displacementBias,this.wireframe=J.wireframe,this.wireframeLinewidth=J.wireframeLinewidth,this}}class C9 extends w6{constructor(J){super();this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(J)}copy(J){return super.copy(J),this.map=J.map,this.alphaMap=J.alphaMap,this.displacementMap=J.displacementMap,this.displacementScale=J.displacementScale,this.displacementBias=J.displacementBias,this}}var LW="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",AW="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";class L9 extends EJ{constructor(J=[]){super();this.isArrayCamera=!0,this.cameras=J}}class j6 extends DJ{constructor(){super();this.isGroup=!0,this.type="Group"}}var fW={type:"move"};class E7{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){if(this._hand===null)this._hand=new j6,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1};return this._hand}getTargetRaySpace(){if(this._targetRay===null)this._targetRay=new j6,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new v,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new v;return this._targetRay}getGripSpace(){if(this._grip===null)this._grip=new j6,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new v,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new v;return this._grip}dispatchEvent(J){if(this._targetRay!==null)this._targetRay.dispatchEvent(J);if(this._grip!==null)this._grip.dispatchEvent(J);if(this._hand!==null)this._hand.dispatchEvent(J);return this}connect(J){if(J&&J.hand){const $=this._hand;if($)for(let Z of J.hand.values())this._getHandJoint($,Z)}return this.dispatchEvent({type:"connected",data:J}),this}disconnect(J){if(this.dispatchEvent({type:"disconnected",data:J}),this._targetRay!==null)this._targetRay.visible=!1;if(this._grip!==null)this._grip.visible=!1;if(this._hand!==null)this._hand.visible=!1;return this}update(J,$,Z){let Q=null,W=null,Y=null;const H=this._targetRay,X=this._grip,K=this._hand;if(J&&$.session.visibilityState!=="visible-blurred"){if(K&&J.hand){Y=!0;for(let M of J.hand.values()){const O=$.getJointPose(M,Z),E=this._getHandJoint(K,M);if(O!==null)E.matrix.fromArray(O.transform.matrix),E.matrix.decompose(E.position,E.rotation,E.scale),E.matrixWorldNeedsUpdate=!0,E.jointRadius=O.radius;E.visible=O!==null}const G=K.joints["index-finger-tip"],U=K.joints["thumb-tip"],V=G.position.distanceTo(U.position),R=0.02,D=0.005;if(K.inputState.pinching&&V>R+D)K.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:J.handedness,target:this});else if(!K.inputState.pinching&&V<=R-D)K.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:J.handedness,target:this})}else if(X!==null&&J.gripSpace){if(W=$.getPose(J.gripSpace,Z),W!==null){if(X.matrix.fromArray(W.transform.matrix),X.matrix.decompose(X.position,X.rotation,X.scale),X.matrixWorldNeedsUpdate=!0,W.linearVelocity)X.hasLinearVelocity=!0,X.linearVelocity.copy(W.linearVelocity);else X.hasLinearVelocity=!1;if(W.angularVelocity)X.hasAngularVelocity=!0,X.angularVelocity.copy(W.angularVelocity);else X.hasAngularVelocity=!1}}if(H!==null){if(Q=$.getPose(J.targetRaySpace,Z),Q===null&&W!==null)Q=W;if(Q!==null){if(H.matrix.fromArray(Q.transform.matrix),H.matrix.decompose(H.position,H.rotation,H.scale),H.matrixWorldNeedsUpdate=!0,Q.linearVelocity)H.hasLinearVelocity=!0,H.linearVelocity.copy(Q.linearVelocity);else H.hasLinearVelocity=!1;if(Q.angularVelocity)H.hasAngularVelocity=!0,H.angularVelocity.copy(Q.angularVelocity);else H.hasAngularVelocity=!1;this.dispatchEvent(fW)}}}if(H!==null)H.visible=Q!==null;if(X!==null)X.visible=W!==null;if(K!==null)K.visible=Y!==null;return this}_getHandJoint(J,$){if(J.joints[$.jointName]===void 0){const Z=new j6;Z.matrixAutoUpdate=!1,Z.visible=!1,J.joints[$.jointName]=Z,J.add(Z)}return J.joints[$.jointName]}}class A9 extends MJ{constructor(J,$,Z,Q,W,Y,H,X,K,G){if(G=G!==void 0?G:1026,G!==1026&&G!==1027)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");if(Z===void 0&&G===1026)Z=1014;if(Z===void 0&&G===1027)Z=1020;super(null,Q,W,Y,H,X,G,Z,K);this.isDepthTexture=!0,this.image={width:J,height:$},this.magFilter=H!==void 0?H:1003,this.minFilter=X!==void 0?X:1003,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(J){return super.copy(J),this.compareFunction=J.compareFunction,this}toJSON(J){const $=super.toJSON(J);if(this.compareFunction!==null)$.compareFunction=this.compareFunction;return $}}class P9 extends Z6{constructor(J,$){super();const Z=this;let Q=null,W=1,Y=null,H="local-floor",X=1,K=null,G=null,U=null,V=null,R=null,D=null;const M=$.getContextAttributes();let O=null,E=null;const q=[],I=[],z=new EJ;z.layers.enable(1),z.viewport=new QJ;const A=new EJ;A.layers.enable(2),A.viewport=new QJ;const L=[z,A],w=new L9;w.layers.enable(1),w.layers.enable(2);let g=null,u=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(T){let h=q[T];if(h===void 0)h=new E7,q[T]=h;return h.getTargetRaySpace()},this.getControllerGrip=function(T){let h=q[T];if(h===void 0)h=new E7,q[T]=h;return h.getGripSpace()},this.getHand=function(T){let h=q[T];if(h===void 0)h=new E7,q[T]=h;return h.getHandSpace()};function N(T){const h=I.indexOf(T.inputSource);if(h===-1)return;const a=q[h];if(a!==void 0)a.update(T.inputSource,T.frame,K||Y),a.dispatchEvent({type:T.type,data:T.inputSource})}function C(){Q.removeEventListener("select",N),Q.removeEventListener("selectstart",N),Q.removeEventListener("selectend",N),Q.removeEventListener("squeeze",N),Q.removeEventListener("squeezestart",N),Q.removeEventListener("squeezeend",N),Q.removeEventListener("end",C),Q.removeEventListener("inputsourceschange",m);for(let T=0;T<q.length;T++){const h=I[T];if(h===null)continue;I[T]=null,q[T].disconnect(h)}g=null,u=null,J.setRenderTarget(O),R=null,V=null,U=null,Q=null,E=null,p.stop(),Z.isPresenting=!1,Z.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(T){if(W=T,Z.isPresenting===!0)console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(T){if(H=T,Z.isPresenting===!0)console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return K||Y},this.setReferenceSpace=function(T){K=T},this.getBaseLayer=function(){return V!==null?V:R},this.getBinding=function(){return U},this.getFrame=function(){return D},this.getSession=function(){return Q},this.setSession=async function(T){if(Q=T,Q!==null){if(O=J.getRenderTarget(),Q.addEventListener("select",N),Q.addEventListener("selectstart",N),Q.addEventListener("selectend",N),Q.addEventListener("squeeze",N),Q.addEventListener("squeezestart",N),Q.addEventListener("squeezeend",N),Q.addEventListener("end",C),Q.addEventListener("inputsourceschange",m),M.xrCompatible!==!0)await $.makeXRCompatible();if(Q.renderState.layers===void 0||J.capabilities.isWebGL2===!1){const h={antialias:Q.renderState.layers===void 0?M.antialias:!0,alpha:!0,depth:M.depth,stencil:M.stencil,framebufferScaleFactor:W};R=new XRWebGLLayer(Q,$,h),Q.updateRenderState({baseLayer:R}),E=new nJ(R.framebufferWidth,R.framebufferHeight,{format:1023,type:1009,colorSpace:J.outputColorSpace,stencilBuffer:M.stencil})}else{let h=null,a=null,G0=null;if(M.depth)G0=M.stencil?$.DEPTH24_STENCIL8:$.DEPTH_COMPONENT24,h=M.stencil?1027:1026,a=M.stencil?1020:1014;const X0={colorFormat:$.RGBA8,depthFormat:G0,scaleFactor:W};U=new XRWebGLBinding(Q,$),V=U.createProjectionLayer(X0),Q.updateRenderState({layers:[V]}),E=new nJ(V.textureWidth,V.textureHeight,{format:1023,type:1009,depthTexture:new A9(V.textureWidth,V.textureHeight,a,void 0,void 0,void 0,void 0,void 0,void 0,h),stencilBuffer:M.stencil,colorSpace:J.outputColorSpace,samples:M.antialias?4:0});const U0=J.properties.get(E);U0.__ignoreDepthValues=V.ignoreDepthValues}E.isXRRenderTarget=!0,this.setFoveation(X),K=null,Y=await Q.requestReferenceSpace(H),p.setContext(Q),p.start(),Z.isPresenting=!0,Z.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(Q!==null)return Q.environmentBlendMode};function m(T){for(let h=0;h<T.removed.length;h++){const a=T.removed[h],G0=I.indexOf(a);if(G0>=0)I[G0]=null,q[G0].disconnect(a)}for(let h=0;h<T.added.length;h++){const a=T.added[h];let G0=I.indexOf(a);if(G0===-1){for(let U0=0;U0<q.length;U0++)if(U0>=I.length){I.push(a),G0=U0;break}else if(I[U0]===null){I[U0]=a,G0=U0;break}if(G0===-1)break}const X0=q[G0];if(X0)X0.connect(a)}}const e=new v,W0=new v;function P(T,h,a){e.setFromMatrixPosition(h.matrixWorld),W0.setFromMatrixPosition(a.matrixWorld);const G0=e.distanceTo(W0),X0=h.projectionMatrix.elements,U0=a.projectionMatrix.elements,j0=X0[14]/(X0[10]-1),F0=X0[14]/(X0[10]+1),y0=(X0[9]+1)/X0[5],n0=(X0[9]-1)/X0[5],KJ=(X0[8]-1)/X0[0],S=(U0[8]+1)/U0[0],i0=j0*KJ,f0=j0*S,D0=G0/(-KJ+S),B0=D0*-KJ;h.matrixWorld.decompose(T.position,T.quaternion,T.scale),T.translateX(B0),T.translateZ(D0),T.matrixWorld.compose(T.position,T.quaternion,T.scale),T.matrixWorldInverse.copy(T.matrixWorld).invert();const d0=j0+D0,T0=F0+D0,v0=i0-B0,s0=f0+(G0-B0),p0=y0*F0/T0*d0,WJ=n0*F0/T0*d0;T.projectionMatrix.makePerspective(v0,s0,p0,WJ,d0,T0),T.projectionMatrixInverse.copy(T.projectionMatrix).invert()}function l(T,h){if(h===null)T.matrixWorld.copy(T.matrix);else T.matrixWorld.multiplyMatrices(h.matrixWorld,T.matrix);T.matrixWorldInverse.copy(T.matrixWorld).invert()}this.updateCamera=function(T){if(Q===null)return;if(w.near=A.near=z.near=T.near,w.far=A.far=z.far=T.far,g!==w.near||u!==w.far)Q.updateRenderState({depthNear:w.near,depthFar:w.far}),g=w.near,u=w.far;const h=T.parent,a=w.cameras;l(w,h);for(let G0=0;G0<a.length;G0++)l(a[G0],h);if(a.length===2)P(w,z,A);else w.projectionMatrix.copy(z.projectionMatrix);n(T,w,h)};function n(T,h,a){if(a===null)T.matrix.copy(h.matrixWorld);else T.matrix.copy(a.matrixWorld),T.matrix.invert(),T.matrix.multiply(h.matrixWorld);if(T.matrix.decompose(T.position,T.quaternion,T.scale),T.updateMatrixWorld(!0),T.projectionMatrix.copy(h.projectionMatrix),T.projectionMatrixInverse.copy(h.projectionMatrixInverse),T.isPerspectiveCamera)T.fov=o7*2*Math.atan(1/T.projectionMatrix.elements[5]),T.zoom=1}this.getCamera=function(){return w},this.getFoveation=function(){if(V===null&&R===null)return;return X},this.setFoveation=function(T){if(X=T,V!==null)V.fixedFoveation=T;if(R!==null&&R.fixedFoveation!==void 0)R.fixedFoveation=T};let d=null;function r(T,h){if(G=h.getViewerPose(K||Y),D=h,G!==null){const a=G.views;if(R!==null)J.setRenderTargetFramebuffer(E,R.framebuffer),J.setRenderTarget(E);let G0=!1;if(a.length!==w.cameras.length)w.cameras.length=0,G0=!0;for(let X0=0;X0<a.length;X0++){const U0=a[X0];let j0=null;if(R!==null)j0=R.getViewport(U0);else{const y0=U.getViewSubImage(V,U0);if(j0=y0.viewport,X0===0)J.setRenderTargetTextures(E,y0.colorTexture,V.ignoreDepthValues?void 0:y0.depthStencilTexture),J.setRenderTarget(E)}let F0=L[X0];if(F0===void 0)F0=new EJ,F0.layers.enable(X0),F0.viewport=new QJ,L[X0]=F0;if(F0.matrix.fromArray(U0.transform.matrix),F0.matrix.decompose(F0.position,F0.quaternion,F0.scale),F0.projectionMatrix.fromArray(U0.projectionMatrix),F0.projectionMatrixInverse.copy(F0.projectionMatrix).invert(),F0.viewport.set(j0.x,j0.y,j0.width,j0.height),X0===0)w.matrix.copy(F0.matrix),w.matrix.decompose(w.position,w.quaternion,w.scale);if(G0===!0)w.cameras.push(F0)}}for(let a=0;a<q.length;a++){const G0=I[a],X0=q[a];if(G0!==null&&X0!==void 0)X0.update(G0,h,K||Y)}if(d)d(T,h);if(h.detectedPlanes)Z.dispatchEvent({type:"planesdetected",data:h});D=null}const p=new E9;p.setAnimationLoop(r),this.setAnimationLoop=function(T){d=T},this.dispose=function(){}}}class O7{constructor(J={}){const{canvas:$=o9(),context:Z=null,depth:Q=!0,stencil:W=!0,alpha:Y=!1,antialias:H=!1,premultipliedAlpha:X=!0,preserveDrawingBuffer:K=!1,powerPreference:G="default",failIfMajorPerformanceCaveat:U=!1}=J;this.isWebGLRenderer=!0;let V;if(Z!==null)V=Z.getContextAttributes().alpha;else V=Y;const R=new Uint32Array(4),D=new Int32Array(4);let M=null,O=null;const E=[],q=[];this.domElement=$,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace="srgb",this._useLegacyLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const I=this;let z=!1,A=0,L=0,w=null,g=-1,u=null;const N=new QJ,C=new QJ;let m=null;const e=new g0(0);let W0=0,P=$.width,l=$.height,n=1,d=null,r=null;const p=new QJ(0,0,P,l),T=new QJ(0,0,P,l);let h=!1;const a=new G8;let G0=!1,X0=!1,U0=null;const j0=new ZJ,F0=new m0,y0=new v,n0={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function KJ(){return w===null?n:1}let S=Z;function i0(_,y){for(let b=0;b<_.length;b++){const f=_[b],x=$.getContext(f,y);if(x!==null)return x}return null}try{const _={alpha:!0,depth:Q,stencil:W,antialias:H,premultipliedAlpha:X,preserveDrawingBuffer:K,powerPreference:G,failIfMajorPerformanceCaveat:U};if("setAttribute"in $)$.setAttribute("data-engine","three.js r157");if($.addEventListener("webglcontextlost",k,!1),$.addEventListener("webglcontextrestored",$0,!1),$.addEventListener("webglcontextcreationerror",J0,!1),S===null){const y=["webgl2","webgl","experimental-webgl"];if(I.isWebGL1Renderer===!0)y.shift();if(S=i0(y,_),S===null)if(i0(y))throw new Error("Error creating WebGL context with your selected attributes.");else throw new Error("Error creating WebGL context.")}if(typeof WebGLRenderingContext!=="undefined"&&S instanceof WebGLRenderingContext)console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.");if(S.getShaderPrecisionFormat===void 0)S.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}}catch(_){throw console.error("THREE.WebGLRenderer: "+_.message),_}let f0,D0,B0,d0,T0,v0,s0,p0,WJ,_J,B,F,j,t,o,i,R0,Z0,q0,M0,b0,s,l0,C0;function I0(){f0=new ZQ(S),D0=new rZ(S,f0,J),f0.init(D0),s=new yW(S,f0,D0),B0=new TW(S,f0,D0),d0=new YQ(S),T0=new OW,v0=new SW(S,f0,B0,T0,D0,s,d0),s0=new tZ(I),p0=new $Q(I),WJ=new D$(S,D0),l0=new oZ(S,f0,WJ,D0),_J=new QQ(S,WJ,d0,l0),B=new GQ(S,_J,WJ,d0),q0=new KQ(S,D0,v0),i=new aZ(T0),F=new NW(I,s0,p0,f0,D0,l0,i),j=new vW(I,T0),t=new _W,o=new CW(f0,D0),Z0=new sZ(I,s0,p0,B0,B,V,X),R0=new PW(I,B,D0),C0=new jW(S,d0,D0,B0),M0=new iZ(S,f0,d0,D0),b0=new WQ(S,f0,d0,D0),d0.programs=F.programs,I.capabilities=D0,I.extensions=f0,I.properties=T0,I.renderLists=t,I.shadowMap=R0,I.state=B0,I.info=d0}I0();const V0=new P9(I,S);this.xr=V0,this.getContext=function(){return S},this.getContextAttributes=function(){return S.getContextAttributes()},this.forceContextLoss=function(){const _=f0.get("WEBGL_lose_context");if(_)_.loseContext()},this.forceContextRestore=function(){const _=f0.get("WEBGL_lose_context");if(_)_.restoreContext()},this.getPixelRatio=function(){return n},this.setPixelRatio=function(_){if(_===void 0)return;n=_,this.setSize(P,l,!1)},this.getSize=function(_){return _.set(P,l)},this.setSize=function(_,y,b=!0){if(V0.isPresenting){console.warn("THREE.WebGLRenderer: Can\'t change size while VR device is presenting.");return}if(P=_,l=y,$.width=Math.floor(_*n),$.height=Math.floor(y*n),b===!0)$.style.width=_+"px",$.style.height=y+"px";this.setViewport(0,0,_,y)},this.getDrawingBufferSize=function(_){return _.set(P*n,l*n).floor()},this.setDrawingBufferSize=function(_,y,b){P=_,l=y,n=b,$.width=Math.floor(_*b),$.height=Math.floor(y*b),this.setViewport(0,0,_,y)},this.getCurrentViewport=function(_){return _.copy(N)},this.getViewport=function(_){return _.copy(p)},this.setViewport=function(_,y,b,f){if(_.isVector4)p.set(_.x,_.y,_.z,_.w);else p.set(_,y,b,f);B0.viewport(N.copy(p).multiplyScalar(n).floor())},this.getScissor=function(_){return _.copy(T)},this.setScissor=function(_,y,b,f){if(_.isVector4)T.set(_.x,_.y,_.z,_.w);else T.set(_,y,b,f);B0.scissor(C.copy(T).multiplyScalar(n).floor())},this.getScissorTest=function(){return h},this.setScissorTest=function(_){B0.setScissorTest(h=_)},this.setOpaqueSort=function(_){d=_},this.setTransparentSort=function(_){r=_},this.getClearColor=function(_){return _.copy(Z0.getClearColor())},this.setClearColor=function(){Z0.setClearColor.apply(Z0,arguments)},this.getClearAlpha=function(){return Z0.getClearAlpha()},this.setClearAlpha=function(){Z0.setClearAlpha.apply(Z0,arguments)},this.clear=function(_=!0,y=!0,b=!0){let f=0;if(_){let x=!1;if(w!==null){const K0=w.texture.format;x=K0===1033||K0===1031||K0===1029}if(x){const K0=w.texture.type,N0=K0===1009||K0===1014||K0===1012||K0===1020||K0===1017||K0===1018,_0=Z0.getClearColor(),z0=Z0.getClearAlpha(),P0=_0.r,O0=_0.g,w0=_0.b;if(N0)R[0]=P0,R[1]=O0,R[2]=w0,R[3]=z0,S.clearBufferuiv(S.COLOR,0,R);else D[0]=P0,D[1]=O0,D[2]=w0,D[3]=z0,S.clearBufferiv(S.COLOR,0,D)}else f|=S.COLOR_BUFFER_BIT}if(y)f|=S.DEPTH_BUFFER_BIT;if(b)f|=S.STENCIL_BUFFER_BIT;S.clear(f)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){if($.removeEventListener("webglcontextlost",k,!1),$.removeEventListener("webglcontextrestored",$0,!1),$.removeEventListener("webglcontextcreationerror",J0,!1),t.dispose(),o.dispose(),T0.dispose(),s0.dispose(),p0.dispose(),B.dispose(),l0.dispose(),C0.dispose(),F.dispose(),V0.dispose(),V0.removeEventListener("sessionstart",YJ),V0.removeEventListener("sessionend",u0),U0)U0.dispose(),U0=null;GJ.stop()};function k(_){_.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),z=!0}function $0(){console.log("THREE.WebGLRenderer: Context Restored."),z=!1;const _=d0.autoReset,y=R0.enabled,b=R0.autoUpdate,f=R0.needsUpdate,x=R0.type;I0(),d0.autoReset=_,R0.enabled=y,R0.autoUpdate=b,R0.needsUpdate=f,R0.type=x}function J0(_){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",_.statusMessage)}function H0(_){const y=_.target;y.removeEventListener("dispose",H0),Y0(y)}function Y0(_){c(_),T0.remove(_)}function c(_){const y=T0.get(_).programs;if(y!==void 0){if(y.forEach(function(b){F.releaseProgram(b)}),_.isShaderMaterial)F.releaseShaderCache(_)}}this.renderBufferDirect=function(_,y,b,f,x,K0){if(y===null)y=n0;const N0=x.isMesh&&x.matrixWorld.determinant()<0,_0=u9(_,y,b,f,x);B0.setMaterial(f,N0);let z0=b.index,P0=1;if(f.wireframe===!0){if(z0=_J.getWireframeAttribute(b),z0===void 0)return;P0=2}const O0=b.drawRange,w0=b.attributes.position;let c0=O0.start*P0,o0=(O0.start+O0.count)*P0;if(K0!==null)c0=Math.max(c0,K0.start*P0),o0=Math.min(o0,(K0.start+K0.count)*P0);if(z0!==null)c0=Math.max(c0,0),o0=Math.min(o0,z0.count);else if(w0!==void 0&&w0!==null)c0=Math.max(c0,0),o0=Math.min(o0,w0.count);const zJ=o0-c0;if(zJ<0||zJ===Infinity)return;l0.setup(x,f,_0,b,z0);let SJ,r0=M0;if(z0!==null)SJ=WJ.get(z0),r0=b0,r0.setIndex(SJ);if(x.isMesh)if(f.wireframe===!0)B0.setLineWidth(f.wireframeLinewidth*KJ()),r0.setMode(S.LINES);else r0.setMode(S.TRIANGLES);else if(x.isLine){let S0=f.linewidth;if(S0===void 0)S0=1;if(B0.setLineWidth(S0*KJ()),x.isLineSegments)r0.setMode(S.LINES);else if(x.isLineLoop)r0.setMode(S.LINE_LOOP);else r0.setMode(S.LINE_STRIP)}else if(x.isPoints)r0.setMode(S.POINTS);else if(x.isSprite)r0.setMode(S.TRIANGLES);if(x.isInstancedMesh)r0.renderInstances(c0,zJ,x.count);else if(b.isInstancedBufferGeometry){const S0=b._maxInstanceCount!==void 0?b._maxInstanceCount:Infinity,B7=Math.min(b.instanceCount,S0);r0.renderInstances(c0,zJ,B7)}else r0.render(c0,zJ)},this.compile=function(_,y){function b(f,x,K0){if(f.transparent===!0&&f.side===2&&f.forceSinglePass===!1)f.side=1,f.needsUpdate=!0,u6(f,x,K0),f.side=0,f.needsUpdate=!0,u6(f,x,K0),f.side=2;else u6(f,x,K0)}O=o.get(_),O.init(),q.push(O),_.traverseVisible(function(f){if(f.isLight&&f.layers.test(y.layers)){if(O.pushLight(f),f.castShadow)O.pushShadow(f)}}),O.setupLights(I._useLegacyLights),_.traverse(function(f){const x=f.material;if(x)if(Array.isArray(x))for(let K0=0;K0<x.length;K0++){const N0=x[K0];b(N0,_,f)}else b(x,_,f)}),q.pop(),O=null};let E0=null;function L0(_){if(E0)E0(_)}function YJ(){GJ.stop()}function u0(){GJ.start()}const GJ=new E9;if(GJ.setAnimationLoop(L0),typeof self!=="undefined")GJ.setContext(self);this.setAnimationLoop=function(_){E0=_,V0.setAnimationLoop(_),_===null?GJ.stop():GJ.start()},V0.addEventListener("sessionstart",YJ),V0.addEventListener("sessionend",u0),this.render=function(_,y){if(y!==void 0&&y.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(z===!0)return;if(_.matrixWorldAutoUpdate===!0)_.updateMatrixWorld();if(y.parent===null&&y.matrixWorldAutoUpdate===!0)y.updateMatrixWorld();if(V0.enabled===!0&&V0.isPresenting===!0){if(V0.cameraAutoUpdate===!0)V0.updateCamera(y);y=V0.getCamera()}if(_.isScene===!0)_.onBeforeRender(I,_,y,w);if(O=o.get(_,q.length),O.init(),q.push(O),j0.multiplyMatrices(y.projectionMatrix,y.matrixWorldInverse),a.setFromProjectionMatrix(j0),X0=this.localClippingEnabled,G0=i.init(this.clippingPlanes,X0),M=t.get(_,E.length),M.init(),E.push(M),LJ(_,y,0,I.sortObjects),M.finish(),I.sortObjects===!0)M.sort(d,r);if(this.info.render.frame++,G0===!0)i.beginShadows();const b=O.state.shadowsArray;if(R0.render(b,_,y),G0===!0)i.endShadows();if(this.info.autoReset===!0)this.info.reset();if(Z0.render(M,_),O.setupLights(I._useLegacyLights),y.isArrayCamera){const f=y.cameras;for(let x=0,K0=f.length;x<K0;x++){const N0=f[x];F8(M,_,N0,N0.viewport)}}else F8(M,_,y);if(w!==null)v0.updateMultisampleRenderTarget(w),v0.updateRenderTargetMipmap(w);if(_.isScene===!0)_.onAfterRender(I,_,y);if(l0.resetDefaultState(),g=-1,u=null,q.pop(),q.length>0)O=q[q.length-1];else O=null;if(E.pop(),E.length>0)M=E[E.length-1];else M=null};function LJ(_,y,b,f){if(_.visible===!1)return;if(_.layers.test(y.layers)){if(_.isGroup)b=_.renderOrder;else if(_.isLOD){if(_.autoUpdate===!0)_.update(y)}else if(_.isLight){if(O.pushLight(_),_.castShadow)O.pushShadow(_)}else if(_.isSprite){if(!_.frustumCulled||a.intersectsSprite(_)){if(f)y0.setFromMatrixPosition(_.matrixWorld).applyMatrix4(j0);const N0=B.update(_),_0=_.material;if(_0.visible)M.push(_,N0,_0,b,y0.z,null)}}else if(_.isMesh||_.isLine||_.isPoints){if(!_.frustumCulled||a.intersectsObject(_)){const N0=B.update(_),_0=_.material;if(f){if(_.boundingSphere!==void 0){if(_.boundingSphere===null)_.computeBoundingSphere();y0.copy(_.boundingSphere.center)}else{if(N0.boundingSphere===null)N0.computeBoundingSphere();y0.copy(N0.boundingSphere.center)}y0.applyMatrix4(_.matrixWorld).applyMatrix4(j0)}if(Array.isArray(_0)){const z0=N0.groups;for(let P0=0,O0=z0.length;P0<O0;P0++){const w0=z0[P0],c0=_0[w0.materialIndex];if(c0&&c0.visible)M.push(_,N0,c0,b,y0.z,w0)}}else if(_0.visible)M.push(_,N0,_0,b,y0.z,null)}}}const K0=_.children;for(let N0=0,_0=K0.length;N0<_0;N0++)LJ(K0[N0],y,b,f)}function F8(_,y,b,f){const{opaque:x,transmissive:K0,transparent:N0}=_;if(O.setupLightsView(b),G0===!0)i.setGlobalState(I.clippingPlanes,b);if(K0.length>0)l9(x,K0,y,b);if(f)B0.viewport(N.copy(f));if(x.length>0)l6(x,y,b);if(K0.length>0)l6(K0,y,b);if(N0.length>0)l6(N0,y,b);B0.buffers.depth.setTest(!0),B0.buffers.depth.setMask(!0),B0.buffers.color.setMask(!0),B0.setPolygonOffset(!1)}function l9(_,y,b,f){const x=D0.isWebGL2;if(U0===null)U0=new nJ(1,1,{generateMipmaps:!0,type:f0.has("EXT_color_buffer_half_float")?1016:1009,minFilter:1008,samples:x?4:0});if(I.getDrawingBufferSize(F0),x)U0.setSize(F0.x,F0.y);else U0.setSize(i7(F0.x),i7(F0.y));const K0=I.getRenderTarget();if(I.setRenderTarget(U0),I.getClearColor(e),W0=I.getClearAlpha(),W0<1)I.setClearColor(16777215,0.5);I.clear();const N0=I.toneMapping;I.toneMapping=0,l6(_,b,f),v0.updateMultisampleRenderTarget(U0),v0.updateRenderTargetMipmap(U0);let _0=!1;for(let z0=0,P0=y.length;z0<P0;z0++){const O0=y[z0],w0=O0.object,c0=O0.geometry,o0=O0.material,zJ=O0.group;if(o0.side===2&&w0.layers.test(f.layers)){const SJ=o0.side;o0.side=1,o0.needsUpdate=!0,N8(w0,b,f,c0,o0,zJ),o0.side=SJ,o0.needsUpdate=!0,_0=!0}}if(_0===!0)v0.updateMultisampleRenderTarget(U0),v0.updateRenderTargetMipmap(U0);I.setRenderTarget(K0),I.setClearColor(e,W0),I.toneMapping=N0}function l6(_,y,b){const f=y.isScene===!0?y.overrideMaterial:null;for(let x=0,K0=_.length;x<K0;x++){const N0=_[x],_0=N0.object,z0=N0.geometry,P0=f===null?N0.material:f,O0=N0.group;if(_0.layers.test(b.layers))N8(_0,y,b,z0,P0,O0)}}function N8(_,y,b,f,x,K0){if(_.onBeforeRender(I,y,b,f,x,K0),_.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,_.matrixWorld),_.normalMatrix.getNormalMatrix(_.modelViewMatrix),x.onBeforeRender(I,y,b,f,_,K0),x.transparent===!0&&x.side===2&&x.forceSinglePass===!1)x.side=1,x.needsUpdate=!0,I.renderBufferDirect(b,y,f,x,_,K0),x.side=0,x.needsUpdate=!0,I.renderBufferDirect(b,y,f,x,_,K0),x.side=2;else I.renderBufferDirect(b,y,f,x,_,K0);_.onAfterRender(I,y,b,f,x,K0)}function u6(_,y,b){if(y.isScene!==!0)y=n0;const f=T0.get(_),x=O.state.lights,K0=O.state.shadowsArray,N0=x.state.version,_0=F.getParameters(_,x.state,K0,y,b),z0=F.getProgramCacheKey(_0);let P0=f.programs;if(f.environment=_.isMeshStandardMaterial?y.environment:null,f.fog=y.fog,f.envMap=(_.isMeshStandardMaterial?p0:s0).get(_.envMap||f.environment),P0===void 0)_.addEventListener("dispose",H0),P0=new Map,f.programs=P0;let O0=P0.get(z0);if(O0!==void 0){if(f.currentProgram===O0&&f.lightsStateVersion===N0)return O8(_,_0),O0}else _0.uniforms=F.getUniforms(_),_.onBuild(b,_0,I),_.onBeforeCompile(_0,I),O0=F.acquireProgram(_0,z0),P0.set(z0,O0),f.uniforms=_0.uniforms;const w0=f.uniforms;if(!_.isShaderMaterial&&!_.isRawShaderMaterial||_.clipping===!0)w0.clippingPlanes=i.uniform;if(O8(_,_0),f.needsLights=c9(_),f.lightsStateVersion=N0,f.needsLights)w0.ambientLightColor.value=x.state.ambient,w0.lightProbe.value=x.state.probe,w0.directionalLights.value=x.state.directional,w0.directionalLightShadows.value=x.state.directionalShadow,w0.spotLights.value=x.state.spot,w0.spotLightShadows.value=x.state.spotShadow,w0.rectAreaLights.value=x.state.rectArea,w0.ltc_1.value=x.state.rectAreaLTC1,w0.ltc_2.value=x.state.rectAreaLTC2,w0.pointLights.value=x.state.point,w0.pointLightShadows.value=x.state.pointShadow,w0.hemisphereLights.value=x.state.hemi,w0.directionalShadowMap.value=x.state.directionalShadowMap,w0.directionalShadowMatrix.value=x.state.directionalShadowMatrix,w0.spotShadowMap.value=x.state.spotShadowMap,w0.spotLightMatrix.value=x.state.spotLightMatrix,w0.spotLightMap.value=x.state.spotLightMap,w0.pointShadowMap.value=x.state.pointShadowMap,w0.pointShadowMatrix.value=x.state.pointShadowMatrix;const c0=O0.getUniforms(),o0=x6.seqWithValue(c0.seq,w0);return f.currentProgram=O0,f.uniformsList=o0,O0}function O8(_,y){const b=T0.get(_);b.outputColorSpace=y.outputColorSpace,b.instancing=y.instancing,b.instancingColor=y.instancingColor,b.skinning=y.skinning,b.morphTargets=y.morphTargets,b.morphNormals=y.morphNormals,b.morphColors=y.morphColors,b.morphTargetsCount=y.morphTargetsCount,b.numClippingPlanes=y.numClippingPlanes,b.numIntersection=y.numClipIntersection,b.vertexAlphas=y.vertexAlphas,b.vertexTangents=y.vertexTangents,b.toneMapping=y.toneMapping}function u9(_,y,b,f,x){if(y.isScene!==!0)y=n0;v0.resetTextureUnits();const K0=y.fog,N0=f.isMeshStandardMaterial?y.environment:null,_0=w===null?I.outputColorSpace:w.isXRRenderTarget===!0?w.texture.colorSpace:"srgb-linear",z0=(f.isMeshStandardMaterial?p0:s0).get(f.envMap||N0),P0=f.vertexColors===!0&&!!b.attributes.color&&b.attributes.color.itemSize===4,O0=!!b.attributes.tangent&&(!!f.normalMap||f.anisotropy>0),w0=!!b.morphAttributes.position,c0=!!b.morphAttributes.normal,o0=!!b.morphAttributes.color;let zJ=0;if(f.toneMapped){if(w===null||w.isXRRenderTarget===!0)zJ=I.toneMapping}const SJ=b.morphAttributes.position||b.morphAttributes.normal||b.morphAttributes.color,r0=SJ!==void 0?SJ.length:0,S0=T0.get(f),B7=O.state.lights;if(G0===!0){if(X0===!0||_!==u){const FJ=_===u&&f.id===g;i.setState(f,_,FJ)}}let a0=!1;if(f.version===S0.__version){if(S0.needsLights&&S0.lightsStateVersion!==B7.state.version)a0=!0;else if(S0.outputColorSpace!==_0)a0=!0;else if(x.isInstancedMesh&&S0.instancing===!1)a0=!0;else if(!x.isInstancedMesh&&S0.instancing===!0)a0=!0;else if(x.isSkinnedMesh&&S0.skinning===!1)a0=!0;else if(!x.isSkinnedMesh&&S0.skinning===!0)a0=!0;else if(x.isInstancedMesh&&S0.instancingColor===!0&&x.instanceColor===null)a0=!0;else if(x.isInstancedMesh&&S0.instancingColor===!1&&x.instanceColor!==null)a0=!0;else if(S0.envMap!==z0)a0=!0;else if(f.fog===!0&&S0.fog!==K0)a0=!0;else if(S0.numClippingPlanes!==void 0&&(S0.numClippingPlanes!==i.numPlanes||S0.numIntersection!==i.numIntersection))a0=!0;else if(S0.vertexAlphas!==P0)a0=!0;else if(S0.vertexTangents!==O0)a0=!0;else if(S0.morphTargets!==w0)a0=!0;else if(S0.morphNormals!==c0)a0=!0;else if(S0.morphColors!==o0)a0=!0;else if(S0.toneMapping!==zJ)a0=!0;else if(D0.isWebGL2===!0&&S0.morphTargetsCount!==r0)a0=!0}else a0=!0,S0.__version=f.version;let oJ=S0.currentProgram;if(a0===!0)oJ=u6(f,y,x);let M8=!1,A6=!1,I7=!1;const VJ=oJ.getUniforms(),iJ=S0.uniforms;if(B0.useProgram(oJ.program))M8=!0,A6=!0,I7=!0;if(f.id!==g)g=f.id,A6=!0;if(M8||u!==_){VJ.setValue(S,"projectionMatrix",_.projectionMatrix),VJ.setValue(S,"viewMatrix",_.matrixWorldInverse);const FJ=VJ.map.cameraPosition;if(FJ!==void 0)FJ.setValue(S,y0.setFromMatrixPosition(_.matrixWorld));if(D0.logarithmicDepthBuffer)VJ.setValue(S,"logDepthBufFC",2/(Math.log(_.far+1)/Math.LN2));if(f.isMeshPhongMaterial||f.isMeshToonMaterial||f.isMeshLambertMaterial||f.isMeshBasicMaterial||f.isMeshStandardMaterial||f.isShaderMaterial)VJ.setValue(S,"isOrthographic",_.isOrthographicCamera===!0);if(u!==_)u=_,A6=!0,I7=!0}if(x.isSkinnedMesh){VJ.setOptional(S,x,"bindMatrix"),VJ.setOptional(S,x,"bindMatrixInverse");const FJ=x.skeleton;if(FJ)if(D0.floatVertexTextures){if(FJ.boneTexture===null)FJ.computeBoneTexture();VJ.setValue(S,"boneTexture",FJ.boneTexture,v0),VJ.setValue(S,"boneTextureSize",FJ.boneTextureSize)}else console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.")}const w7=b.morphAttributes;if(w7.position!==void 0||w7.normal!==void 0||w7.color!==void 0&&D0.isWebGL2===!0)q0.update(x,b,oJ);if(A6||S0.receiveShadow!==x.receiveShadow)S0.receiveShadow=x.receiveShadow,VJ.setValue(S,"receiveShadow",x.receiveShadow);if(f.isMeshGouraudMaterial&&f.envMap!==null)iJ.envMap.value=z0,iJ.flipEnvMap.value=z0.isCubeTexture&&z0.isRenderTargetTexture===!1?-1:1;if(A6){if(VJ.setValue(S,"toneMappingExposure",I.toneMappingExposure),S0.needsLights)d9(iJ,I7);if(K0&&f.fog===!0)j.refreshFogUniforms(iJ,K0);j.refreshMaterialUniforms(iJ,f,n,l,U0),x6.upload(S,S0.uniformsList,iJ,v0)}if(f.isShaderMaterial&&f.uniformsNeedUpdate===!0)x6.upload(S,S0.uniformsList,iJ,v0),f.uniformsNeedUpdate=!1;if(f.isSpriteMaterial)VJ.setValue(S,"center",x.center);if(VJ.setValue(S,"modelViewMatrix",x.modelViewMatrix),VJ.setValue(S,"normalMatrix",x.normalMatrix),VJ.setValue(S,"modelMatrix",x.matrixWorld),f.isShaderMaterial||f.isRawShaderMaterial){const FJ=f.uniformsGroups;for(let k7=0,n9=FJ.length;k7<n9;k7++)if(D0.isWebGL2){const _8=FJ[k7];C0.update(_8,oJ),C0.bind(_8,oJ)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return oJ}function d9(_,y){_.ambientLightColor.needsUpdate=y,_.lightProbe.needsUpdate=y,_.directionalLights.needsUpdate=y,_.directionalLightShadows.needsUpdate=y,_.pointLights.needsUpdate=y,_.pointLightShadows.needsUpdate=y,_.spotLights.needsUpdate=y,_.spotLightShadows.needsUpdate=y,_.rectAreaLights.needsUpdate=y,_.hemisphereLights.needsUpdate=y}function c9(_){return _.isMeshLambertMaterial||_.isMeshToonMaterial||_.isMeshPhongMaterial||_.isMeshStandardMaterial||_.isShadowMaterial||_.isShaderMaterial&&_.lights===!0}if(this.getActiveCubeFace=function(){return A},this.getActiveMipmapLevel=function(){return L},this.getRenderTarget=function(){return w},this.setRenderTargetTextures=function(_,y,b){T0.get(_.texture).__webglTexture=y,T0.get(_.depthTexture).__webglTexture=b;const f=T0.get(_);if(f.__hasExternalTextures=!0,f.__hasExternalTextures){if(f.__autoAllocateDepthBuffer=b===void 0,!f.__autoAllocateDepthBuffer){if(f0.has("WEBGL_multisampled_render_to_texture")===!0)console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),f.__useRenderToTexture=!1}}},this.setRenderTargetFramebuffer=function(_,y){const b=T0.get(_);b.__webglFramebuffer=y,b.__useDefaultFramebuffer=y===void 0},this.setRenderTarget=function(_,y=0,b=0){w=_,A=y,L=b;let f=!0,x=null,K0=!1,N0=!1;if(_){const z0=T0.get(_);if(z0.__useDefaultFramebuffer!==void 0)B0.bindFramebuffer(S.FRAMEBUFFER,null),f=!1;else if(z0.__webglFramebuffer===void 0)v0.setupRenderTarget(_);else if(z0.__hasExternalTextures)v0.rebindTextures(_,T0.get(_.texture).__webglTexture,T0.get(_.depthTexture).__webglTexture);const P0=_.texture;if(P0.isData3DTexture||P0.isDataArrayTexture||P0.isCompressedArrayTexture)N0=!0;const O0=T0.get(_).__webglFramebuffer;if(_.isWebGLCubeRenderTarget){if(Array.isArray(O0[y]))x=O0[y][b];else x=O0[y];K0=!0}else if(D0.isWebGL2&&_.samples>0&&v0.useMultisampledRTT(_)===!1)x=T0.get(_).__webglMultisampledFramebuffer;else if(Array.isArray(O0))x=O0[b];else x=O0;N.copy(_.viewport),C.copy(_.scissor),m=_.scissorTest}else N.copy(p).multiplyScalar(n).floor(),C.copy(T).multiplyScalar(n).floor(),m=h;if(B0.bindFramebuffer(S.FRAMEBUFFER,x)&&D0.drawBuffers&&f)B0.drawBuffers(_,x);if(B0.viewport(N),B0.scissor(C),B0.setScissorTest(m),K0){const z0=T0.get(_.texture);S.framebufferTexture2D(S.FRAMEBUFFER,S.COLOR_ATTACHMENT0,S.TEXTURE_CUBE_MAP_POSITIVE_X+y,z0.__webglTexture,b)}else if(N0){const z0=T0.get(_.texture),P0=y||0;S.framebufferTextureLayer(S.FRAMEBUFFER,S.COLOR_ATTACHMENT0,z0.__webglTexture,b||0,P0)}g=-1},this.readRenderTargetPixels=function(_,y,b,f,x,K0,N0){if(!(_&&_.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let _0=T0.get(_).__webglFramebuffer;if(_.isWebGLCubeRenderTarget&&N0!==void 0)_0=_0[N0];if(_0){B0.bindFramebuffer(S.FRAMEBUFFER,_0);try{const z0=_.texture,P0=z0.format,O0=z0.type;if(P0!==1023&&s.convert(P0)!==S.getParameter(S.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const w0=O0===1016&&(f0.has("EXT_color_buffer_half_float")||D0.isWebGL2&&f0.has("EXT_color_buffer_float"));if(O0!==1009&&s.convert(O0)!==S.getParameter(S.IMPLEMENTATION_COLOR_READ_TYPE)&&!(O0===1015&&(D0.isWebGL2||f0.has("OES_texture_float")||f0.has("WEBGL_color_buffer_float")))&&!w0){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}if(y>=0&&y<=_.width-f&&(b>=0&&b<=_.height-x))S.readPixels(y,b,f,x,s.convert(P0),s.convert(O0),K0)}finally{const z0=w!==null?T0.get(w).__webglFramebuffer:null;B0.bindFramebuffer(S.FRAMEBUFFER,z0)}}},this.copyFramebufferToTexture=function(_,y,b=0){const f=Math.pow(2,-b),x=Math.floor(y.image.width*f),K0=Math.floor(y.image.height*f);v0.setTexture2D(y,0),S.copyTexSubImage2D(S.TEXTURE_2D,b,0,0,_.x,_.y,x,K0),B0.unbindTexture()},this.copyTextureToTexture=function(_,y,b,f=0){const x=y.image.width,K0=y.image.height,N0=s.convert(b.format),_0=s.convert(b.type);if(v0.setTexture2D(b,0),S.pixelStorei(S.UNPACK_FLIP_Y_WEBGL,b.flipY),S.pixelStorei(S.UNPACK_PREMULTIPLY_ALPHA_WEBGL,b.premultiplyAlpha),S.pixelStorei(S.UNPACK_ALIGNMENT,b.unpackAlignment),y.isDataTexture)S.texSubImage2D(S.TEXTURE_2D,f,_.x,_.y,x,K0,N0,_0,y.image.data);else if(y.isCompressedTexture)S.compressedTexSubImage2D(S.TEXTURE_2D,f,_.x,_.y,y.mipmaps[0].width,y.mipmaps[0].height,N0,y.mipmaps[0].data);else S.texSubImage2D(S.TEXTURE_2D,f,_.x,_.y,N0,_0,y.image);if(f===0&&b.generateMipmaps)S.generateMipmap(S.TEXTURE_2D);B0.unbindTexture()},this.copyTextureToTexture3D=function(_,y,b,f,x=0){if(I.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const K0=_.max.x-_.min.x+1,N0=_.max.y-_.min.y+1,_0=_.max.z-_.min.z+1,z0=s.convert(f.format),P0=s.convert(f.type);let O0;if(f.isData3DTexture)v0.setTexture3D(f,0),O0=S.TEXTURE_3D;else if(f.isDataArrayTexture)v0.setTexture2DArray(f,0),O0=S.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}S.pixelStorei(S.UNPACK_FLIP_Y_WEBGL,f.flipY),S.pixelStorei(S.UNPACK_PREMULTIPLY_ALPHA_WEBGL,f.premultiplyAlpha),S.pixelStorei(S.UNPACK_ALIGNMENT,f.unpackAlignment);const w0=S.getParameter(S.UNPACK_ROW_LENGTH),c0=S.getParameter(S.UNPACK_IMAGE_HEIGHT),o0=S.getParameter(S.UNPACK_SKIP_PIXELS),zJ=S.getParameter(S.UNPACK_SKIP_ROWS),SJ=S.getParameter(S.UNPACK_SKIP_IMAGES),r0=b.isCompressedTexture?b.mipmaps[0]:b.image;if(S.pixelStorei(S.UNPACK_ROW_LENGTH,r0.width),S.pixelStorei(S.UNPACK_IMAGE_HEIGHT,r0.height),S.pixelStorei(S.UNPACK_SKIP_PIXELS,_.min.x),S.pixelStorei(S.UNPACK_SKIP_ROWS,_.min.y),S.pixelStorei(S.UNPACK_SKIP_IMAGES,_.min.z),b.isDataTexture||b.isData3DTexture)S.texSubImage3D(O0,x,y.x,y.y,y.z,K0,N0,_0,z0,P0,r0.data);else if(b.isCompressedArrayTexture)console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),S.compressedTexSubImage3D(O0,x,y.x,y.y,y.z,K0,N0,_0,z0,r0.data);else S.texSubImage3D(O0,x,y.x,y.y,y.z,K0,N0,_0,z0,P0,r0);if(S.pixelStorei(S.UNPACK_ROW_LENGTH,w0),S.pixelStorei(S.UNPACK_IMAGE_HEIGHT,c0),S.pixelStorei(S.UNPACK_SKIP_PIXELS,o0),S.pixelStorei(S.UNPACK_SKIP_ROWS,zJ),S.pixelStorei(S.UNPACK_SKIP_IMAGES,SJ),x===0&&f.generateMipmaps)S.generateMipmap(O0);B0.unbindTexture()},this.initTexture=function(_){if(_.isCubeTexture)v0.setTextureCube(_,0);else if(_.isData3DTexture)v0.setTexture3D(_,0);else if(_.isDataArrayTexture||_.isCompressedArrayTexture)v0.setTexture2DArray(_,0);else v0.setTexture2D(_,0);B0.unbindTexture()},this.resetState=function(){A=0,L=0,w=null,B0.reset(),l0.reset()},typeof __THREE_DEVTOOLS__!=="undefined")__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return 2000}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(J){this._outputColorSpace=J;const $=this.getContext();$.drawingBufferColorSpace=J==="display-p3"?"display-p3":"srgb",$.unpackColorSpace=h0.workingColorSpace==="display-p3-linear"?"display-p3":"srgb"}get physicallyCorrectLights(){return console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),!this.useLegacyLights}set physicallyCorrectLights(J){console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),this.useLegacyLights=!J}get outputEncoding(){return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace==="srgb"?3001:3000}set outputEncoding(J){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace=J===3001?"srgb":"srgb-linear"}get useLegacyLights(){return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights}set useLegacyLights(J){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights=J}}class T9 extends O7{}T9.prototype.isWebGL1Renderer=!0;class M7{constructor(J,$=1,Z=1000){this.isFog=!0,this.name="",this.color=new g0(J),this.near=$,this.far=Z}clone(){return new M7(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class q8 extends DJ{constructor(){super();if(this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__!=="undefined")__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(J,$){if(super.copy(J,$),J.background!==null)this.background=J.background.clone();if(J.environment!==null)this.environment=J.environment.clone();if(J.fog!==null)this.fog=J.fog.clone();if(this.backgroundBlurriness=J.backgroundBlurriness,this.backgroundIntensity=J.backgroundIntensity,J.overrideMaterial!==null)this.overrideMaterial=J.overrideMaterial.clone();return this.matrixAutoUpdate=J.matrixAutoUpdate,this}toJSON(J){const $=super.toJSON(J);if(this.fog!==null)$.object.fog=this.fog.toJSON();if(this.backgroundBlurriness>0)$.object.backgroundBlurriness=this.backgroundBlurriness;if(this.backgroundIntensity!==1)$.object.backgroundIntensity=this.backgroundIntensity;return $}}class _7 extends w6{constructor(J){super();this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new g0(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(J)}copy(J){return super.copy(J),this.color.copy(J.color),this.map=J.map,this.alphaMap=J.alphaMap,this.size=J.size,this.sizeAttenuation=J.sizeAttenuation,this.fog=J.fog,this}}var Y9=new ZJ,t7=new Z8,U7=new g6,q7=new v;class R8 extends DJ{constructor(J=new PJ,$=new _7){super();this.isPoints=!0,this.type="Points",this.geometry=J,this.material=$,this.updateMorphTargets()}copy(J,$){return super.copy(J,$),this.material=Array.isArray(J.material)?J.material.slice():J.material,this.geometry=J.geometry,this}raycast(J,$){const Z=this.geometry,Q=this.matrixWorld,W=J.params.Points.threshold,Y=Z.drawRange;if(Z.boundingSphere===null)Z.computeBoundingSphere();if(U7.copy(Z.boundingSphere),U7.applyMatrix4(Q),U7.radius+=W,J.ray.intersectsSphere(U7)===!1)return;Y9.copy(Q).invert(),t7.copy(J.ray).applyMatrix4(Y9);const H=W/((this.scale.x+this.scale.y+this.scale.z)/3),X=H*H,K=Z.index,U=Z.attributes.position;if(K!==null){const V=Math.max(0,Y.start),R=Math.min(K.count,Y.start+Y.count);for(let D=V,M=R;D<M;D++){const O=K.getX(D);q7.fromBufferAttribute(U,O),X9(q7,O,X,Q,J,$,this)}}else{const V=Math.max(0,Y.start),R=Math.min(U.count,Y.start+Y.count);for(let D=V,M=R;D<M;D++)q7.fromBufferAttribute(U,D),X9(q7,D,X,Q,J,$,this)}}updateMorphTargets(){const $=this.geometry.morphAttributes,Z=Object.keys($);if(Z.length>0){const Q=$[Z[0]];if(Q!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let W=0,Y=Q.length;W<Y;W++){const H=Q[W].name||String(W);this.morphTargetInfluences.push(0),this.morphTargetDictionary[H]=W}}}}}class m6{constructor(J,$,Z,Q){this.parameterPositions=J,this._cachedIndex=0,this.resultBuffer=Q!==void 0?Q:new $.constructor(Z),this.sampleValues=$,this.valueSize=Z,this.settings=null,this.DefaultSettings_={}}evaluate(J){const $=this.parameterPositions;let Z=this._cachedIndex,Q=$[Z],W=$[Z-1];Z:{J:{let Y;$:{Q:if(!(J<Q)){for(let H=Z+2;;){if(Q===void 0){if(J<W)break Q;return Z=$.length,this._cachedIndex=Z,this.copySampleValue_(Z-1)}if(Z===H)break;if(W=Q,Q=$[++Z],J<Q)break J}Y=$.length;break $}if(!(J>=W)){const H=$[1];if(J<H)Z=2,W=H;for(let X=Z-2;;){if(W===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(Z===X)break;if(Q=W,W=$[--Z-1],J>=W)break J}Y=Z,Z=0;break $}break Z}while(Z<Y){const H=Z+Y>>>1;if(J<$[H])Y=H;else Z=H+1}if(Q=$[Z],W=$[Z-1],W===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(Q===void 0)return Z=$.length,this._cachedIndex=Z,this.copySampleValue_(Z-1)}this._cachedIndex=Z,this.intervalChanged_(Z,W,Q)}return this.interpolate_(Z,W,J,Q)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(J){const $=this.resultBuffer,Z=this.sampleValues,Q=this.valueSize,W=J*Q;for(let Y=0;Y!==Q;++Y)$[Y]=Z[W+Y];return $}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class S9 extends m6{constructor(J,$,Z,Q){super(J,$,Z,Q);this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:2400,endingEnd:2400}}intervalChanged_(J,$,Z){const Q=this.parameterPositions;let W=J-2,Y=J+1,H=Q[W],X=Q[Y];if(H===void 0)switch(this.getSettings_().endingStart){case 2401:W=J,H=2*$-Z;break;case 2402:W=Q.length-2,H=$+Q[W]-Q[W+1];break;default:W=J,H=Z}if(X===void 0)switch(this.getSettings_().endingEnd){case 2401:Y=J,X=2*Z-$;break;case 2402:Y=1,X=Z+Q[1]-Q[0];break;default:Y=J-1,X=$}const K=(Z-$)*0.5,G=this.valueSize;this._weightPrev=K/($-H),this._weightNext=K/(X-Z),this._offsetPrev=W*G,this._offsetNext=Y*G}interpolate_(J,$,Z,Q){const W=this.resultBuffer,Y=this.sampleValues,H=this.valueSize,X=J*H,K=X-H,G=this._offsetPrev,U=this._offsetNext,V=this._weightPrev,R=this._weightNext,D=(Z-$)/(Q-$),M=D*D,O=M*D,E=-V*O+2*V*M-V*D,q=(1+V)*O+(-1.5-2*V)*M+(-0.5+V)*D+1,I=(-1-R)*O+(1.5+R)*M+0.5*D,z=R*O-R*M;for(let A=0;A!==H;++A)W[A]=E*Y[G+A]+q*Y[K+A]+I*Y[X+A]+z*Y[U+A];return W}}class y9 extends m6{constructor(J,$,Z,Q){super(J,$,Z,Q)}interpolate_(J,$,Z,Q){const W=this.resultBuffer,Y=this.sampleValues,H=this.valueSize,X=J*H,K=X-H,G=(Z-$)/(Q-$),U=1-G;for(let V=0;V!==H;++V)W[V]=Y[K+V]*U+Y[X+V]*G;return W}}class f9 extends m6{constructor(J,$,Z,Q){super(J,$,Z,Q)}interpolate_(J){return this.copySampleValue_(J-1)}}class TJ{constructor(J,$,Z,Q){if(J===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if($===void 0||$.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+J);this.name=J,this.times=R7($,this.TimeBufferType),this.values=R7(Z,this.ValueBufferType),this.setInterpolation(Q||this.DefaultInterpolation)}static toJSON(J){const $=J.constructor;let Z;if($.toJSON!==this.toJSON)Z=$.toJSON(J);else{Z={name:J.name,times:R7(J.times,Array),values:R7(J.values,Array)};const Q=J.getInterpolation();if(Q!==J.DefaultInterpolation)Z.interpolation=Q}return Z.type=J.ValueTypeName,Z}InterpolantFactoryMethodDiscrete(J){return new f9(this.times,this.values,this.getValueSize(),J)}InterpolantFactoryMethodLinear(J){return new y9(this.times,this.values,this.getValueSize(),J)}InterpolantFactoryMethodSmooth(J){return new S9(this.times,this.values,this.getValueSize(),J)}setInterpolation(J){let $;switch(J){case 2300:$=this.InterpolantFactoryMethodDiscrete;break;case 2301:$=this.InterpolantFactoryMethodLinear;break;case 2302:$=this.InterpolantFactoryMethodSmooth;break}if($===void 0){const Z="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(J!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(Z);return console.warn("THREE.KeyframeTrack:",Z),this}return this.createInterpolant=$,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}}getValueSize(){return this.values.length/this.times.length}shift(J){if(J!==0){const $=this.times;for(let Z=0,Q=$.length;Z!==Q;++Z)$[Z]+=J}return this}scale(J){if(J!==1){const $=this.times;for(let Z=0,Q=$.length;Z!==Q;++Z)$[Z]*=J}return this}trim(J,$){const Z=this.times,Q=Z.length;let W=0,Y=Q-1;while(W!==Q&&Z[W]<J)++W;while(Y!==-1&&Z[Y]>$)--Y;if(++Y,W!==0||Y!==Q){if(W>=Y)Y=Math.max(Y,1),W=Y-1;const H=this.getValueSize();this.times=Z.slice(W,Y),this.values=this.values.slice(W*H,Y*H)}return this}validate(){let J=!0;const $=this.getValueSize();if($-Math.floor($)!==0)console.error("THREE.KeyframeTrack: Invalid value size in track.",this),J=!1;const Z=this.times,Q=this.values,W=Z.length;if(W===0)console.error("THREE.KeyframeTrack: Track is empty.",this),J=!1;let Y=null;for(let H=0;H!==W;H++){const X=Z[H];if(typeof X==="number"&&isNaN(X)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,H,X),J=!1;break}if(Y!==null&&Y>X){console.error("THREE.KeyframeTrack: Out of order keys.",this,H,X,Y),J=!1;break}Y=X}if(Q!==void 0){if(bW(Q))for(let H=0,X=Q.length;H!==X;++H){const K=Q[H];if(isNaN(K)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,H,K),J=!1;break}}}return J}optimize(){const J=this.times.slice(),$=this.values.slice(),Z=this.getValueSize(),Q=this.getInterpolation()===2302,W=J.length-1;let Y=1;for(let H=1;H<W;++H){let X=!1;const K=J[H],G=J[H+1];if(K!==G&&(H!==1||K!==J[0]))if(!Q){const U=H*Z,V=U-Z,R=U+Z;for(let D=0;D!==Z;++D){const M=$[U+D];if(M!==$[V+D]||M!==$[R+D]){X=!0;break}}}else X=!0;if(X){if(H!==Y){J[Y]=J[H];const U=H*Z,V=Y*Z;for(let R=0;R!==Z;++R)$[V+R]=$[U+R]}++Y}}if(W>0){J[Y]=J[W];for(let H=W*Z,X=Y*Z,K=0;K!==Z;++K)$[X+K]=$[H+K];++Y}if(Y!==J.length)this.times=J.slice(0,Y),this.values=$.slice(0,Y*Z);else this.times=J,this.values=$;return this}clone(){const J=this.times.slice(),$=this.values.slice(),Q=new this.constructor(this.name,J,$);return Q.createInterpolant=this.createInterpolant,Q}}TJ.prototype.TimeBufferType=Float32Array;TJ.prototype.ValueBufferType=Float32Array;TJ.prototype.DefaultInterpolation=2301;class C6 extends TJ{}C6.prototype.ValueTypeName="bool";C6.prototype.ValueBufferType=Array;C6.prototype.DefaultInterpolation=2300;C6.prototype.InterpolantFactoryMethodLinear=void 0;C6.prototype.InterpolantFactoryMethodSmooth=void 0;class v9 extends TJ{}v9.prototype.ValueTypeName="color";class j9 extends TJ{}j9.prototype.ValueTypeName="number";class b9 extends m6{constructor(J,$,Z,Q){super(J,$,Z,Q)}interpolate_(J,$,Z,Q){const W=this.resultBuffer,Y=this.sampleValues,H=this.valueSize,X=(Z-$)/(Q-$);let K=J*H;for(let G=K+H;K!==G;K+=4)Q6.slerpFlat(W,0,Y,K-H,Y,K,X);return W}}class z7 extends TJ{InterpolantFactoryMethodLinear(J){return new b9(this.times,this.values,this.getValueSize(),J)}}z7.prototype.ValueTypeName="quaternion";z7.prototype.DefaultInterpolation=2301;z7.prototype.InterpolantFactoryMethodSmooth=void 0;class L6 extends TJ{}L6.prototype.ValueTypeName="string";L6.prototype.ValueBufferType=Array;L6.prototype.DefaultInterpolation=2300;L6.prototype.InterpolantFactoryMethodLinear=void 0;L6.prototype.InterpolantFactoryMethodSmooth=void 0;class x9 extends TJ{}x9.prototype.ValueTypeName="vector";class h9{constructor(J,$,Z){const Q=this;let W=!1,Y=0,H=0,X=void 0;const K=[];this.onStart=void 0,this.onLoad=J,this.onProgress=$,this.onError=Z,this.itemStart=function(G){if(H++,W===!1){if(Q.onStart!==void 0)Q.onStart(G,Y,H)}W=!0},this.itemEnd=function(G){if(Y++,Q.onProgress!==void 0)Q.onProgress(G,Y,H);if(Y===H){if(W=!1,Q.onLoad!==void 0)Q.onLoad()}},this.itemError=function(G){if(Q.onError!==void 0)Q.onError(G)},this.resolveURL=function(G){if(X)return X(G);return G},this.setURLModifier=function(G){return X=G,this},this.addHandler=function(G,U){return K.push(G,U),this},this.removeHandler=function(G){const U=K.indexOf(G);if(U!==-1)K.splice(U,2);return this},this.getHandler=function(G){for(let U=0,V=K.length;U<V;U+=2){const R=K[U],D=K[U+1];if(R.global)R.lastIndex=0;if(R.test(G))return D}return null}}}var xW=new h9;class g9{constructor(J){this.manager=J!==void 0?J:xW,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(J,$){const Z=this;return new Promise(function(Q,W){Z.load(J,Q,$,W)})}parse(){}setCrossOrigin(J){return this.crossOrigin=J,this}setWithCredentials(J){return this.withCredentials=J,this}setPath(J){return this.path=J,this}setResourcePath(J){return this.resourcePath=J,this}setRequestHeader(J){return this.requestHeader=J,this}}g9.DEFAULT_MATERIAL_NAME="__DEFAULT";var E8="\\[\\]\\.:\\/",hW=new RegExp("["+E8+"]","g"),D8="[^"+E8+"]",gW="[^"+E8.replace("\\.","")+"]",pW=/((?:WC+[\/:])*)/.source.replace("WC",D8),mW=/(WCOD+)?/.source.replace("WCOD",gW),lW=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",D8),uW=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",D8),dW=new RegExp("^"+pW+mW+lW+uW+"$"),cW=["material","materials","bones","map"];class p9{constructor(J,$,Z){const Q=Z||x0.parseTrackName($);this._targetGroup=J,this._bindings=J.subscribe_($,Q)}getValue(J,$){this.bind();const Z=this._targetGroup.nCachedObjects_,Q=this._bindings[Z];if(Q!==void 0)Q.getValue(J,$)}setValue(J,$){const Z=this._bindings;for(let Q=this._targetGroup.nCachedObjects_,W=Z.length;Q!==W;++Q)Z[Q].setValue(J,$)}bind(){const J=this._bindings;for(let $=this._targetGroup.nCachedObjects_,Z=J.length;$!==Z;++$)J[$].bind()}unbind(){const J=this._bindings;for(let $=this._targetGroup.nCachedObjects_,Z=J.length;$!==Z;++$)J[$].unbind()}}class x0{constructor(J,$,Z){this.path=$,this.parsedPath=Z||x0.parseTrackName($),this.node=x0.findNode(J,this.parsedPath.nodeName),this.rootNode=J,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(J,$,Z){if(!(J&&J.isAnimationObjectGroup))return new x0(J,$,Z);else return new x0.Composite(J,$,Z)}static sanitizeNodeName(J){return J.replace(/\s/g,"_").replace(hW,"")}static parseTrackName(J){const $=dW.exec(J);if($===null)throw new Error("PropertyBinding: Cannot parse trackName: "+J);const Z={nodeName:$[2],objectName:$[3],objectIndex:$[4],propertyName:$[5],propertyIndex:$[6]},Q=Z.nodeName&&Z.nodeName.lastIndexOf(".");if(Q!==void 0&&Q!==-1){const W=Z.nodeName.substring(Q+1);if(cW.indexOf(W)!==-1)Z.nodeName=Z.nodeName.substring(0,Q),Z.objectName=W}if(Z.propertyName===null||Z.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+J);return Z}static findNode(J,$){if($===void 0||$===""||$==="."||$===-1||$===J.name||$===J.uuid)return J;if(J.skeleton){const Z=J.skeleton.getBoneByName($);if(Z!==void 0)return Z}if(J.children){const Z=function(W){for(let Y=0;Y<W.length;Y++){const H=W[Y];if(H.name===$||H.uuid===$)return H;const X=Z(H.children);if(X)return X}return null},Q=Z(J.children);if(Q)return Q}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(J,$){J[$]=this.targetObject[this.propertyName]}_getValue_array(J,$){const Z=this.resolvedProperty;for(let Q=0,W=Z.length;Q!==W;++Q)J[$++]=Z[Q]}_getValue_arrayElement(J,$){J[$]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(J,$){this.resolvedProperty.toArray(J,$)}_setValue_direct(J,$){this.targetObject[this.propertyName]=J[$]}_setValue_direct_setNeedsUpdate(J,$){this.targetObject[this.propertyName]=J[$],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(J,$){this.targetObject[this.propertyName]=J[$],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(J,$){const Z=this.resolvedProperty;for(let Q=0,W=Z.length;Q!==W;++Q)Z[Q]=J[$++]}_setValue_array_setNeedsUpdate(J,$){const Z=this.resolvedProperty;for(let Q=0,W=Z.length;Q!==W;++Q)Z[Q]=J[$++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(J,$){const Z=this.resolvedProperty;for(let Q=0,W=Z.length;Q!==W;++Q)Z[Q]=J[$++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(J,$){this.resolvedProperty[this.propertyIndex]=J[$]}_setValue_arrayElement_setNeedsUpdate(J,$){this.resolvedProperty[this.propertyIndex]=J[$],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(J,$){this.resolvedProperty[this.propertyIndex]=J[$],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(J,$){this.resolvedProperty.fromArray(J,$)}_setValue_fromArray_setNeedsUpdate(J,$){this.resolvedProperty.fromArray(J,$),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(J,$){this.resolvedProperty.fromArray(J,$),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(J,$){this.bind(),this.getValue(J,$)}_setValue_unbound(J,$){this.bind(),this.setValue(J,$)}bind(){let J=this.node;const $=this.parsedPath,Z=$.objectName,Q=$.propertyName;let W=$.propertyIndex;if(!J)J=x0.findNode(this.rootNode,$.nodeName),this.node=J;if(this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!J){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(Z){let K=$.objectIndex;switch(Z){case"materials":if(!J.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!J.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}J=J.material.materials;break;case"bones":if(!J.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}J=J.skeleton.bones;for(let G=0;G<J.length;G++)if(J[G].name===K){K=G;break}break;case"map":if("map"in J){J=J.map;break}if(!J.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!J.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}J=J.material.map;break;default:if(J[Z]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}J=J[Z]}if(K!==void 0){if(J[K]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,J);return}J=J[K]}}const Y=J[Q];if(Y===void 0){const K=$.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+K+"."+Q+" but it wasn\'t found.",J);return}let H=this.Versioning.None;if(this.targetObject=J,J.needsUpdate!==void 0)H=this.Versioning.NeedsUpdate;else if(J.matrixWorldNeedsUpdate!==void 0)H=this.Versioning.MatrixWorldNeedsUpdate;let X=this.BindingType.Direct;if(W!==void 0){if(Q==="morphTargetInfluences"){if(!J.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!J.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}if(J.morphTargetDictionary[W]!==void 0)W=J.morphTargetDictionary[W]}X=this.BindingType.ArrayElement,this.resolvedProperty=Y,this.propertyIndex=W}else if(Y.fromArray!==void 0&&Y.toArray!==void 0)X=this.BindingType.HasFromToArray,this.resolvedProperty=Y;else if(Array.isArray(Y))X=this.BindingType.EntireArray,this.resolvedProperty=Y;else this.propertyName=Q;this.getValue=this.GetterByBindingType[X],this.setValue=this.SetterByBindingTypeAndVersioning[X][H]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}x0.Composite=p9;x0.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};x0.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};x0.prototype.GetterByBindingType=[x0.prototype._getValue_direct,x0.prototype._getValue_array,x0.prototype._getValue_arrayElement,x0.prototype._getValue_toArray];x0.prototype.SetterByBindingTypeAndVersioning=[[x0.prototype._setValue_direct,x0.prototype._setValue_direct_setNeedsUpdate,x0.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[x0.prototype._setValue_array,x0.prototype._setValue_array_setNeedsUpdate,x0.prototype._setValue_array_setMatrixWorldNeedsUpdate],[x0.prototype._setValue_arrayElement,x0.prototype._setValue_arrayElement_setNeedsUpdate,x0.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[x0.prototype._setValue_fromArray,x0.prototype._setValue_fromArray_setNeedsUpdate,x0.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];var oW=new Float32Array(1);if(typeof __THREE_DEVTOOLS__!=="undefined")__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"157"}}));if(typeof window!=="undefined")if(window.__THREE__)console.warn("WARNING: Multiple instances of Three.js being imported.");else window.__THREE__="157";var m9=document.getElementById("canvas-wrapper"),sW=(J)=>{const $=()=>{return 45},Z=new q8,Q=new EJ($(),J.clientWidth/J.clientHeight,0.1,1000);Q.position.z=5,Z.fog=new M7(0,3,6);const W=new O7({antialias:!0});W.setSize(J.clientWidth,J.clientHeight),J.appendChild(W.domElement);const Y=16737280,H=0.012,X=3,K=0.08,G=Math.floor(X/K),U=[];for(let z=0;z<G;z++)for(let A=0;A<G;A++)for(let L=0;L<G;L++){const w=new v(z*K-X/2,A*K-X/2,L*K-X/2);U.push(w)}const V=new PJ().setFromPoints(U),R=new _7({color:Y,size:H}),D=new R8(V,R);Z.add(D);let M=0,O=0;window.addEventListener("mousemove",(z)=>{M=z.clientX/window.innerWidth*2-1,O=z.clientY/window.innerHeight*2-1}),window.addEventListener("resize",()=>{W.setSize(J.clientWidth,J.clientHeight),Q.aspect=J.clientWidth/J.clientHeight,Q.fov=$(),Q.updateProjectionMatrix()});const E=0.001,q=0.0001;D.rotation.y=Math.PI/4,D.rotation.x=Math.PI/4;const I=()=>{requestAnimationFrame(I),W.render(Z,Q),D.rotation.y+=-M*E+q,D.rotation.x+=-O*E+q,D.rotation.z=q};I()};if(m9)sW(m9);
