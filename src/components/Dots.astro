<script>
  import * as THREE from "three";

  const targetElement = document.getElementById("canvas-wrapper");

  const initDots = (targetElement: HTMLElement) => {
    const getFov = (): number => {
      return 45;
    };

    // Set up Three.js
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      getFov(),
      targetElement.clientWidth / targetElement.clientHeight,
      0.1,
      1000
    );
    camera.position.z = 5;

    // Set up fog
    scene.fog = new THREE.Fog(0x000000, 3, 6); // Adjust the near and far values

    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(targetElement.clientWidth, targetElement.clientHeight);
    targetElement.appendChild(renderer.domElement);

    // Generate points
    const pointColor = 0xff6400;
    const pointSize = 0.010;
    const cubeSize = 3;
    const pointSpacing = 0.08;
    const pointsPerAxis = Math.floor(cubeSize / pointSpacing);
    const pointsArray = [];

    for (let x = 0; x < pointsPerAxis; x++) {
      for (let y = 0; y < pointsPerAxis; y++) {
        for (let z = 0; z < pointsPerAxis; z++) {
          const point = new THREE.Vector3(
            x * pointSpacing - cubeSize / 2,
            y * pointSpacing - cubeSize / 2 + 2,
            z * pointSpacing - cubeSize / 2
          );
          pointsArray.push(point);
        }
      }
    }

    // Create point cloud
    const geometry = new THREE.BufferGeometry().setFromPoints(pointsArray);
    const material = new THREE.PointsMaterial({
      color: pointColor,
      size: pointSize,
    });
    const points = new THREE.Points(geometry, material);
    scene.add(points);

    // Add mouse tracking
    let mouseX = 0;
    let mouseY = 0;
    window.addEventListener("mousemove", (event) => {
      mouseX = (event.clientX / window.innerWidth) * 2 - 1;
      mouseY = (event.clientY / window.innerHeight) * 2 - 1;
    });

    // rezie canvas with window

    window.addEventListener("resize", () => {
      renderer.setSize(targetElement.clientWidth, targetElement.clientHeight);
      camera.aspect = targetElement.clientWidth / targetElement.clientHeight;
      camera.fov = getFov();
      camera.updateProjectionMatrix();
    });

    // Render loop
    const rotationSpeed = 0.0005;
    const minimalRotationSpeed = 0.0001;

    // Initial cube rotation
    points.rotation.y = Math.PI / 4;
    points.rotation.x = Math.PI / 4;

    // Rotation animation
    const animate = () => {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);

      // Rotate the cube with mouse as speed controller
      points.rotation.y += -mouseX * rotationSpeed + minimalRotationSpeed;
      points.rotation.x += -mouseY * rotationSpeed + minimalRotationSpeed;
      points.rotation.z = minimalRotationSpeed;
    };

    animate();
  };

  if (targetElement) {
    initDots(targetElement);
  }
</script>

<div id="canvas-track">
  <div id="canvas-wrapper"></div>
</div>

<style lang="scss" is:global>
  @use "@/styles/helpers" as *;

  #main-background {
    position: absolute;
    top: 0;
    left: 16px;
    width: calc(100% - 16px * 2);
    height: 100%;
    background-color: var(--main-background);
    z-index: 0;
    content: " ";
    display: block;

    @include media-breakpoint-up(lg) {
      left: var(--spacing-xl);
      width: calc(100% - var(--spacing-xl) * 2);
    }
  }

  #canvas-track {
    position: absolute;
    top: -800px;
    left: 16px;
    width: calc(100% - 16px * 2);
    height: 150vh;
    z-index: 0;
    display: block;
    overflow: hidden;
    display: flex;
    flex-flow: column;
    align-items: center;
    justify-content: flex-start;

    @include media-breakpoint-up(lg) {
      left: var(--spacing-xl);
      width: calc(100% - var(--spacing-xl) * 2);
    }
  }

  #canvas-wrapper {
    width: 100%;
    max-width: calc(1920px + 10%);
    height: 150vh;
  }

  #main-wrapper {
    min-height: 150vh;
  }
</style>
